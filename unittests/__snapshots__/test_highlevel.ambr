# serializer version: 1
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0003]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0003', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0003 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Bestellung fristgerecht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Bestellung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0004]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0004', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0004 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-CL Abonnement vor? Entspricht die Versionsangabe in der BG-CL der Versionsangabe der BG-SZR (Kategorie B), zu der eine BG-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe einer vorliegenden LF-SZR (Kategorie B)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0005]
  EbdTableMetaData(ebd_code='E_0005', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird und ausschließlich die Liste versandt wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0007]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0007', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0007 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-SZR (Kategorie A) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0008]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0008', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0008 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang einer Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 1 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0009]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0009', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0009 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0010]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0010', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0010 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die ID bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0011]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0011', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0011 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Erfolgt die Aktivierung des MaBiS-ZP auf Ebene des Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Regelzone, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Regelzone, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vor-handen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der Bilanzkreis zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung \nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0012]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0012', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0012 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0013]
  EbdTableMetaData(ebd_code='E_0013', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0014]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0014', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0014 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe der LF-SZR (Kategorie B), zu der eine LF-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0015]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0015', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0015 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der ÜNB zum Aktivierungsbeginn für das Bilanzierungsgebiet zuständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Spannungsebene und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0016]
  EbdTableMetaData(ebd_code='E_0016', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0017]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0017', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0017 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der BG-CL der Versionsangabe der BG-SZR (Kategorie B), zu der eine BG-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der BG-CL nicht ent-halten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung \nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der BG-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zu-geordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der BG-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB (über LF) und ÜNB ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB (über LF) und ÜNB ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB (über LF) und ÜNB ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0018]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0018', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0018 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0019]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0019', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0019 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0020]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0020', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0020 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die ID bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist genau eines der angegebenen Bilanzierungsgebiete das Bilanzierungsgebiet des Empfängers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet des benachbarten NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Empfänger zum Aktivierungsbeginn für eines der zwei angegebenen Bilanzierungsgebiete zuständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet des verantwortlichen NB, Bilanzierungsgebiet des benachbarten NB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0021]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0021', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0021 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0022]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0022', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0022 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Abbestellung fristgerecht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Abbestellung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0023]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0023', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0023 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Hat der BKV für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0024]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0024', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0024 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet des verantwortlichen NB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet des verantwortlichen NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet des benachbarten NB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet des benachbarten NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für eines der zwei angegebenen Bilanzierungsgebiete?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet des verantwortlichen NB, Bilanzierungsgebiet des benachbarten NB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0025]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0025', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0025 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Hat der BKV dem BIKO für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Falsche Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV dem BIKO für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Falsche Aggregationsebene RZ'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0026]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0026', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0026 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='6', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code='A03', note='Datenstatus „Abgerechnete Daten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='7', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus „Abgerechnete Daten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='1', instruction_text='Je höchster Version der BK-SZR mit dem Datenstatus „Abrechnungsdaten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat erfolgen nachfolgende Prüfungen:'), MultiStepInstruction(first_step_number_affected='7', instruction_text='Die folgenden Aktionen sind je zugehörigem MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0027]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0027', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0027 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Regelzone und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Regelzone und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vor-handen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung \nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0028]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0028', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0028 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0029]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0029', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0029 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Eingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0030]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0030', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0030 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Eingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0031]
  EbdTableMetaData(ebd_code='E_0031', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0032]
  EbdTableMetaData(ebd_code='E_0032', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0033]
  EbdTableMetaData(ebd_code='E_0033', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0034]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0034', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0034 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für das angegebene Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungsgebiet, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der Bilanzkreis zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0035]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0035', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0035 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Aktivierungsende in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Aktivierungsende bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Deaktivierungszeitpunkt bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0036]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0036', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0036 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang einer Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0038]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0038', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0038 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0039]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0039', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0039 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in dem angefragten Gebiet (Bilanzierungsgebiet oder Regelzone) für diesen Bilanzkreis LF-SZR zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0040]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0040', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0040 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der NZR den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0041]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0041', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0041 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0042]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0042', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0042 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='6', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code='A01', note='Datenstatus „Abrechnungsdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A02', note='Datenstatus „Prüfdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='7', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus Abrechnungsdaten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='7', instruction_text='Die folgenden Aktionen sind je zugehörigem MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0043]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0043', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0043 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Hat der BKV für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='9', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code='A01', note='Datenstatus „Abrechnungsdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='12', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus Abrechnungsdaten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='12', instruction_text='Die folgenden Aktionen sind je zugehörigen MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0045]
  EbdTableMetaData(ebd_code='E_0045', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0046]
  EbdTableMetaData(ebd_code='E_0046', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0047]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0047', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0047 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe der LF-SZR (Kategorie A), zu der eine LF-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz bzw. ergänzte Markt-lokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP, spezifische Arbeit, usw.) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachstehenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0048]
  EbdTableMetaData(ebd_code='E_0048', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird und ausschließlich die Liste versandt wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0049]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0049', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0049 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-CL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe einer vorliegenden LF-SZR (Kategorie A)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP, spezifische Arbeit, usw.) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachstehenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0051]
  EbdTableMetaData(ebd_code='E_0051', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0052]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0052', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0052 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges BG-CL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der BG-CL der Versionsangabe einer vorliegenden BG-SZR (Kategorie B)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der BG-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der BG-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zu-geordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der BG-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB (über LF) und ÜNB ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB (über LF) und ÜNB ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB (über LF) und ÜNB ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0053]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0053', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0053 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der BG-SZR mit dem Daten-status „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der BG-SZR mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0054]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0054', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0054 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0055]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0055', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0055 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Aktueller Datenstatus\nHinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0056]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0056', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0056 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der BK-SZR mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version (der BK-SZR mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0057]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0057', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0057 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0058]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0058', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0058 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0059]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0059', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0059 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version des DZÜ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version des DZÜ mit dem Daten-status „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0061]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0061', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0061 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung innerhalb der Clearingphase für DZÜ der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0062]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0062', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0062 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BG-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0063]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0063', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0063 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BK-SZR (Kategorie A) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0064]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0064', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0064 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BK-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0065]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0065', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0065 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist für die Version der Zeitreihe des DZÜ für den Bilanzierungsmonat eine DZÜ-Liste mit identischer Version und identischem Bilanzierungsmonat zu diesem MaBiS-ZP vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDZÜ-Liste nicht vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entsprechen die Energiemengen des DZÜ den auf Basis des Prüfergebnisses der DZÜ-Liste ermittelten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0066]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0066', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0066 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der NZR mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungs-monat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus "Abgerechnete Daten KBKA" für die höchste Version der NZR mit dem Datenstatus "Abgerechnete Daten" oder "Abrechnungsdaten KBKA" in diesem Bilanzierungsmonat')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0067]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0067', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0067 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für die Clearingphase BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0068]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0068', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0068 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in dem angefragten Gebiet (Bilanzierungsgebiet oder Regelzone) für diesen Bilanzkreis LF-SZR zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0069]
  EbdTableMetaData(ebd_code='E_0069', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0070]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0070', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0070 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der DZÜ-Liste innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nEingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die Marktlokation bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation ist nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB für SLS ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis von 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der Übertrag der Energiemenge der Marktlokation aus der ÜNB-DZR in die NB-DZR berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='2', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0071]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0071', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0071 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Redispatch-Bilanzkreis des ANB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für den angegebenen Redispatch-Bilanzkreis des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungs-gebiet, Redispatch-Bilanzkreis des ANB, Bilanzkreis des LF und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungs-gebiet, Redispatch-Bilanzkreis des ANB, Bilanzkreis des LF und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Bilanzkreis des LF zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Passt die Angabe des Mediums zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMedium nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0072]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0072', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0072 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Redispatch-Bilanzkreis des ANB zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0073]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0073', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0073 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0074]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0074', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0074 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0075]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0075', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0075 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der AAÜZ mit dem Daten-status „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0076]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0076', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0076 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0077]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0077', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0077 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0078]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0078', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0078 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Redispatch-Bilanzkreis des ANB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für den angegebenen Redispatch-Bilanzkreis des ANB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungsgebiet, Redispatch-Bilanzkreis des ANB, Redispatch-Bilanzkreis des anfNB und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet, Redispatch-Bilanzkreis des ANB, Redispatch-Bilanzkreis des anfNB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Redispatch-Bilanzkreis des anfNB zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des anfNB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Passt die Angabe des Mediums zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMedium nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0079]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0079', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0079 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Redispatch-Bilanzkreis des ANB zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0080]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0080', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0080 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0081]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0081', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0081 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0082]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0082', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0082 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0083]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0083', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0083 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0084]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0084', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0084 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0093]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0093', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0093 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-AASZR den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0094]
  EbdTableMetaData(ebd_code='E_0094', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird und ausschließlich die Liste versandt wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0095]
  EbdTableMetaData(ebd_code='E_0095', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0096]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0096', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0096 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-AACL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-AACL der Versionsangabe einer vorliegenden LF-AASZR?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-AACL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-AACL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-AACL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF aus-getauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht die tatsächliche Ausfallarbeitsmenge der er-warteten Ausfallarbeitsmenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0097]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0097', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0097 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-AACL der Versionsangabe der LF-AASZR, zu der eine LF-AACL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-AACL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-AACL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-AACL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht die tatsächliche Ausfallarbeitsmenge der er-warteten Ausfallarbeitsmenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0098]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0098', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0098 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der AAÜZ den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0099]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0099', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0099 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der AAÜZ den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0100]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0100', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0100 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Gehört das empfangene Profil bzw. die Profilschar zu einer zuvor abonnierten Profilgruppe aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Profil bzw. Profilschar gehört nicht zu einer zuvor abonnierten Profilgruppe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde eine Profilschar empfangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note='Hinweis: Es wurde ein Profil empfangen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die übermittelte Version des Profils für den übermittelten Zeitraum höher als die bisher höchste verarbeitete Version des Profils des gleichen Zeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Version des Profils nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die übermittelte Version der Profilschar für den übermittelten Beginnzeitpunkt höher als die bisher höchste verarbeitete Version der Profilschar zu diesem Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Version der Profilschar nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Stimmt die angegebene Maßeinheit der verwendeten OBIS-Kennzahl mit der Maßeinheit des Normierungsfaktors aus der Liste der Profildefinitionen überein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Maßeinheit weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht die niedrigste Temperaturmaßzahl der Profilschar der Begrenzungskonstante aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Niedrigste Temperaturmaßzahl weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht die Anzahl der Temperaturmaßzahlen der Profilschar der erwarteten Anzahl der Temperaturmaßzahlen gemäß der Bezugstemperatur und der Begrenzungskonstante aus der Liste der Profildefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Anzahl der Temperaturmaßzahlen weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0101]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0101', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0101 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Gehört das empfangene Profil zu einer zuvor abonnierten Profilgruppe aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Empfangenes Profil gehört nicht zu einer zuvor abonnierten Profilgruppe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die übermittelte Version des Profils für den übermittelten Zeitraum höher als die bisher höchste verarbeitete Version des Profils des gleichen Zeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Version des Profils nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0102]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0102', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0102 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wird die ID der Netzgangzeitreihe bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Zuordnung der Netzgangzeitreihe zur Netzzeitreihe der Vereinbarung zur messtechnischen Abgrenzung der beiden benachbarten NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nZuordnung passt nicht zur Vereinbarung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Absender zum Zuordnungsbeginn an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Berechtigung für die Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger zum Zuordnungsbeginn an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKeine Beteiligung an der Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Existiert zum Zuordnungsbeginn bereits eine Zuordnung der angegebenen Netzgangzeitreihe zu einer Netzzeitreihe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nZuordnung bereits vorhanden\nHinweis: In der Antwort ist die zugeordnete Netzzeitreihe anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist ein nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZuordnung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0103]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0103', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0103 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Beendigung der Zuordnung der Netzgangzeitreihe zur Netzzeitreihe der Vereinbarung zur messtechnischen Abgrenzung der beiden benachbarten NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBeendigung der Zuordnung passt nicht zur Vereinbarung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Absender zum Zuordnungsende an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine Berechtigung für die Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Empfänger zum Zuordnungsende an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Beteiligung an der Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Existiert zum Zuordnungsende eine Zuordnung der angegebenen Netzgangzeitreihe zu der angegebenen Netzzeitreihe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZuordnung nicht vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nBeendigung der Zuordnung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0104]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0104', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0104 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in der Liste LF-SZR enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0105]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0105', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0105 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in der Liste LF-SZR enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0200]
  EbdTableMetaData(ebd_code='E_0200', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0090_Bestätigung Kündigung MSBS\nS_0054_Ablehnung Kündigung MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0201]
  EbdTableMetaData(ebd_code='E_0201', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0055_Bestätigung Anmeldung MSB\nS_0056_Ablehnung Anmeldung MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0202]
  EbdTableMetaData(ebd_code='E_0202', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0059_Bestätigung Ende MSB\nS_0060_Ablehnung Ende MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0203]
  EbdTableMetaData(ebd_code='E_0203', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0061_ORDRSP Fortführungsbestätigung MSBA\nS_0062_ORDRSP Ablehnung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0204]
  EbdTableMetaData(ebd_code='E_0204', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0065_Ankündigung zum Eigenausbau\nS_0066_Mitteilung, kein Eigenausbau MSBA')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0205]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0205', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0205 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt ein gültiger Vertrag zwischen MSB und LF vor, der die Rechnungsabwicklung des Messstellenbetriebs an den LF regelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein gültiger Vertrag'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind alle Messlokationen der angefragten Marktlokationen mit kME ausgestattet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausschließlich mit kME ausgestattet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Lässt das Vertragsverhältnis mit dem Kunden die Abrechnung des Messstellenbetriebs zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Vertragsverhältnis mit Dritten lässt Abrechnung des Messstellenbetriebs nicht zu'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Lässt das Vertragsverhältnis mit dem Kunden das im Angebot benannte Beginndatum zum Messstellenbetrieb zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Vertragsverhältnis mit Dritten lässt das Beginn-datum nicht zu'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Handelt es sich um ein Angebot auf Basis eines Preisblattes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt dem LF ein gültiges Preisblatt mit allen im Angebot an-gegebenen Preisschlüsselstämmen bzw. mit allen im Angebot angegebenen Artikel-ID vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Kein Preisblatt vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entsprechen die angebotenen Positionen dem Vertragsverhältnis mit dem Kunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Angebotspositionen abweichend zum Vertrags-verhältnis'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bestellung versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0206]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0206', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0206 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht ein Vertragsverhältnis über die Rechnungsabwicklung über den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nKeine Vereinbarung über die Abrechnung MSB über den LF'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0207]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0207', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0207 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt ein gültiger Vertrag zwischen MSB und LF vor, der die Rechnungsabwicklung des Messstellenbetriebs an den LF regelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein gültiger Vertrag'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der angefragte Beginn der Übernahme der Abrechnung des Messstellenbetriebs im Zeitraum einer vom MSB bereits bestätigten Vereinbarung mit dem anfragenden LF zur Abwicklung des Messentgeltes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Abwicklung des Messentgelts schon vollzogen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Sind alle Messlokationen der angefragten Marktlokation mit kME ausgestattet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausschließlich mit kME ausgestattet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Besteht ein Vertrag mit dem Anschlussnehmer gemäß MsbG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Vertragsverhältnis mit Anschlussnehmer lässt das nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Besteht ein nicht konkludent geschlossener Vertrag für den Messstellenbetrieb mit dem Anschlussnutzer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist eine Abrechnung über den LF durch den Vertrag ausgeschlossen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Vertragsverhältnis mit dem Dritten lässt das nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wird das Entgelt bereits über die erzeugende Marktlokation entrichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Entgelt wird über die erzeugende Marktlokation entrichtet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wird das Entgelt über den Lieferanten einer anderen Marktlokation entrichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Entgelt wird den Lieferanten einer anderen Marktlokation entrichtet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Möchte der MSB zum angefragten Termin kein Angebot erstellen und verzichtet auf die Erstellung und Versendung des Angebots?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt bereits eine mit dem LF vereinbarte Rechnungsabwicklung für diese Marktlokation zu einem späteren Zeitpunkt vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Die vereinbarte Rechnungsabwicklung für diese Marktlokation bleibt erhalten. \nFür das Zeitintervall zwischen angefragtem Termin und vereinbarter Rechnungsabwicklung wird kein Messentgelt in Rechnung gestellt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Der MSB erstellt zum angefragten Termin kein Angebot.\nHinweis: Möchte der MSB die Abrechnung zu einem späteren Zeitpunkt starten, so wird er gemäß Use-Case „Angebot zur Rechnungsabwicklung des Messstellenbetriebes über den LF durch den MSB“ ein Angebot zusenden.')], use_cases=None), EbdTableRow(step_number='11', description='Liegt der angefragte Beginn der Übernahme der Abrechnung des Messstellenbetriebs in einem bereits vom MSB abgerechneten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Angebot versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Hat der LF zum nächstmöglichen Termin angefragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Beginndatum liegt im bereits abgerechneten Zeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0208]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0208', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0208 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Lässt das Vertragsverhältnis mit dem Kunden das im Angebot benannte Beginndatum zum Messstellenbetrieb zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Vertragsverhältnis mit Dritten lässt das Beginn-datum nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um ein Angebot auf Basis eines Preisblattes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt dem LF ein gültiges Preisblatt mit allen im Angebot angegebenen Preisschlüsselstämmen bzw. mit allen im Angebot angegebenen Artikel-ID vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kein Preisblatt vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die angebotenen Positionen dem Vertrags-verhältnis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Angebotspositionen abweichend zum Vertrags-verhältnis'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bestellung versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0209]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0209', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0209 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht ein Vertragsverhältnis über die Rechnungsabwicklung über den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLF ist nicht Zahler des Messstellenbetriebs'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Beendigungsdatum nach dem Stichtag, der wie folgt berechnet wird: Eingangsdatum der Nachricht - (6 Wochen + 5 WT)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0210]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0210', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0210 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer LF lehnt die Zahlung des Messstellenbetriebs ab. Der LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer LF lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den LF begründet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='95'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='95', description='Wurde das in der Rechnung genannte Angebot auf Basis eines Preisblatts gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis: In dem Angebot des MSB an den LF wurde ein individuelles Angebot angegeben.')], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem Lieferanten liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde das in der Rechnung genannte Angebot des MSB zur Übernahme der Rechnungsabwicklung des Messstellenbetriebs für diese Marktlokation angenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem Lieferanten für diese Marktlokation vereinbart.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist das in der Rechnung genannte Angebot das jüngste bestätigte Angebot, das genau zu diesem Zeitpunkt beginnt?\nHinweis: Das jüngste bestätigte Angebot richtet sich nach dem Nachrichtendatum (Segment DTM+137) der QUOTES vom MSB.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nDie Referenz erfolgt nicht auf das jüngste Angebot zu diesem Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen Lieferanten und MSB für diese Marktlokation für den abgerechneten Zeitraum vereinbart?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem Lieferanten für diese Marktlokation für den abgerechneten Zeitraum vereinbart.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Liegt im Abrechnungszeitraum mindestens ein weiteres bestätigtes Angebot vor, welches zu einem Zeitpunkt beginnt, der innerhalb des Abrechnungszeitraumes liegt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung auf Kopfebene\nEs dürfen nicht mehrere bestätigte Angebote in einer Rechnung abgerechnet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde das Angebot auf Basis eines Preisblatts gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='309'), result_code=None, note='Hinweis: In dem Angebot des MSB an den LF wurde ein individuelles Angebot angegeben.')], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='309', description='Entspricht der Preis aus der Rechnungsposition dem Preis des individuellen Angebots?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A29', note='Cluster: Ablehnung auf Positionsebene\nDer Preis aus der Rechnungsposition entspricht nicht dem vereinbarten Preis aus dem individuellen Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0211]
  EbdTableMetaData(ebd_code='E_0211', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0217]
  EbdTableMetaData(ebd_code='E_0217', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Diese Codeliste befindet sich noch im Datenformat.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0218]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0218', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0218 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Lieferrichtung der Marktlokation korrekt angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLieferrichtung der Marktlokation ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist im Geschäftsvorfall der Status der Berechnungsformel für die Marktlokation mit „Berechnungsformel muss beim Absender angefragt werden“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nBerechnungsformel muss bilateral ausgetauscht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist im Geschäftsvorfall der Status der Berechnungsformel für die Marktlokation mit „Berechnungsformel besitzt keine Rechenoperation“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in den zuvor ausgetauschten Stammdatenmeldungen (z.B.\xa0Anmeldebestätigung, Stammdatenänderung (inklusive Lokationsbündelstrukturänderung)) gemäß dem „Gültig-Ab“ Datum genau eine Messlokation dieser Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Marktlokation ist nicht genau eine Messlokation zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nEnergiemenge der Marktlokation ist mit der Energiemenge der Messlokation identisch')], use_cases=None), EbdTableRow(step_number='5', description='Liegt eine Änderung der Lokationsbündelstruktur durch den NB vor, die durch Stammdatenänderung übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist das „Gültig ab“-Datum der Berechnungsformel tagidentisch mit dem Datum der Strukturänderung des Lokationsbündels?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\n„Gültig ab“-Datum der Berechnungsformel unplausibel.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Anzahl der gemeldeten / vorliegenden Mess-lokationen aus den Stammdatenmeldungen (z. B. Anmeldebestätigung, Stammdatenänderung) gemäß dem „Gültig ab“-Datum kleiner als in der Berechnungsformel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEs sind zu viele Messlokationen in der Berechnungsformel vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die Anzahl gemäß der gemeldeten/vorliegenden Messlokationen aus den Stammdatenmeldungen (z.\xa0B. Anmeldebestätigung, Stammdatenänderung) gemäß dem „Gültig ab“-Datum größer als in der Berechnungsformel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEs fehlen Messlokationen in der Berechnungs-formel.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Sind alle ID der Messlokationen in der Berechnungsformel mit den zuvor in den Stammdatenmeldungen (z. B. Anmeldebestätigung, Stammdatenänderung) gemeldeten ID der Messlokationen identisch?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nID der Messlokationen stimmen nicht überein'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Existiert für jede Flussrichtung der in der Berechnungsformel vorhandenen Messlokationen mindestens eine zuvor in den Stammdatenmeldungen (z.\xa0B. Anmeldebestätigung, Stammdatenänderung) ausgetauschte OBIS-Kennzahl* mit identischer Flussrichtung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDie Flussrichtung mindestens einer Messlokation ist nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nZustimmung bei berechneter Marktlokation')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0219]
  EbdTableMetaData(ebd_code='E_0219', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0073_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0220]
  EbdTableMetaData(ebd_code='E_0220', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0221]
  EbdTableMetaData(ebd_code='E_0221', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0075_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0222]
  EbdTableMetaData(ebd_code='E_0222', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0225]
  EbdTableMetaData(ebd_code='E_0225', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0226]
  EbdTableMetaData(ebd_code='E_0226', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0076_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0227]
  EbdTableMetaData(ebd_code='E_0227', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0228]
  EbdTableMetaData(ebd_code='E_0228', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0078_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0229]
  EbdTableMetaData(ebd_code='E_0229', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0230]
  EbdTableMetaData(ebd_code='E_0230', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0079_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0231]
  EbdTableMetaData(ebd_code='E_0231', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0232]
  EbdTableMetaData(ebd_code='E_0232', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0057_Statusmeldung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0233]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0233', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0233 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die für den Rollout vorgesehene Messlokation ein Bestandsschutz gemäß §19 Abs. 5 MsbG vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wird auf den Bestandsschutz gemäß § 19 Abs. 5 MsbG für die Messlokation verzichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBestandsschutz gemäß § 19 Abs. 5 MsbG für die Messlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Selbsteinbau eines iMS oder einer mME geplant?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nSelbsteinbau eines iMS oder einer mME geplant'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wird auf den Selbsteinbau eines iMS oder einer mME verzichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nAuf Selbsteinbau eines iMS oder einer mME wird verzichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZum jetzigen Zeitpunkt noch keine Aussage hin-sichtlich Selbsteinbau möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0240]
  EbdTableMetaData(ebd_code='E_0240', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0063_Bestätigung Verpflichtungsanfrage\nS_0064_Ablehnung Verpflichtungsanfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0241]
  EbdTableMetaData(ebd_code='E_0241', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0243]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0243', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0243 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.')], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0245]
  EbdTableMetaData(ebd_code='E_0245', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0246]
  EbdTableMetaData(ebd_code='E_0246', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0247]
  EbdTableMetaData(ebd_code='E_0247', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0067_ORDRSP Bestellbestätigung\nS_0068_ORDRSP Abl. der Bestellung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0248]
  EbdTableMetaData(ebd_code='E_0248', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Diese Codeliste befindet sich noch im Datenformat.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0249]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0249', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0249 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das gewünschte Änderungsdatum mindestens 20 WT nach dem Nachrichteneingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nÄnderung kann durchgeführt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0250]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0250', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0250 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das gewünschte Änderungsdatum mindestens 20 WT nach dem Nachrichteneingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nÄnderung kann durchgeführt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0251]
  EbdTableMetaData(ebd_code='E_0251', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0252]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0252', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0252 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist das vom ESA gewünschte Messprodukt in der Codeliste der Konfigurationen als „Pflicht“ gekennzeichnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wird das vom ESA gewünschte Messprodukt entsprechend der Codeliste der Konfigurationen angeboten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDas vom ESA gewünschte Messprodukt wird vom MSB nicht angeboten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die vertragliche Grundlage zur Anfrage und Übermittlung der Werte und Abrechnung der erbrachten Dienstleistung vom MSB an den ESA beim MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nVertragliche Grundlage des ESA liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt dem MSB eine gültige datenschutzrechtliche Einwilligung (wie z. B. das BDEW-Muster „Einwilligungserklärung in die Verarbeitung personenbezogener Daten nach DS-GVO - \nAnfrage und Übermittlung von Messprodukten \ngemäß BNetzA-Festlegung BK6-20-160“) zur Anfrage und Übermittlung von Messprodukten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie unterzeichnete Einwilligung des Anschlussnutzers für die Lokation liegt nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind die Daten in der Einwilligung plausibel und vollständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVorliegende Einwilligung ist nicht plausibel oder vollständig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ermöglicht die vorhandene Gerätetechnik die Übermittlung der angefragten Werte entsprechend dem Messprodukt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie Gerätetechnik misst die angeforderten Messwerte nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Handelt es sich um eine Anfrage von Werten auf Ebene der Marktlokation / Tranche / Netzlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der MSB an allen der Marktlokation (inkl. Tranche) / Netzlokation zugeordneten Messlokationen auch der MSB der Messlokation(en)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDer MSB der Marktlokation / Netzlokation ist nicht zeitgleich der allen Messlokation(en) zugeordnete MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0253]
  EbdTableMetaData(ebd_code='E_0253', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0254]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0254', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0254 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich bei der Bestellung um eine Bestellung für turnusmäßige/regelmäßige Übermittlung (Abo) von Werten an den ESA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nEs handelte sich bei der Bestellung um eine einmalige Übermittlung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist das gewünschte Beendigungsdatum größer als der Beginnzeitpunkt der turnusmäßigen/regelmäßigen Übermittlung (Abo)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDie Bestellung ist zu stornieren.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wurde die Übermittlung von Werten bereits zu einem früheren oder zu dem in der Beendigung genannten Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie Übermittlung wurde bereits zu einem früheren oder zu dem in der Beendigung genannten Zeitpunkt beendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt das gewünschte Beendigungsdatum vor dem Zeitpunkt, für den die jüngsten Daten geliefert wurden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung \nEs wurden bereits Daten nach dem gewünschten Beendigungsdatum übermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nBeendigung wird bestätigt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0256]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0256', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0256 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Bindungsfrist des Angebots abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Akzeptiert der MSB die Bestellung auch bei abgelaufener Bindungsfrist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Bindungsfrist des Angebots ist abgelaufen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Handelt es sich bei der Bestellung um ein Abo?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Bietet der MSB das gewünschte Messprodukt zum Zeitraum / Zeitpunkt der Messwertermittlung als Abo an?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDer MSB sieht für das gewünschte Messprodukt keine Übermittlung als Abo vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Bietet der MSB das gewünschte Messprodukt zum Zeitraum / Zeitpunkt der Messwertermittlung als einmalige Übermittlung an?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDer MSB sieht für das gewünschte Messprodukt keine einmalige Übermittlung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die vertragliche Grundlage zur Anfrage und Übermittlung der Werte und Abrechnung der erbrachten Dienstleistung vom MSB an den ESA beim MSB zum Zeitraum / Zeitpunkt der Messwertermittlung noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie vertragliche Grundlage zwischen dem MSB und dem ESA ist nicht mehr gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der MSB für den im Angebot spezifizierten Zeitraum / Zeitpunkt der Messwertermittlung der entsprechenden Lokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDer MSB ist der Lokation für den im Angebot spezifizierten Zeitraum / Zeitpunkt der Messwertermittlung nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die dem MSB vorliegende datenschutzrechtliche Einwilligung (wie z. B. das BDEW-Muster „Einwilligungserklärung in die Verarbeitung personenbezogener Daten nach DS-GVO - \nAnfrage und Übermittlung von Messprodukten \ngemäß BNetzA-Festlegung BK6-20-160“) zur Anfrage und Übermittlung von Messprodukten zum Zeitraum / Zeitpunkt der Messwertermittlung weiterhin gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDer Anschlussnutzer hat gegenüber dem ESA seine Einwilligung widerrufen oder ihre Gültigkeit ist abgelaufen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ermöglicht die vorhandene Gerätetechnik zum Zeitraum / Zeitpunkt der Messwertermittlung die Übermittlung der angefragten Werte entsprechend dem Messprodukt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDie Gerätetechnik misst die angeforderten Messwerte nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Handelt es sich um eine Bestellung von Werten auf Ebene der Marktlokation /Tranche / Netzlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestellung ist angenommen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MSB zum Zeitraum / Zeitpunkt der Messwertermittlung an allen der Marktlokation (inkl. Tranche) / Netzlokation zugeordneten Messlokationen auch der MSB der Messlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer MSB der Marktlokation /Netzlokation ist nicht zeitgleich der allen Messlokationen zugeordnete MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestellung ist angenommen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0257]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0257', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0257 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde die Bestellung des ESA durch den MSB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Bestellung des ESA wurde durch den MSB nicht bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Handelte es sich bei der Bestellung um ein turnusmäßige/regelmäßige Übermittlung (Abo)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note='Hinweis: Es handelte sich bei der Bestellung um eine einmalige Übermittlung.')], use_cases=None), EbdTableRow(step_number='3', description='Wurde die turnusmäßige/regelmäßige Übermittlung (Abo) von Werten bereits begonnen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMit der Übermittlung von Werten aus dem Abo wurde bereits begonnen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nStornierung wird bestätigt.')], use_cases=None), EbdTableRow(step_number='4', description='Ist die einmalige Übermittlung von Werten bereits erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie einmalige Übermittlung der Werte ist bereits erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nStornierung wird bestätigt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0258]
  EbdTableMetaData(ebd_code='E_0258', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0259]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0259', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0259 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes/Ausführungsdatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes/Ausführungsdatums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum/Ausführungsdatum der genannten Messlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer MSB ist der Messlokation nicht einen Tag des Abrechnungszeitraumes/Ausführungsdatums zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum/Ausführungsdatum der genannten Messlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer MSB lehnt die Zahlung ab. Eine Ablehnung der Zahlung wird durch den MSB begründet.\nHinweis: Der MSB gibt den erwarteten Abrechnungszeitraum/das erwartete Ausführungsdatum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum/ Ausführungsdatum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält ein bereits abgerechnetes Zeitintervall/ einen bereits abgerechneten Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\n(Zahlungsziel < 10 WT zum Rechnungseingangsdatum)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Handelt es sich um eine Geräteübernahme (Kauf/ Nutzungsüberlassung)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde das in der Rechnung genannte Angebot des MSB in der Bestellbestätigung im Prozess Geräteübernahme für diese Messlokation bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Angebot des MSB in der Bestellbestätigung im Prozess Geräteübernahme für diese Messlokation wurde nicht bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die in der Rechnung genannte Bestellung die jüngste bestätigte Bestellung, die genau zu diesem Zeitpunkt beginnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDie Referenz erfolgt nicht auf die jüngste Bestellung zu diesem Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Handelt es sich um eine Geräteübernahme (Kauf/ Nutzungsüberlassung)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Entspricht die Rechnungsposition dem bestätigten Angebot?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDie Rechnungsposition entspricht nicht dem bestätigten Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition gleich oder nach dem Enddatum des Abrechnungszeitraums / Ausführungsdatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition ist gleich oder nach dem Enddatum des Abrechnungszeitraums/ Ausführungsdatums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition vor oder gleich dem Beginndatum des Abrechnungszeitraums?\nHinweis: Bei Nutzung des Ausführungsdatums in der Rechnung Prüfschritt mit ja beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der richtige Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nFalscher Abrechnungszeitraum wird abgerechnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Entspricht der Preis in der Position dem vereinbarten Preis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A16', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition passt nicht zum vereinbarten Preis.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen vereinbarte Positionen in der Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A18', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden.\nHinweis: Fehlende Positionen sind im Freitextfeld zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A19', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A20', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0260]
  EbdTableMetaData(ebd_code='E_0260', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0261]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0261', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0261 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.')], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0264]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0264', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0264 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Angebot, dass zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischen Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0265]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0265', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0265 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0266]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0266', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0266 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Angebot, dass zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischen Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0267]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0267', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0267 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0300]
  EbdTableMetaData(ebd_code='E_0300', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0301]
  EbdTableMetaData(ebd_code='E_0301', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0047_Bestätigung Abmeldungsanfrage\nS_0048_Ablehnung Abmeldungsanfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0302]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0302', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0302 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde bereits zum identischen Abmeldedatum für die in diesem Geschäftsvorfall genannte Marktlokation der Geschäftsvorfall Lieferende positiv bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLieferende zum Abmeldedatum wurde bereits bestätigt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Transaktionsgrund Stilllegung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nAbmeldung wg. fehlender Zuordnungsermächtigung\nAbmeldung wegen fehlender Zuordnungsermächtigung aufgrund Änderung ZRT')], use_cases=None), EbdTableRow(step_number='3', description='Ist die Prognosegrundlage der Marktlokation auf Basis von Werten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Profilen')], use_cases=None), EbdTableRow(step_number='4', description='Liegt das Datum „Lieferende“ mindestens 1 WT nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEine Stilllegung einer Marktlokation mit Prognosegrundlage auf Basis von Werten kann nicht in die Vergangenheit gemeldet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBei Marktlokation mit Prognosegrundlage auf Basis von Werten muss Bilanzierungsende und Lieferende identisch sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt das Datum „Bilanzierungsende“ mindestens 3 WT nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsfrist bei Marktlokationen mit Prognosegrundlage auf Basis von Profilen nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Liegt das Datum „Bilanzierungsende“ auf dem 1. eines Kalendermonates 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nBilanzierungsende liegt nicht auf dem Monatswechsel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Liegen dem LF Informationen darüber vor, dass die Marktlokation nicht stillgelegt wird/wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDem LF liegen Informationen vor, dass die Marktlokation nicht stillgelegt wird/wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None), EbdTableRow(step_number='9', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nLieferende und Bilanzierungsende müssen bei Lieferende von NB an LF aufgrund entfallender oder fehlender Zuordnungsermächtigung synchron sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt das übermittelte Datum „Lieferende“ nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nLieferende bei Transaktionsgrund „Abmeldung wegen fehl. Zuordnungsermächtigung“ \noder\n„Abmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT“ muss immer in der Zukunft sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist das angegebene Datum „Lieferende“ der nächste 1.\xa0eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDas Lieferende bei Abmeldung wegen fehl. Zuordnungsermächtigung muss auf dem 1. eines Kalendermonats liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0303]
  EbdTableMetaData(ebd_code='E_0303', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0045_Bestätigung Kündigung\nS_0046_Ablehnung Kündigung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0304]
  EbdTableMetaData(ebd_code='E_0304', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0049_Bestätigung Anmeldung\nS_0050_Bestätigung Anmeldung Neuanl. u. LW m. Trbild. b. N-EE+N-KWKG\nS_0051_Ablehnung Anmeldung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0305]
  EbdTableMetaData(ebd_code='E_0305', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0051_Ablehnung Anmeldung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0306]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0306', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0306 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das Abmeldedatum mindestens einen Tag nach dem Eingangsdatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung bei Aufhebung einer zu-künftigen Zuordnung wegen Auszug oder Still-legung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Eingangsdatum der Abmeldung mindestens 1 Monat vor dem Monatsletzten des gewünschten Abmeldedatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung bei Transaktionsgründen für eine Abmeldung in der Zukunft.\nHinweis: Abmeldedatum kann ausschließlich ein Monatsletzter sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt die Aufhebung einer zukünftigen Zuordnung zu dem gleichen Datum (Zeitpunkt), welcher dem Lieferanten im Lieferbeginn bestätigt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie Aufhebung einer zukünftigen Zuordnung muss zum Datum (Zeitpunkt) angegeben werden, wie im Lieferbeginn bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt bereits eine bestätigte Abmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nLieferende wird zugestimmt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung Sonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0400]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0400', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0400 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt der übermittelte Kündigungstermin vor dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist in der Kündigung die Angabe der Identifikationslogik mit dem Wert „Marktlokations-ID“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wurde mit der in der Kündigung angegebenen ID der Marktlokation im IT-System des Empfängers eine Marktlokation identifiziert, welcher der Empfänger für mindestens einen Tag zugeordnet war bzw. ist bzw. sein wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Marktlokation ist nicht identifizierbar.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde mit allen zur Verfügung gestellten Informationen in der Kündigung ohne Berücksichtigung des Kundennamens unter Wahrung der gebotenen Sorgfalt genau eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entspricht der Kunde aus der Kündigung dem Vertragspartner beim Empfänger der Kündigung? (Identifizierung unter Wahrung der gebotenen Sorgfalt)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nAngefragter Kunde ist nicht der Vertragspartner beim LFA.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Wurde mit den zur Verfügung gestellten Informationen in der Kündigung mehr als eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Identifizierung einer Marktlokation.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Kunde aus der Kündigung bei exakt einer Marktlokation, dem Vertragspartner beim Empfänger der Kündigung, mit welchem der LFA zum Kündigungsdatum einen Vertrag hat? \n(Identifizierung unter Wahrung der gebotenen Sorgfalt)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMehrere Marktlokationen wurden identifiziert, Kunde war bei keiner bzw. mehreren Marktlokationen zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Handelt es sich bei dem identifizierten Objekt um einen Teil einer Kundenanlage, welches zum Kündigungsdatum + 1\xa0Tag nicht an der Marktkommunikation teilnimmt? \n(Teil einer Kundenanlage, welche dem NB nicht bekannt ist.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nTeil einer Kundenanlage, die derzeit nicht se-parat bilanziert wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt der in der Kündigung angefragte Termin vor dem Beginn des Vertrages zwischen dem Kunden und dem Empfänger?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEmpfänger ist zum angefragten Zeitpunkt nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Wurde der Vertrag bereits zu dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nVertrag wurde bereits zum angefragten Kündigungstermin gekündigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Wurde der Vertrag bereits zu einem Datum vor dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nZum Kündigungstermin besteht kein Vertrags-verhältnis mehr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Handelt es sich um eine Kündigung, welche zu einem fixen Termin ausgesprochen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der Vertrag zum übermittelten Kündigungstermin unter Einhaltung der Kündigungsfrist unter Berücksichtigung des Eingangsdatums der Kündigung kündbar?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Wurde der Vertrag bereits zu einem späteren Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nVertragsbindung bei bereits in der Zukunft beendetem Vertrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nVertragsbindung')], use_cases=None), EbdTableRow(step_number='15', description='Wurde für die Kündigung eine Vollmacht von dem LFA angefordert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note='Hinweis:\nDie Anforderung einer Vollmacht im begründeten Einzelfall ist auf bilateralem Weg an den LFA zu senden. Hierzu ist die E-Mailadresse aus dem „SG4 NAD+Z12 Ansprechpartner Kündigungsprozess“ des Kommunikationsdatenblattes des LFN zu verwenden. \nDie Antwort des LFN wird an die E-Mailadresse aus dem „SG4 NAD+Z12 Ansprechpartner Kündigungsprozess“ des Kommunikationsdatenblattes des LFA gesendet.')], use_cases=None), EbdTableRow(step_number='16', description='Ist die Vollmacht beim LFA eingetroffen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note='Hinweis:\nSolange die Vollmacht beim LFA nicht eingetroffen ist, wartet der Prozess an diesem Prüfschritt. Diese Prüfung ist regelmäßig erneut durchzuführen, bis die Vollmacht eingetroffen ist.')], use_cases=None), EbdTableRow(step_number='17', description='Hält der LFA die Vollmacht für wirksam?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie vom LFN eingereichte Vollmacht wird als nicht wirksam vom LFA betrachtet. \nHinweis: Der LFA begründet die Ablehnung der fehlenden Wirksamkeit der Vollmacht')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0401]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0401', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0401 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt ein Transaktionsgrund vor, der eine Abmeldung nur in die Zukunft zulässt?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung\nAufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden\nAufhebung einer zukünftigen Zuordnung wegen Stilllegung')], use_cases=None), EbdTableRow(step_number='20', description='Liegt ein Transaktionsgrund vor, welcher mitteilt, dass der Kunde vor Lieferbeginn ausgezogen ist, bzw. die Marktlokation vor Lieferbeginn stillgelegt wurde?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nAufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden\nAufhebung einer zukünftigen Zuordnung wegen Stilllegung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung')], use_cases=None), EbdTableRow(step_number='30', description='Liegt das Abmeldedatum mindestens einen Tag nach dem Eingangsdatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung bei Aufhebung einer zu-künftigen Zuordnung wegen Auszug oder Still-legung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt das Eingangsdatum mindestens 6 WT vor dem Abmeldedatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung bei Transaktionsgründen für eine Abmeldung in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt der Transaktionsgrund \nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung')], use_cases=None), EbdTableRow(step_number='60', description='Liegt der Transaktionsgrund \nEnde der ESV ohne Folgelieferung\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN')], use_cases=None), EbdTableRow(step_number='70', description='Gab es an dieser Marktlokation eine bestätigte Anmeldung zur Ersatz- Grundversorgung mit einem Lieferbeginnzeitpunkt, welcher innerhalb 3 Monaten vom Endezeitpunkt der Belieferung aus dieser Abmeldung begonnen hat?\nHinweis: \nEine Lieferende mit dem Grund „Ende der ESV ohne Folgelieferung“ kann nur in dem Fall vorliegen, wenn diese Marktlokation innerhalb der letzten 3 Monate auch über den Use-Case „Beginn der Ersatz-/Grundversorgung“ vom NB beim LF angemeldet wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDie Marklokation wurde nicht innerhalb der letzten 3 Monate zur Ersatz-/ Grundversorgung angemeldet. Somit kann es sich nicht um eine Beendigung einer ESV handeln.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um eine Marktlokation, deren Mess-lokationen vollständig mit iMS ausgestattet sind oder/und deren Prognosegrundlage auf Basis von Werten erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Liegt das Abmeldedatum mindestens einen Tag nach dem Eingangsdatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEingangsfrist bei iMS/kME mit RLM nicht ein-gehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt das Eingangsdatum der Abmeldung mehr als sechs Wochen nach dem Abmeldedatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFristüberschreitung bei kME ohne RLM/mME/ Pauschalanlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Erfolgt die Aufhebung einer zukünftigen Zuordnung zu dem gleichen Datum (Zeitpunkt), welcher dem Lieferanten im Lieferbeginn bestätigt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDie Aufhebung einer zukünftigen Zuordnung muss zum Datum (Zeitpunkt) angegeben werden, wie im Lieferbeginn bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wurde die Zuordnung des anfragenden Lieferanten zur Marktlokation zum identischen Abmeldedatum bereits durch eine Bestätigung in den folgenden Prozessschritten beendet? Fall:\nSD: Lieferende von LF an NB, Prozessschritt 2 "Antwort auf Abmeldung"\nSD: Lieferende von NB an LF, Prozessschritt 2 "Antwort auf Abmeldung"\nSD: Lieferbeginn, Prozessschritt 4 "Beantwortung der Abmeldeanfrage" oder die Bestätigung erfolgt durch die Fristverstreichung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None), EbdTableRow(step_number='130', description='Ist der anfragende LF am Folgetag des Abmeldungsdatum der Marktlokation noch zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None), EbdTableRow(step_number='140', description='Liegt ein Transaktionsgrund vor, aus welchem hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Liegt in der bereits bestätigten Abmeldung ein Transaktionsgrund vor, aus welchem nicht hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen\naufgehobenem Vertragsverhältnis\nAbmeldung wg. fehl. Zuordnungsermächtigung\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT\nLieferbeginn und Abmeldung aus der Ersatzversorgung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nErneute Bestätigung der Abmeldung aufgrund der Information, dass der Anschlussnutzer nicht mehr an der Marktlokation vorhanden ist.\nHinweis: Das bisher bestätigte Bilanzierungsende bleibt unverändert bestehen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0402]
  EbdTableMetaData(ebd_code='E_0402', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird. Der Netzbetreiber muss prüfen, ob eine Abmeldeanfrage zu senden ist.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0403]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0403', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0403 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht zum Folgetag des in der Abmeldeanfrage genannten Termins ein Vertragsverhältnis für diese Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt dem LFA bereits eine bestätigte Netzabmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDie Belieferung wurde zu dem angefragten Ter-min aus der Abmeldeanfrage bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Zustimmung\nZustimmung der Abmeldeanfrage zum in der bereits versendeten Abmeldung (welche noch nicht beantwortet wurde) genannten Termin.')], use_cases=None), EbdTableRow(step_number='3', description='Liegt in der Abmeldeanfrage der Transaktionsgrund Ein-/ Auszug (Umzug) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Kunde aus der Abmeldeanfrage identisch mit dem Kunden beim LFA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nEs handelt sich nicht um einen Einzug, da der Kun-de aus der Abmeldeanfrage identisch mit dem Kunden beim LFA ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der LFA Informationen darüber, dass sein Kunde nicht ausgezogen ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A33', note='Cluster: Ablehnung\nDer LFA hat die Information, dass der Kunde nicht ausgezogen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A34', note='Cluster: Zustimmung \nDer LFA beendet die Belieferung und teilt sein Lieferendedatum in der Antwort mit.')], use_cases=None), EbdTableRow(step_number='6', description='Liegt in der Abmeldeanfrage der Transaktionsgrund Wechsel vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Bleibt das Vertragsverhältnis des LFA mit dem Kunden an dieser Marktlokation zum Tag nach dem Endedatum aus der Abmeldeanfrage bestehen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A35', note='Cluster: Ablehnung\nEs besteht eine Vertragsbindung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A36', note='Cluster: Zustimmung\nVertragsverhältnis wurde zum angefragten oder davor liegenden Termin beendet.')], use_cases=None), EbdTableRow(step_number='8', description='Befindet sich die Marktlokation zum Folgetag des Endedatums aus der Abmeldeanfrage in der Ersatz-versorgung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A37', note='Cluster: Ablehnung\nDie Marktlokation befindet sich nicht in der Ersatzversorgung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A38', note='Cluster: Zustimmung\nErsatzversorgung wurde zum angefragten Termin beendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0404]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0404', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0404 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde eine Abmeldeanfrage gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der LFA fristgerecht geantwortet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der LFA der Abmeldeanfrage widersprochen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde in der Beantwortung der Abmeldeanfrage der Code A30 „Ablehnung: Die Belieferung wurde zu dem angefragten Termin aus der Abmeldeanfrage bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.“ verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A50', note='Cluster: Ablehnung\nDer LFA hat der Abmeldeanfrage widersprochen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Wurde die NN-Anmeldung des LFN bereits durch den NB beantwortet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Ende\nHinweis: Der vom LFN gestartete Lieferbeginn-prozess (Anmeldung), der beim NB zur Versen-dung der Abmeldeanfrage an den LFA führte, wurde bereits durch einen vom LFA gestarteten Lieferendeprozess, der vor dem Eingang der Antwort der Abmeldeanfrage abgeschlossen wurde, beendet. Das führte dazu, dass der NB die Anmeldung des LFN vor dem Eingang der Antwort der Abmeldeanfrage bestätigt hatte. Somit ist an den LFN keine weitere Antwort auf seine Anmeldung mehr zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A52', note='Cluster: Ablehnung\nZuordnungsermächtigung fehlt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A51', note='Cluster: Zustimmung\nBestätigung der Anmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0405]
  EbdTableMetaData(ebd_code='E_0405', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0003_Bestätigung EOG Anmeldung\nS_0004_Ablehnung EOG Anmeldung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0406]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0406', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0406 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist dem gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist mit dem NB vereinbart, dass der Empfänger der Rechnung der Zahler der Rechnung ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger ist nicht Zahler der Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der NB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum beim LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nObwohl es sich um keine Abschlagsrechnung handelt, ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist die Frist der Fälligkeit eingehalten?\nHinweis: Fälligkeitsdatum muss ≥ 10 WT als das Rechnungsdatum sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC7', note='Cluster: Ablehnung auf Kopfebene\nDie Frist für die Abschlagsrechnung wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das Fälligkeitsdatum > das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC8', note='Cluster: Ablehnung auf Kopfebene\nDie Vorgabe, dass die Zahlung nachschüssig zu leisten ist, wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Erfüllt die Rechnung weitere Anforderungen gem. §14 Abs. 4 UStG nicht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG.\nHinweis: Die Ablehnung ist zu begründen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Handelt es sich bei der Rechnung um eine Sonderrechnung (SOR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='48'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist das Nachrichtendatum der Sonderrechnung ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A79', note='Cluster: Ablehnung auf Kopfebene\nDas Nachrichtendatum der Sonderrechnung ist ≤ 01.01.2023 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Wurde die der Sonderrechnung zugrundeliegende Rechnung bereits mit mindestens einer der in dieser Rechnung genannten Arten der Sonderrechnung korrigiert?\nHinweise: \nEs sind nur die nicht stornierten Sonderrechnungen relevant, die sich auf dieselbe Rechnung beziehen, wie die vorliegende Sonderrechnung.\nDie Arten der Sonderrechnung sind der INVOIC zu entnehmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A80', note='Cluster: Ablehnung auf Kopfebene\nDie Art der vorliegenden Abrechnung wurde bereits in einer vorherigen Sonderrechnung korrigiert.\nHinweis: Es sind alle betroffenen Sonderrechnungen anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='46'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='46', description='Ist die Sonderrechnung aus Sicht des Rechnungsempfängers in Ordnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A95', note='Cluster: Ablehnung auf Kopfebene\nDie Sonderrechnung ist aus Sicht des Rechnungsempfängers nicht in Ordnung.\nHinweis: Die Ablehnung ist zu begründen.')], use_cases=None), EbdTableRow(step_number='48', description='Handelt es sich bei dem Rechnungstyp um eine 13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='54'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='49'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='49', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Abschlussrechnung, Monatsrechnung oder Integrierte 13. Rechnung (13I)) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='52'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='52', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='54', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten integrierte 13. Rechnung (13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='AE1', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Referenziert die Rechnung auf einen erhaltenen Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt zur Rechnung kein Lieferschein vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='58'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='58', description='Referenziert die Rechnung auf einen nicht stornierten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='61'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='61', description='Referenziert die Rechnung auf einen fristgerecht abgelehnten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='64'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='62'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='62', description='Ist die Frist für die Rückmeldung auf den Lieferschein, auf den die Rechnung referenziert, bereits abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE0', note='Cluster: Ablehnung auf Kopfebene\nDer Netzbetreiber hat die Rechnung übermittelt, bevor die Frist für die Rückmeldung auf den Lieferschein abgelaufen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='64', description='Hat der NB der Ablehnung des Lieferscheines widersprochen und konnte er die Ablehnungsgründe des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde erfolgreich abgelehnt und wurde nicht vom NB widersprochen und entkräftet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='67', description='Ist der gesamte Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR, MVR, 13I, 13R) im referenzierten Lieferschein enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung auf Kopfebene\nIm referenzierten Lieferschein ist nicht der gesamte Abrechnungszeitraum der Rechnung enthalten. \nHinweis: Der LF gibt den Zeitraum an, welcher nicht im referenzierten Lieferschein enthalten ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Entspricht der Rechnungstyp (z. B. Abschlagsrechnung oder Monatsrechnung) der zu prüfenden Rechnung für den übermittelten Zeitraum der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/ Arbeitspreis bzw. Arbeits-/Leistungspreis)?\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Grund-/ Arbeitspreis möglich:\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nTurnusrechnung (JVR)\nZwischenabrechnung (ZVR)\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Leistungs-/ Arbeitspreis möglich:\nMVR Monatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung auf Kopfebene\nRechnungstyp passt nicht zu der vereinbarten Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='73'), result_code=None, note='Nutzungshinweis: Der Rechnungstyp (13. Rechnung) 13R kann für Zeiträume ≥ 01.01.2023 00:00 Uhr nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='73', description='Ist das Ende des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='76'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='76', description='Liegt ein elektronisches Preisblatt Netznutzung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt kein Preisblatt Netznutzung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='79'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='79', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR)\nZwischenrechnung (ZVR)\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='82'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung auf Kopfebene\nEs handelt sich um einen nicht zulässigen Rechnungstyp.\nNutzungshinweis: Der Rechnungstyp 13. Rechnung (13R) kann für Zeiträume, deren Beginndatum ≥ 01.01.2023 00:00 Uhr ist, nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='82', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler in den Kopfdaten.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Ab hier beginnt die Prüfung auf Positionsebene.')], use_cases=None), EbdTableRow(step_number='100', description='Ist in der Rechnungsposition das Enddatum des Positionszeitraumes ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note='Hinweis: \nDas vorliegende EBD E_0406_Netznutzungsrechnung prüfen wird für diese Position nicht weiter durchgeführt und es werden keine Codes dieses EBD genutzt. Die Prüfung dieser Rechnungsposition erfolgt für diesen Prüfschritt ausschließlich nach der Prüflogik vor der Nutzung des elektronischen Netznutzungspreisblatts mit den entsprechenden Codes aus der Codeliste S_0103. \nWerden bei der Anwendung der Codeliste S_0103 Fehler festgestellt, so sind sich diese zu merken. Nach Abschluss der Prüfung der Rechnungsposition gegen die Codeliste S_0103 ist mit dem EBD E_0406_Netznutzungsrechnung prüfen mit Prüfschritt 105 weiter fortzufahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden: \n• Turnusrechnung (JVR) \n• Abschlussrechnung (ABR) \n• Zwischenrechnung (ZVR) \n• Monatsrechnung (MVR) \n• Integrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note='Hinweis: Es handelt sich um eine Abschlagsrechnung (ABS).')], use_cases=None), EbdTableRow(step_number='115', description='Ist in der Rechnungsposition der Beginn des Positionszeitraumes < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nDie Aufteilung der Position in < und ≥ 01.01.2023 00:00 Uhr ist nicht erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wird eine Artikelnummer verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A22', note='Cluster: Ablehnung auf Positionsebene\nFür den Positionszeitraum und dem Rechnungstyp ist keine Artikelnummer erlaubt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A23', note='Cluster: Ablehnung auf Positionsebene\nEin Rechenfehler liegt vor.\nHinweis: Der Rechenfehler wird in der Ablehnung mitgeteilt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='135'), result_code='A24', note='Cluster: Ablehnung auf Positionsebene\nDer auf der Position enthaltene Umsatzsteuersatz ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum dieser Position > das Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='145'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='145', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR) \nAbschlussrechnung (ABR) \nZwischenrechnung (ZVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei dem Rechnungstyp um eine Monatsrechnung (MVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Integrierte 13. Rechnung (13I).')], use_cases=None), EbdTableRow(step_number='200', description='Ist die Abschlagshöhe plausibel zur mitgeteilten Jahresverbrauchsprognose (JVP)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='205'), result_code='A26', note='Cluster: Ablehnung auf Positionsebene\nDie Abschlagshöhe ist nicht plausibel.\nHinweis: Der LF teilt die erwartete Abschlagshöhe mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='205', description='Ist das Beginndatum des Positionszeitraums < dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A81', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Ist der Abrechnungszeitraum der Abschlagsrechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Monatsrechnung oder 13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='215'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='215', description='Überlappt der Abrechnungszeitraum der Abschlagsrechnung um mehr als 10 Tage mit einer vorhergehenden Abschlagsrechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code='A82', note='Cluster: Ablehnung auf Positionsebene\nZu große Überlappung von Abschlagszeitraum.\nHinweis: Es ist die Abschlagsrechnung anzugeben, mit dem die Überlappung des Abrechnungszeitraum besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Ist die Artikelnummer für eine Abschlagsrechnung gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDie in dieser Position verwendete Artikelnummer ist nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='225', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Ist das Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code='A83', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='305'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='305', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A84', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='315', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code='A85', note='Cluster: Ablehnung auf Positionsebene\nDas Stammdatum der Position ist aus Sicht des LF falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='322'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='322', description='Handelt es sich um die Artikel-ID 1-02-0-015?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='325'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='325', description='Sind für die Artikel-ID die in den Stammdaten ausgetauschten Zu- und Abschläge fehlerfrei in der Position berücksichtigt?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='326'), result_code='A32', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='326'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='326', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='327'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='327', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='328'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='328', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='AE2', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins der Menge der abgerechneten Position der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='A33', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='335', description='Liegen alle zur Prüfung notwendigen plausiblen Energiemengen vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A34', note='Cluster: Ablehnung auf Positionsebene\nEs fehlt/fehlen die Energiemenge(n) und wurde(n) bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlende Energiemenge reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegen alle zur Prüfung notwendigen Werte vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code='A39', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A35', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='355', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='365'), result_code=None, note='Hinweis: Höchstsätze der Konzessionsabgabenverordnung werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A36', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='365', description='Ergibt sich der Preis zur Artikel-ID aus gesetzlich festgelegten Abgaben und Umlagen?\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A37', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A38', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='399'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='399'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='399', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='415'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A46', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note='Hinweis: Der NB rechnet die Konzessionsabgabe für Sondervertragskunden ab, obwohl für diese Marktlokation die Konzessionsabgabe für Tarifkunde vereinbart wurde. Diese Vorgehensweise ist erlaubt, da eine Änderung der Artikel-ID über eine Stammdatenänderung nicht möglich ist.')], use_cases=None), EbdTableRow(step_number='410', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AC9', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='415', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A43', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A42', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='422'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='422', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='424'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='424', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='425'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='425', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='427'), result_code='A44', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='427', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='491'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='435'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='445'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt.')], use_cases=None), EbdTableRow(step_number='440', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A87', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='445', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A88', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende ist < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Wird mit der Artikel-ID eine physikalische Arbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='455'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='455', description='Ist die Menge der Resultierenden negativ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Bei der hier gebildeten Resultierenden handelt es sich um Rücknahmepositionen und damit um das, was in der Prüfung 460 als korrespondierende Resultierende benötigt wird und darf damit nicht im Rechnungsprüfungsprozess als Resultierende genutzt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='458'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='458', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='460'), result_code=None, note='Hinweis: Zu der Resultierenden muss, um den Prüfschritt 460 durchführen zu können, auch die korrespondierende Resultierende gebildet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note='Hinweis: Umfasst die Resultierende maximal einen Kalendermonat, kann es zur Resultierenden keine korrespondierende Resultierende geben.')], use_cases=None), EbdTableRow(step_number='460', description='Beginnt der Zeitraum der korrespondieren Resultierenden zum selben Zeitpunkt wie der Zeitraum dieser Resultierenden und enthält der Zeitraum der korrespondierenden Resultierenden keinen Zeitraum des Monats, in dem die Resultierende endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A89', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende passt nicht zur korrespondierenden Resultierenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='465'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='465', description='Wird durch die korrespondierende Resultierende alle Positionen der vorangegangenen Rechnungen (MVR) zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA1', note='Cluster: Ablehnung auf Positionsebene\nEs wurden nicht alle Positionen vorangegangener MVR Rechnungen zurückgenommen.\nHinweis: Es sind die Rechnungsnummern der MVR anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='470', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='471'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='471', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='472'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='472', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='473'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='473', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='AE3', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.')], use_cases=None), EbdTableRow(step_number='475', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='A45', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='480', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor? \nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='485'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='485', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='490'), result_code='AA2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert.\nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='490'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='490', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code='AA3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='491', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='492'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='492', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code='AA8', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='495', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A47', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='502'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='502', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='513'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A48', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='513', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='515'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='515', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden?\nHinweis:\nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='525'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A60', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='525', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A50', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt.\nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='528', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code='A51', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='535'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='535', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='555'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='555', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA6', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Handelt es sich bei der in Artikel-ID der zu prüfenden Positionen um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='561'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='561', description='Wird in derselben Rechnung eine Konzessionsabgabe Position mit einer Artikel-ID, die nicht der Artikel-ID für Sondervertragskunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='563'), result_code='AD0', note='Cluster: Ablehnung auf Positionsebene\nIn derselben Rechnung wird die Konzessionsabgabe einmal für Tarifkunden und für Sondervertragskunden berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='563'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='563', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='565'), result_code=None, note='Hinweis: die Artikel-ID umfasst mehr als einen Abrechnungsmonat'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note='Hinweis: die Artikel-ID berücksichtigt maximal einen Kalendermonat')], use_cases=None), EbdTableRow(step_number='565', description='Wurden alle Positionen der Konzessionsabgabe für Tarifkunden aus den vorherigen MVR zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe für Tarifkunden wurde bereits in einer vorangegangenen MVR abgerechnet und wurde nicht zurückgenommen.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='595', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='599'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='599'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='599', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='607'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='607', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Tarifkunden-Konzessionsabgabe oder für die gemeindespezifische Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A77', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD1', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='615', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='A53', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A54', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='622'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='622', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='624'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='624', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='625'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='625', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='627'), result_code='A55', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='627', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='676'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='635'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='645'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='635', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='640'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt')], use_cases=None), EbdTableRow(step_number='640', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AA9', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='645'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='645', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB1', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='650'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='650', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='651'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='651', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='652'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='652', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='653'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='653', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='AE4', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='660', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='A56', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='665', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='670'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='670', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='675'), result_code='AB2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='675'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='675', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code='AB3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='676', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='677'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='677', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code='AC6', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='680', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='685'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='690'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='685', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A58', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='687'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='687', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='690', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='695'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='698'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.')], use_cases=None), EbdTableRow(step_number='695', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A59', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='698', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='700'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='700', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden:\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AC2', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='710', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A61', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='712', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='715', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code='A62', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='725'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='725', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='770'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='730', description='Ist die aus den Leistungs- und Arbeitswerten des Lieferscheins berechnete Benutzungsstundendauer (h/a) für den Zeitraum eines Anschlussnutzers und des Abrechnungszeitraumes ≥ 2.500 Stunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='735'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer ≥ 2.500 h/a in Rechnung stellen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='755'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer< 2.500 h/a in Rechnung stellen.')], use_cases=None), EbdTableRow(step_number='735', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='740'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='740', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB5', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='755', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='760'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='760', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB7', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='765', description='Erfolgt über die mit dieser Artikel-ID Resultierende eine vollständige Rücknahme dessen, was in allen zu dieser 13I gehörenden MVR bereist mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A63', note='Cluster: Ablehnung auf Positionsebene\nEs werden zu wenige bzw. zu viele Positionen aus den vorangegangenen MVR zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='770', description='Handelt es sich um eine Artikel-ID für die Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='775'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='772'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='772', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB8', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='775', description='Gibt es weitere Artikel-ID für eine Konzessionsabgabe, die von dieser Artikel-ID abweicht, mit der sich somit eine weitere Resultierende bilden lässt?\nHinweis: In den Prüfschritten 775 bis 794 wird zur Reduzierung der Anzahl der beschriebenen Prüfungen vom Standard abgewichen, immer nur die zur Prüfung stehende Resultierende zu betrachten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='781'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='780'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='780', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen MVR mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD6', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.')], use_cases=None), EbdTableRow(step_number='781', description='Ist mindestens eine der Resultierenden eine Rücknahmeposition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='782'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='786'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='782', description='Wird mit allen Resultierenden der Rücknahmepositionen alle bereits bezahlten Konzessionsbeträge mit der entsprechenden Artikel-ID vollständig zurückgenommen?\nHinweis: Die Rücknahmeposition (es können auch mehrere sein) kann auch mit einer anderen Resultierenden zur Konzessionsabgabe dieser Rechnung erfolgen als die zur Prüfung stehende Resultierende. Wichtig ist, dass die bereits gezahlten Konzessionsbeträge vollständig zurückgenommen wurden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='784'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='783'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='783', description='Ist die Resultierende der Rücknameposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD5', note='Cluster: Ablehnung auf Positionsebene\nMit den Rücknahmepositionen werden nicht alle bereits bezahlten Konzessionsbeträge vollständig zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='784', description='Wird mit der Resultierenden der Vorwärtsposition für das Kalenderjahr die richtige Konzessionsabgabe abgerechnet?\nHinweis: Die richtige Konzessionsabgabe ergibt sich aus der Prüfung der Leistungswerte und Energiemenge gegen die Kriterien der Sondervertragskunden -Konzessionsabgabe und der Nutzung des gesetzlichen Preisvorgaben bzw. den gemeindespezifischen Konzessionsabgabe des Netzbetreiber.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='785'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='785', description='Ist die Resultierende der Vorwärtsposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD3', note='Cluster: Ablehnung auf Positionsebene\nEs wird die falsche Konzessionsabgabe für das Kalenderjahr abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='786', description='Handelt es sich bei den Resultierenden um die Artikel-ID für Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder um die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='787'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wird falsch abgerechnet.')], use_cases=None), EbdTableRow(step_number='787', description='Wird in derselben Rechnung eine Konzessionsabgaben- Position mit einer Artikel-ID, die nicht der Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten) entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD8', note='Cluster: Ablehnung auf Positionsebene\nKonzessionsabgabe wird doppelt abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='788'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='788', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='789'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='789', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='790'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='790', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AE5', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='793', description='Ist die Energiemenge der Resultierenden plausibel zur Energiemenge des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD4', note='Cluster: Ablehnung auf Positionsebene\nDie Energiemenge der Resultierenden passt nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='794', description='Ist die saldierte Energiemenge der Konzessionsabgabe passend zum Lieferschein?\nHinweis: Die saldierte abgerechnete Energiemenge ergibt sich durch Addition aller Energiemengen (unter Berücksichtigung derer Vorzeichen) aller Resultierenden zur Konzessionsabgabe dieser Rechnung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD9', note='Cluster: Ablehnung auf Positionsebene\nDie saldierte Energiemenge der Resultierenden passen nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='795', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='799'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='799'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='799', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='800', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='805', description='Fehlen noch Artikel-ID für Rechnungspositionen ≥ 01.01.2023 00:00 Uhr, die vorher mit den Stammdaten ausgetauscht und somit in der Rechnung erwartet wurden?\nHinweis: Hat sich die tatsächlich abgerechnete Konzessionsabgabe gegenüber der in den Stammdaten ausgetauschten Konzessionsabgabe geändert, ist die Artikel-ID, welche zuvor in den Stammdaten ausgetauscht wurde, nicht als fehlende Artikel-ID zu übermitteln.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A78', note='Cluster: Ablehnung auf Summenebene\nErwartete Artikel-ID in der Rechnung nicht vorhanden.\nHinweis: Die erwarteten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='815'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='815', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='816'), result_code='A66', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='816'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='816', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='817'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='820'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='817', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='818'), result_code='AC3', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='818'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='818', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern der vorausbezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='AC4', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern der Rechnung entspricht nicht der Summe der Steuern der vorausbezahlten Rechnungen. \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='820', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='825'), result_code='A67', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='825'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='825', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern, die in den tatsächlich gezahlten Beträgen in den referenzierten Rechnungen mit diesem Steuersatz enthalten sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='A68', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern entspricht nicht der Summe der vorausbezahlten Steuern aus den referenzierten Rechnungen.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='835'), result_code='A69', note='Cluster: Ablehnung auf Summenebene\nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='835'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='835', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='900'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='900', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='905'), result_code='A70', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='905'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='905', description='Entspricht der fällige Betrag dieser Rechnung dem Rechnungsbetrag abzgl. der Summe aller vorausbezahlten Beträge, sofern diese vorhanden sind und abzgl. des Gemeinderabatt/Kommunalrabatt, sofern dieser vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='910'), result_code='A71', note='Cluster: Ablehnung auf Summenebene\nFälliger Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='910'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='910', description='Entspricht der Gemeinderabatt/Kommunalrabatt der Summe der Gemeinderabatt-/Kommunalrabattbeträge aus der Positionsebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='920'), result_code='A72', note='Cluster: Ablehnung auf Summenebene\nSumme des Gemeinderabatts ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='920'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='920', description='Handelt es sich bei dem Rechnungstyp um einen der folgenden:\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='921'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Turnusrechnung (JVR), Abschlussrechnung (ABR) oder Zwischenabrechnung (ZVR).')], use_cases=None), EbdTableRow(step_number='921', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='922'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='925'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='922', description='Ist der vorausbezahlte Betrag identisch mit der Summe aller zuvor bezahlten Abschlagsrechnungen, deren Abrechnungszeitraum im Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) liegen?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='AC5', note='Cluster: Ablehnung auf Summenebene\nFür den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) sind nicht alle zuvor bezahlten Abschlagsrechnungen enthalten \nHinweise: Der LF gibt die Rechnungsnummern aller Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='925', description='Sind für den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) alle Referenzen der zugehörigen und zuvor bezahlten Abschlagsrechnungen enthalten?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='A74', note='Cluster: Ablehnung auf Summenebene\nReferenzen auf zuvor bezahlte Abschlagsrechnungen fehlen. \nHinweise: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat und die nicht in dieser Rechnung berücksichtigt wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='927'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='927', description='Entspricht die Angabe des vorausbezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='930'), result_code='A73', note='Cluster: Ablehnung auf Summenebene\nAusgewiesener vorausgezahlter Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='930'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='930', description='Sind alle in der Rechnung (JVR, ZVR, ABR) berücksichtigten Abschlagsrechnungen durch den Empfänger mit einem Zahlungsavis bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='935'), result_code='A76', note='Cluster: Ablehnung auf Summenebene\nMindestens eine Abschlagsrechnung, die in dieser Rechnung berücksichtig wurde, wurde vom LF abgelehnt oder nicht beantwortet. \nAngeforderte, aber nicht beglichene Abschlagsrechnungen sind vom NB zu stornieren.\nHinweis: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die nicht in der vorliegenden Rechnung hätten berücksichtigt werden dürfen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='935'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='935', description='Ist mindestens eine der referenzierten Abschlagsrechnungen bereits in einer anderen Rechnung verrechnet worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code='A75', note='Cluster: Ablehnung auf Summenebene\nMindestens eine referenzierte Abschlagsrechnung ist bereits verrechnet worden. \nHinweis: Der LF gibt in der Ablehnung die Abschlagsrechnung(en), welche bereits verrechnet wurden, sowie die Rechnung(en) (im RFF+AFL), in der der Abschlag/die Abschläge (im FTX+Z14) bereits berücksichtigt wurden, an.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='940', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='990'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiger Fehler in den Summenteil.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='990'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='990', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='805', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Artikel-ID keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='815', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 815 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem NB als Ergebnis übermittelt.\nFolgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen; dies gilt für alle Rechnungstypen, ausgenommen der Sonderrechnung.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0407]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0407', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0407 Dummy Name', remark=None), rows=[EbdTableRow(step_number='0', description='Konnte der NB alle Einwände des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC1', note='Cluster: Ablehnung auf Kopfebene \nDer LF lehnt die Zahlung der Rechnung weiterhin ab, da der NB nicht alle Einwände des LF entkräften konnte.\nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='1'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='1', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist dem gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist mit dem NB vereinbart, dass der Empfänger der Rechnung der Zahler der Rechnung ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger ist nicht Zahler der Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der NB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum beim LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nObwohl es sich um keine Abschlagsrechnung handelt, ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist die Frist der Fälligkeit eingehalten?\nHinweis: Fälligkeitsdatum muss ≥ 10 WT als das Rechnungsdatum sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC7', note='Cluster: Ablehnung auf Kopfebene\nDie Frist für die Abschlagsrechnung wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das Fälligkeitsdatum > das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC8', note='Cluster: Ablehnung auf Kopfebene\nDie Vorgabe, dass die Zahlung nachschüssig zu leisten ist, wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Erfüllt die Rechnung weitere Anforderungen gem. §14 Abs. 4 UStG nicht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG.\nHinweis: Die Ablehnung ist zu begründen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Handelt es sich bei der Rechnung um eine Sonderrechnung (SOR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='48'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist das Nachrichtendatum der Sonderrechnung ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A79', note='Cluster: Ablehnung auf Kopfebene\nDas Nachrichtendatum der Sonderrechnung ist ≤ 01.01.2023 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Wurde die der Sonderrechnung zugrundeliegende Rechnung bereits mit mindestens einer der in dieser Rechnung genannten Arten der Sonderrechnung korrigiert?\nHinweise: \nEs sind nur die nicht stornierten Sonderrechnungen relevant, die sich auf dieselbe Rechnung beziehen, wie die vorliegende Sonderrechnung.\nDie Arten der Sonderrechnung sind der INVOIC zu entnehmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A80', note='Cluster: Ablehnung auf Kopfebene\nDie Art der vorliegenden Abrechnung wurde bereits in einer vorherigen Sonderrechnung korrigiert.\nHinweis: Es sind alle betroffenen Sonderrechnungen anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='46'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='46', description='Ist die Sonderrechnung aus Sicht des Rechnungsempfängers in Ordnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A95', note='Cluster: Ablehnung auf Kopfebene\nDie Sonderrechnung ist aus Sicht des Rechnungsempfängers nicht in Ordnung.\nHinweis: Die Ablehnung ist zu begründen.')], use_cases=None), EbdTableRow(step_number='48', description='Handelt es sich bei dem Rechnungstyp um eine 13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='54'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='49'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='49', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Abschlussrechnung, Monatsrechnung oder Integrierte 13. Rechnung (13I)) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='52'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='52', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='54', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten integrierte 13. Rechnung (13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='AE1', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Referenziert die Rechnung auf einen erhaltenen Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt zur Rechnung kein Lieferschein vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='58'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='58', description='Referenziert die Rechnung auf einen nicht stornierten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='61'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='61', description='Referenziert die Rechnung auf einen fristgerecht abgelehnten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='64'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='62'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='62', description='Ist die Frist für die Rückmeldung auf den Lieferschein, auf den die Rechnung referenziert, bereits abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE0', note='Cluster: Ablehnung auf Kopfebene\nDer Netzbetreiber hat die Rechnung übermittelt, bevor die Frist für die Rückmeldung auf den Lieferschein abgelaufen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='64', description='Hat der NB der Ablehnung des Lieferscheines widersprochen und konnte er die Ablehnungsgründe des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde erfolgreich abgelehnt und wurde nicht vom NB widersprochen und entkräftet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='67', description='Ist der gesamte Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR, MVR, 13I, 13R) im referenzierten Lieferschein enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung auf Kopfebene\nIm referenzierten Lieferschein ist nicht der gesamte Abrechnungszeitraum der Rechnung enthalten. \nHinweis: Der LF gibt den Zeitraum an, welcher nicht im referenzierten Lieferschein enthalten ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Entspricht der Rechnungstyp (z. B. Abschlagsrechnung oder Monatsrechnung) der zu prüfenden Rechnung für den übermittelten Zeitraum der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/ Arbeitspreis bzw. Arbeits-/Leistungspreis)?\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Grund-/ Arbeitspreis möglich:\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nTurnusrechnung (JVR)\nZwischenabrechnung (ZVR)\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Leistungs-/ Arbeitspreis möglich:\nMVR Monatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung auf Kopfebene\nRechnungstyp passt nicht zu der vereinbarten Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='73'), result_code=None, note='Nutzungshinweis: Der Rechnungstyp (13. Rechnung) 13R kann für Zeiträume ≥ 01.01.2023 00:00 Uhr nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='73', description='Ist das Ende des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='76'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='76', description='Liegt ein elektronisches Preisblatt Netznutzung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt kein Preisblatt Netznutzung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='79'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='79', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR)\nZwischenrechnung (ZVR)\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='82'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung auf Kopfebene\nEs handelt sich um einen nicht zulässigen Rechnungstyp.\nNutzungshinweis: Der Rechnungstyp 13. Rechnung (13R) kann für Zeiträume, deren Beginndatum ≥ 01.01.2023 00:00 Uhr ist, nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='82', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler in den Kopfdaten.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Ab hier beginnt die Prüfung auf Positionsebene.')], use_cases=None), EbdTableRow(step_number='100', description='Ist in der Rechnungsposition das Enddatum des Positionszeitraumes ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note='Hinweis: \nDas vorliegende EBD E_0407_Netznutzungsrechnung prüfen wird für diese Position nicht weiter durchgeführt und es werden keine Codes dieses EBD genutzt. Die Prüfung dieser Rechnungsposition erfolgt für diesen Prüfschritt ausschließlich nach der Prüflogik vor der Nutzung des elektronischen Netznutzungspreisblatts mit den entsprechenden Codes aus der Codeliste S_0104. \nWerden bei der Anwendung der Codeliste S_0104 Fehler festgestellt, so sind sich diese zu merken. Nach Abschluss der Prüfung der Rechnungsposition gegen die Codeliste S_0104 ist mit dem EBD E_0407_Netznutzungsrechnung prüfen mit Prüfschritt 105 weiter fortzufahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden: \n• Turnusrechnung (JVR) \n• Abschlussrechnung (ABR) \n• Zwischenrechnung (ZVR) \n• Monatsrechnung (MVR) \n• Integrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note='Hinweis: Es handelt sich um eine Abschlagsrechnung (ABS).')], use_cases=None), EbdTableRow(step_number='115', description='Ist in der Rechnungsposition der Beginn des Positionszeitraumes < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nDie Aufteilung der Position in < und ≥ 01.01.2023 00:00 Uhr ist nicht erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wird eine Artikelnummer verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A22', note='Cluster: Ablehnung auf Positionsebene\nFür den Positionszeitraum und dem Rechnungstyp ist keine Artikelnummer erlaubt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A23', note='Cluster: Ablehnung auf Positionsebene\nEin Rechenfehler liegt vor.\nHinweis: Der Rechenfehler wird in der Ablehnung mitgeteilt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='135'), result_code='A24', note='Cluster: Ablehnung auf Positionsebene\nDer auf der Position enthaltene Umsatzsteuersatz ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum dieser Position > das Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='145'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='145', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR) \nAbschlussrechnung (ABR) \nZwischenrechnung (ZVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei dem Rechnungstyp um eine Monatsrechnung (MVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Integrierte 13. Rechnung (13I).')], use_cases=None), EbdTableRow(step_number='200', description='Ist die Abschlagshöhe plausibel zur mitgeteilten Jahresverbrauchsprognose (JVP)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='205'), result_code='A26', note='Cluster: Ablehnung auf Positionsebene\nDie Abschlagshöhe ist nicht plausibel.\nHinweis: Der LF teilt die erwartete Abschlagshöhe mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='205', description='Ist das Beginndatum des Positionszeitraums < dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A81', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Ist der Abrechnungszeitraum der Abschlagsrechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Monatsrechnung oder 13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='215'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='215', description='Überlappt der Abrechnungszeitraum der Abschlagsrechnung um mehr als 10 Tage mit einer vorhergehenden Abschlagsrechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code='A82', note='Cluster: Ablehnung auf Positionsebene\nZu große Überlappung von Abschlagszeitraum.\nHinweis: Es ist die Abschlagsrechnung anzugeben, mit dem die Überlappung des Abrechnungszeitraum besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Ist die Artikelnummer für eine Abschlagsrechnung gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDie in dieser Position verwendete Artikelnummer ist nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='225', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Ist das Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code='A83', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='305'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='305', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A84', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='315', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code='A85', note='Cluster: Ablehnung auf Positionsebene\nDas Stammdatum der Position ist aus Sicht des LF falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='322'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='322', description='Handelt es sich um die Artikel-ID 1-02-0-015?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='325'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='325', description='Sind für die Artikel-ID die in den Stammdaten ausgetauschten Zu- und Abschläge fehlerfrei in der Position berücksichtigt?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='326'), result_code='A32', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='326'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='326', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='327'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='327', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='328'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='328', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='AE2', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins der Menge der abgerechneten Position der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='A33', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='335', description='Liegen alle zur Prüfung notwendigen plausiblen Energiemengen vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A34', note='Cluster: Ablehnung auf Positionsebene\nEs fehlt/fehlen die Energiemenge(n) und wurde(n) bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlende Energiemenge reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegen alle zur Prüfung notwendigen Werte vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code='A39', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A35', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='355', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='365'), result_code=None, note='Hinweis: Höchstsätze der Konzessionsabgabenverordnung werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A36', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='365', description='Ergibt sich der Preis zur Artikel-ID aus gesetzlich festgelegten Abgaben und Umlagen?\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A37', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A38', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='399'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='399'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='399', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='415'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A46', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note='Hinweis: Der NB rechnet die Konzessionsabgabe für Sondervertragskunden ab, obwohl für diese Marktlokation die Konzessionsabgabe für Tarifkunde vereinbart wurde. Diese Vorgehensweise ist erlaubt, da eine Änderung der Artikel-ID über eine Stammdatenänderung nicht möglich ist.')], use_cases=None), EbdTableRow(step_number='410', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AC9', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='415', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A43', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A42', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='422'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='422', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='424'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='424', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='425'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='425', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='427'), result_code='A44', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='427', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='491'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='435'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='445'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt.')], use_cases=None), EbdTableRow(step_number='440', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A87', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='445', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A88', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende ist < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Wird mit der Artikel-ID eine physikalische Arbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='455'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='455', description='Ist die Menge der Resultierenden negativ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Bei der hier gebildeten Resultierenden handelt es sich um Rücknahmepositionen und damit um das, was in der Prüfung 460 als korrespondierende Resultierende benötigt wird und darf damit nicht im Rechnungsprüfungsprozess als Resultierende genutzt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='458'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='458', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='460'), result_code=None, note='Hinweis: Zu der Resultierenden muss, um den Prüfschritt 460 durchführen zu können, auch die korrespondierende Resultierende gebildet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note='Hinweis: Umfasst die Resultierende maximal einen Kalendermonat, kann es zur Resultierenden keine korrespondierende Resultierende geben.')], use_cases=None), EbdTableRow(step_number='460', description='Beginnt der Zeitraum der korrespondieren Resultierenden zum selben Zeitpunkt wie der Zeitraum dieser Resultierenden und enthält der Zeitraum der korrespondierenden Resultierenden keinen Zeitraum des Monats, in dem die Resultierende endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A89', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende passt nicht zur korrespondierenden Resultierenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='465'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='465', description='Wird durch die korrespondierende Resultierende alle Positionen der vorangegangenen Rechnungen (MVR) zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA1', note='Cluster: Ablehnung auf Positionsebene\nEs wurden nicht alle Positionen vorangegangener MVR Rechnungen zurückgenommen.\nHinweis: Es sind die Rechnungsnummern der MVR anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='470', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='471'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='471', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='472'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='472', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='473'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='473', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='AE3', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.')], use_cases=None), EbdTableRow(step_number='475', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='A45', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='480', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor? \nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='485'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='485', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='490'), result_code='AA2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert.\nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='490'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='490', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code='AA3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='491', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='492'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='492', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code='AA8', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='495', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A47', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='502'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='502', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='513'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A48', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='513', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='515'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='515', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden?\nHinweis:\nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='525'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A60', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='525', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A50', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt.\nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='528', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code='A51', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='535'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='535', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='555'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='555', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA6', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Handelt es sich bei der in Artikel-ID der zu prüfenden Positionen um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='561'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='561', description='Wird in derselben Rechnung eine Konzessionsabgabe Position mit einer Artikel-ID, die nicht der Artikel-ID für Sondervertragskunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='563'), result_code='AD0', note='Cluster: Ablehnung auf Positionsebene\nIn derselben Rechnung wird die Konzessionsabgabe einmal für Tarifkunden und für Sondervertragskunden berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='563'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='563', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='565'), result_code=None, note='Hinweis: die Artikel-ID umfasst mehr als einen Abrechnungsmonat'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note='Hinweis: die Artikel-ID berücksichtigt maximal einen Kalendermonat')], use_cases=None), EbdTableRow(step_number='565', description='Wurden alle Positionen der Konzessionsabgabe für Tarifkunden aus den vorherigen MVR zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe für Tarifkunden wurde bereits in einer vorangegangenen MVR abgerechnet und wurde nicht zurückgenommen.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='595', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='599'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='599'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='599', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='607'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='607', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Tarifkunden-Konzessionsabgabe oder für die gemeindespezifische Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A77', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD1', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='615', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='A53', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A54', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='622'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='622', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='624'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='624', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='625'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='625', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='627'), result_code='A55', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='627', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='676'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='635'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='645'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='635', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='640'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt')], use_cases=None), EbdTableRow(step_number='640', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AA9', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='645'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='645', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB1', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='650'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='650', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='651'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='651', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='652'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='652', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='653'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='653', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='AE4', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='660', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='A56', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='665', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='670'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='670', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='675'), result_code='AB2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='675'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='675', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code='AB3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='676', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='677'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='677', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code='AC6', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='680', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='685'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='690'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='685', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A58', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='687'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='687', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='690', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='695'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='698'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.')], use_cases=None), EbdTableRow(step_number='695', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A59', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='698', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='700'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='700', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden:\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AC2', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='710', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A61', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='712', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='715', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code='A62', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='725'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='725', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='770'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='730', description='Ist die aus den Leistungs- und Arbeitswerten des Lieferscheins berechnete Benutzungsstundendauer (h/a) für den Zeitraum eines Anschlussnutzers und des Abrechnungszeitraumes ≥ 2.500 Stunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='735'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer ≥ 2.500 h/a in Rechnung stellen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='755'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer< 2.500 h/a in Rechnung stellen.')], use_cases=None), EbdTableRow(step_number='735', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='740'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='740', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB5', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='755', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='760'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='760', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB7', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='765', description='Erfolgt über die mit dieser Artikel-ID Resultierende eine vollständige Rücknahme dessen, was in allen zu dieser 13I gehörenden MVR bereist mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A63', note='Cluster: Ablehnung auf Positionsebene\nEs werden zu wenige bzw. zu viele Positionen aus den vorangegangenen MVR zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='770', description='Handelt es sich um eine Artikel-ID für die Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='775'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='772'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='772', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB8', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='775', description='Gibt es weitere Artikel-ID für eine Konzessionsabgabe, die von dieser Artikel-ID abweicht, mit der sich somit eine weitere Resultierende bilden lässt?\nHinweis: In den Prüfschritten 775 bis 794 wird zur Reduzierung der Anzahl der beschriebenen Prüfungen vom Standard abgewichen, immer nur die zur Prüfung stehende Resultierende zu betrachten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='781'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='780'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='780', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen MVR mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD6', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.')], use_cases=None), EbdTableRow(step_number='781', description='Ist mindestens eine der Resultierenden eine Rücknahmeposition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='782'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='786'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='782', description='Wird mit allen Resultierenden der Rücknahmepositionen alle bereits bezahlten Konzessionsbeträge mit der entsprechenden Artikel-ID vollständig zurückgenommen?\nHinweis: Die Rücknahmeposition (es können auch mehrere sein) kann auch mit einer anderen Resultierenden zur Konzessionsabgabe dieser Rechnung erfolgen als die zur Prüfung stehende Resultierende. Wichtig ist, dass die bereits gezahlten Konzessionsbeträge vollständig zurückgenommen wurden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='784'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='783'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='783', description='Ist die Resultierende der Rücknameposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD5', note='Cluster: Ablehnung auf Positionsebene\nMit den Rücknahmepositionen werden nicht alle bereits bezahlten Konzessionsbeträge vollständig zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='784', description='Wird mit der Resultierenden der Vorwärtsposition für das Kalenderjahr die richtige Konzessionsabgabe abgerechnet?\nHinweis: Die richtige Konzessionsabgabe ergibt sich aus der Prüfung der Leistungswerte und Energiemenge gegen die Kriterien der Sondervertragskunden -Konzessionsabgabe und der Nutzung des gesetzlichen Preisvorgaben bzw. den gemeindespezifischen Konzessionsabgabe des Netzbetreiber.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='785'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='785', description='Ist die Resultierende der Vorwärtsposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD3', note='Cluster: Ablehnung auf Positionsebene\nEs wird die falsche Konzessionsabgabe für das Kalenderjahr abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='786', description='Handelt es sich bei den Resultierenden um die Artikel-ID für Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder um die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='787'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wird falsch abgerechnet.')], use_cases=None), EbdTableRow(step_number='787', description='Wird in derselben Rechnung eine Konzessionsabgaben- Position mit einer Artikel-ID, die nicht der Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten) entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD8', note='Cluster: Ablehnung auf Positionsebene\nKonzessionsabgabe wird doppelt abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='788'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='788', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='789'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='789', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='790'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='790', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AE5', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='793', description='Ist die Energiemenge der Resultierenden plausibel zur Energiemenge des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD4', note='Cluster: Ablehnung auf Positionsebene\nDie Energiemenge der Resultierenden passt nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='794', description='Ist die saldierte Energiemenge der Konzessionsabgabe passend zum Lieferschein?\nHinweis: Die saldierte abgerechnete Energiemenge ergibt sich durch Addition aller Energiemengen (unter Berücksichtigung derer Vorzeichen) aller Resultierenden zur Konzessionsabgabe dieser Rechnung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD9', note='Cluster: Ablehnung auf Positionsebene\nDie saldierte Energiemenge der Resultierenden passen nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='795', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='799'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='799'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='799', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='800', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='805', description='Fehlen noch Artikel-ID für Rechnungspositionen ≥ 01.01.2023 00:00 Uhr, die vorher mit den Stammdaten ausgetauscht und somit in der Rechnung erwartet wurden?\nHinweis: Hat sich die tatsächlich abgerechnete Konzessionsabgabe gegenüber der in den Stammdaten ausgetauschten Konzessionsabgabe geändert, ist die Artikel-ID, welche zuvor in den Stammdaten ausgetauscht wurde, nicht als fehlende Artikel-ID zu übermitteln.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A78', note='Cluster: Ablehnung auf Summenebene\nErwartete Artikel-ID in der Rechnung nicht vorhanden.\nHinweis: Die erwarteten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='815'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='815', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='816'), result_code='A66', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='816'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='816', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='817'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='820'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='817', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='818'), result_code='AC3', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='818'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='818', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern der vorausbezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='AC4', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern der Rechnung entspricht nicht der Summe der Steuern der vorausbezahlten Rechnungen. \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='820', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='825'), result_code='A67', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='825'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='825', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern, die in den tatsächlich gezahlten Beträgen in den referenzierten Rechnungen mit diesem Steuersatz enthalten sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='A68', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern entspricht nicht der Summe der vorausbezahlten Steuern aus den referenzierten Rechnungen.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='835'), result_code='A69', note='Cluster: Ablehnung auf Summenebene\nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='835'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='835', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='900'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='900', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='905'), result_code='A70', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='905'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='905', description='Entspricht der fällige Betrag dieser Rechnung dem Rechnungsbetrag abzgl. der Summe aller vorausbezahlten Beträge, sofern diese vorhanden sind und abzgl. des Gemeinderabatt/Kommunalrabatt, sofern dieser vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='910'), result_code='A71', note='Cluster: Ablehnung auf Summenebene\nFälliger Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='910'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='910', description='Entspricht der Gemeinderabatt/Kommunalrabatt der Summe der Gemeinderabatt-/Kommunalrabattbeträge aus der Positionsebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='920'), result_code='A72', note='Cluster: Ablehnung auf Summenebene\nSumme des Gemeinderabatts ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='920'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='920', description='Handelt es sich bei dem Rechnungstyp um einen der folgenden:\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='921'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Turnusrechnung (JVR), Abschlussrechnung (ABR) oder Zwischenabrechnung (ZVR).')], use_cases=None), EbdTableRow(step_number='921', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='922'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='925'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='922', description='Ist der vorausbezahlte Betrag identisch mit der Summe aller zuvor bezahlten Abschlagsrechnungen, deren Abrechnungszeitraum im Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) liegen?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='AC5', note='Cluster: Ablehnung auf Summenebene\nFür den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) sind nicht alle zuvor bezahlten Abschlagsrechnungen enthalten \nHinweise: Der LF gibt die Rechnungsnummern aller Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='925', description='Sind für den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) alle Referenzen der zugehörigen und zuvor bezahlten Abschlagsrechnungen enthalten?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='A74', note='Cluster: Ablehnung auf Summenebene\nReferenzen auf zuvor bezahlte Abschlagsrechnungen fehlen. \nHinweise: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat und die nicht in dieser Rechnung berücksichtigt wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='927'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='927', description='Entspricht die Angabe des vorausbezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='930'), result_code='A73', note='Cluster: Ablehnung auf Summenebene\nAusgewiesener vorausgezahlter Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='930'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='930', description='Sind alle in der Rechnung (JVR, ZVR, ABR) berücksichtigten Abschlagsrechnungen durch den Empfänger mit einem Zahlungsavis bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='935'), result_code='A76', note='Cluster: Ablehnung auf Summenebene\nMindestens eine Abschlagsrechnung, die in dieser Rechnung berücksichtig wurde, wurde vom LF abgelehnt oder nicht beantwortet. \nAngeforderte, aber nicht beglichene Abschlagsrechnungen sind vom NB zu stornieren.\nHinweis: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die nicht in der vorliegenden Rechnung hätten berücksichtigt werden dürfen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='935'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='935', description='Ist mindestens eine der referenzierten Abschlagsrechnungen bereits in einer anderen Rechnung verrechnet worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code='A75', note='Cluster: Ablehnung auf Summenebene\nMindestens eine referenzierte Abschlagsrechnung ist bereits verrechnet worden. \nHinweis: Der LF gibt in der Ablehnung die Abschlagsrechnung(en), welche bereits verrechnet wurden, sowie die Rechnung(en) (im RFF+AFL), in der der Abschlag/die Abschläge (im FTX+Z14) bereits berücksichtigt wurden, an.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='940', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='990'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiger Fehler in den Summenteil.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='990'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='990', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='805', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Artikel-ID keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='815', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 815 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem NB als Ergebnis übermittelt.\nFolgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen; dies gilt für alle Rechnungstypen, ausgenommen der Sonderrechnung.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0408]
  EbdTableMetaData(ebd_code='E_0408', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0005_Antwort auf Änderung vom NB\nS_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB\nS_0013_Antwort auf Änderung der Marktlokationsstruktur')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0409]
  EbdTableMetaData(ebd_code='E_0409', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0006_Antwort auf Änderung vom NB\nS_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB\nS_0014_Antwort auf Änderung der Lokationsbündelstruktur')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0410]
  EbdTableMetaData(ebd_code='E_0410', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0015_Antwort auf Änderung vom LF\nS_0017_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0411]
  EbdTableMetaData(ebd_code='E_0411', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0016_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0412]
  EbdTableMetaData(ebd_code='E_0412', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0413]
  EbdTableMetaData(ebd_code='E_0413', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0029_Antwort auf Anfrage\nS_0030_Ablehnung Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0414]
  EbdTableMetaData(ebd_code='E_0414', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0415]
  EbdTableMetaData(ebd_code='E_0415', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0018_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0416]
  EbdTableMetaData(ebd_code='E_0416', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0418]
  EbdTableMetaData(ebd_code='E_0418', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0021_Antwort auf Anfrage\nS_0023_Antwort auf Anfrage\nS_0024_Ablehnung der Anfrage\nS_0025_Antwort auf Anfrage\nS_0101_Antwort auf Anfrage der Marktlokationsstruktur\nS_0027_Ablehnung der Anfrage der Marktlokationsstruktur')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0419]
  EbdTableMetaData(ebd_code='E_0419', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0006_Antwort auf Änderung vom NB\nS_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0420]
  EbdTableMetaData(ebd_code='E_0420', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0005_Antwort auf Änderung vom NB\nS_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0421]
  EbdTableMetaData(ebd_code='E_0421', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0022_Antwort auf Anfrage\nS_0026_Antwort auf Anfrage\nS_0028_Antwort auf Anfrage der Lokationsbündelstruktur')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0422]
  EbdTableMetaData(ebd_code='E_0422', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0005_Antwort auf Änderung vom NB\nS_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0423]
  EbdTableMetaData(ebd_code='E_0423', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0006_Antwort auf Änderung vom NB\nS_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0424]
  EbdTableMetaData(ebd_code='E_0424', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0031_Antwort auf Anfrage\nS_0032_Antwort auf Anfrage\nS_0033_Ablehnung der Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0425]
  EbdTableMetaData(ebd_code='E_0425', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0016_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0426]
  EbdTableMetaData(ebd_code='E_0426', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0031_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0427]
  EbdTableMetaData(ebd_code='E_0427', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0034_Antwort auf Anfrage\nS_0035_Ablehnung Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0428]
  EbdTableMetaData(ebd_code='E_0428', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0016_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0429]
  EbdTableMetaData(ebd_code='E_0429', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0038_Antwort auf Anfrage\nS_0094_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0430]
  EbdTableMetaData(ebd_code='E_0430', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0036_Antwort auf Anfrage\nS_0037_Ablehnung der Anfrage\nS_0098_Ablehnung der Anfrage\nS_0099_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0431]
  EbdTableMetaData(ebd_code='E_0431', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0039_Antwort auf Änderung\nS_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0432]
  EbdTableMetaData(ebd_code='E_0432', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0040_Antwort auf Änderung\nS_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0434]
  EbdTableMetaData(ebd_code='E_0434', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0039_Antwort auf Änderung\nS_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0435]
  EbdTableMetaData(ebd_code='E_0435', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0040_Antwort auf Änderung\nS_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0436]
  EbdTableMetaData(ebd_code='E_0436', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0038_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0438]
  EbdTableMetaData(ebd_code='E_0438', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0441]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0441', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0441 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der LF im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der LF für den angefragten Zeitraum z. B. aufgrund einer Vollmacht berechtigt die angefragten Stammdaten zu erhalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0442]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0442', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0442 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der LF im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Falscher Prozess\nHinweis: WiM Geschäftsprozess „Reklamation von Werten beim MSB“ ist zu verwenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der LF für den angefragten Zeitraum berechtigt die angefragten Werte in der angefragten Granularität zu erhalten?\nAuflistung, siehe WiM Strom, Kapitel „Zu übermittelnde Werte“ in der jeweils gültigen Fassung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Mussten die angefragten Werte in Art und Umfang in der Vergangenheit erfasst werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es wurden Werte angefragt, die es auf der ge-nannten Marktlokation, Messlokation oder Tranche nicht geben kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurden die angefragten Werte auf der genannten Marktlokation, Messlokation oder Tranche erfasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die angefragten Werte sind nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Werte versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0443]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0443', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0443 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um einen MSB aus der Sparte Gas?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist der MSB im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der MSB für den angefragten Zeitraum z.\xa0B. aufgrund einer Vollmacht berechtigt die angefragten Stammdaten zu erhalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden')], use_cases=None), EbdTableRow(step_number='40', description='Ist an der genannten Messlokation ein iMS verbaut?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kein iMS verbaut')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0444]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0444', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0444 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der NB im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Falscher Prozess\nHinweis: WiM Geschäftsprozess „Reklamation von Werten beim MSB“ ist zu verwenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der NB für den angefragten Zeitraum berechtigt die angefragten Werte zu erhalten?\nAuflistung, siehe WiM Strom, Kapitel „Zu übermittelnde Werte“ in der jeweils gültigen Fassung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Mussten die angefragten Werte in Art und Umfang in der Vergangenheit erfasst werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es wurden Werte angefragt, die es auf der genannten Marktlokation, Messlokation oder Tranche nicht geben kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurden die angefragten Werte auf der genannten Marktlokation, Messlokation oder Tranche erfasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die angefragten Werte sind nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Werte versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0445]
  EbdTableMetaData(ebd_code='E_0445', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0043_ORDRSP_Ablehnung der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0446]
  EbdTableMetaData(ebd_code='E_0446', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0038_Antwort auf Anfrage\nS_0102_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0447]
  EbdTableMetaData(ebd_code='E_0447', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0041_Antwort auf Anfrage\nS_0100_Ablehnung der Anfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0448]
  EbdTableMetaData(ebd_code='E_0448', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0039_Antwort auf Änderung\nS_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0449]
  EbdTableMetaData(ebd_code='E_0449', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0040_Antwort auf Änderung\nS_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0450]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0450', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0450 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des NB festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A97', note='Die Stammdaten des NB genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des NB anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wechselt für die Marktlokation die Aggregationsverantwortung vom ÜNB zum NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB zur Datenaggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Die Marktlokation bzw. Tranche ist zum genannten Zeitpunkt nicht dem ÜNB zur Aggregation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt eine Stilllegung der Marktlokation vor bzw. ist die Marktlokation nicht mehr bilanzierungsrelevant bzw. wurde die Marktlokation über das Netz des NB in ein anderes Übertragungsnetz eingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note='Hinweis: Es liegt eine Änderung des Bilanzierungsverfahrens von Viertelstundenwerte auf Profile vor und die Aggregationsverantwortung liegt beim NB.')], use_cases=None), EbdTableRow(step_number='5', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Die Marktlokation bzw. Tranche ist zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt das im Vorgang unter "Verwendung der Daten bis" genannte Datum zum Zeitpunkt des Empfangs des Vorgangs beim ÜNB vor dem Beginn des Vormonats, in dem der Vorgang beim ÜNB eingeht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Das Datum „Verwendung der Daten bis“ des Vor-gangs liegt vor dem Beginn des Vormonats, in dem der Vorgang beim ÜNB eingeht.\nHinweis: Das Datum „Verwendung der Daten bis“ wird beim ÜNB auf den Beginn des Vormonats, in dem der Vorgang beim ÜNB eingeht, gesetzt und vom ÜNB entsprechend verarbeitet. Das vom ÜNB verarbeitete Datum ist in der Antwort im DTM-Segment „Verwendung der Daten bis“ anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem NB zur Datenaggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die Marktlokation bzw. Tranche ist zum genannten Zeitpunkt nicht dem NB zur Aggregation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Liegt die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB mit dem Bilanzierungsverfahren Bilanzierung auf Basis von Viertelstundenwerten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Marktlokation bzw. Tranche liegt zum genannten Zeitpunkt dem ÜNB nicht mit dem Bilanzierungsverfahren Bilanzierung auf Basis von Viertelstundenwerten vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt das im Vorgang unter "Verwendung der Daten bis" genannte Datum zum Zeitpunkt des Empfangs des Vorgangs beim ÜNB vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Das Datum „Verwendung der Daten bis“ des Vorgangs liegt vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht.\nHinweis: Das Datum „Verwendung der Daten bis“ wird beim ÜNB auf den Beginn des Monats, in dem der Vorgang beim ÜNB eingeht, gesetzt und vom ÜNB entsprechend verarbeitet. Das vom ÜNB verarbeitete Datum ist in der Antwort im DTM-Segment „Verwendung der Daten bis“ anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist das im Vorgang unter "Verwendung der Daten bis" genannte Datum ein anderes Datum, als der Erste eines Monats?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Das Datum "Verwendung der Daten bis" ist nicht der Erste eines Monats.\nHinweis: Eine Korrektur des Datums "Verwendung der Daten bis" auf den Ersten eines Monats ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem im Vorgang angegebenen Netzbetreiber zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Angegebener Netzbetreiber ist zum angegebenen Zeitpunkt der Marktlokation bzw. Tranche nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der im Vorgang genannte LF identisch mit dem Absender der Nachricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='LF im Vorgang weicht vom Absender ab.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Stammdaten wurden widerspruchsfrei übernommen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0452]
  EbdTableMetaData(ebd_code='E_0452', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0109_Nichtzahlungsavis prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0453]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0453', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0453 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des NB festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A97', note='Die Stammdaten des NB genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des NB anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.\nEine Durchführung der nachfolgend in diesem EBD genannten Prüfungen erfolgt nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist als Aggregationsverantwortlicher der ÜNB im Vorgang angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die im Vorgang enthaltene Marktlokations-ID zum genannten Zeitpunkt dem ÜNB bereits zur Aggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code='A19', note='Die Marktlokation bzw. Tranche ist für den genannten Zeitpunkt nicht dem ÜNB zur Aggregation gemeldet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des LF festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code='A98', note='Die Stammdaten des LF genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des LF anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Wurde die angegebene Verarbeitungsnummer im Vorgang bereits für einen verarbeiteten Vorgang zu dieser Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code='A20', note='Verarbeitungsnummer bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A01', note='Regelzone falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der angegebene Netzbetreiber der Marktlokation in der Regelzone bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code='A02', note='Netzbetreiber nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist das Bilanzierungsgebiet zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code='A03', note='Bilanzierungsgebiet nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der angegebene Netzbetreiber dem Bilanzierungsgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code='A14', note='Angegebener NB entspricht nicht dem zugeordneten NB des Bilanzierungsgebiets.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Wird die Marktlokation auf Grundlage von Werten bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der Messstellenbetreiber zum angegebenen Zeitpunkt in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A15', note='Messstellenbetreiber nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der im Vorgang genannte LF identisch mit dem Absender der Nachricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code='A04', note='LF im Vorgang weicht vom Absender ab.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der Bilanzkreis zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code='A05', note='Bilanzkreis nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Passt die Prognosegrundlage zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code='A16', note='Prognosegrundlage passt nicht zum ZRT.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code='A06', note='OBIS nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Passt die Lieferrichtung zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='17'), result_code='A07', note='Lieferrichtung nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Passt der angegebene Aggregationsverantwortliche in dem Vorgang zur Aggregationsverantwortung der Marktlokation im System des ÜNB, sofern die Marktlokation beim ÜNB schon bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code='A17', note='Aggregationsverantwortlicher im Vorgang passt nicht zur Aggregationsverantwortung der Marktlokation im System des ÜNB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Ist die Aggregationsverantwortung im Vorgang dem NB zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code='A18', note='Falscher Aggregationsverantwortlicher.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist die Aggregationsverantwortung im Vorgang dem ÜNB zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht der Zeitreihentyp (ZRT) den gültigen ZRT zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code='A08', note='ZRT nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Entspricht das Bilanzierungsverfahren dem gültigen Bilanzierungsverfahren zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='23'), result_code='A09', note='Bilanzierungsverfahren nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt für das Bilanzierungsgebiet Bestandteil der Profildefinitionsliste des Netzbetreibers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code='A10', note='Normiertes Profil liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt ein Profil aus der Gruppe SLP mit synthetischen Verfahren?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code='A11', note='Normiertes Profil - nicht SLP mit synthetischem Verfahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Ist die Prognosegrundlage der Marktlokation eine, für die der ÜNB die Aggregation durchführen darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code='A12', note='Unpassende Prognosegrundlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Hat keine vorangegangene Prüfung zu einer Antwort geführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Stammdaten wurden widerspruchsfrei übernommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Stammdaten wurden übernommen \nHinweis A**: Es werden alle gemerkten Antwortcodes der vorhergehenden Prüfschritte übermittelt.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Alle festgestellten Antworten sind anzugeben, soweit im Format möglich (maximal 8 Antwortcodes)*.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0454]
  EbdTableMetaData(ebd_code='E_0454', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0455]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0455', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0455 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des NB festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A97', note='Die Stammdaten des NB genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des NB anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.\nEine Durchführung der nachfolgend in diesem EBD genannten Prüfungen erfolgt nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die Marktlokation zu dem im Vorgang unter „Verwendung der Daten ab“ genannten Zeitpunkt bereits dem ÜNB zur Datenaggregation zugeordnet und die Meldung nicht als Korrektur kenntlich gemacht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A01', note='Zuordnung der Datenaggregation liegt bereits vor. Änderungen sind mittels Stammdatensynchronisation durchzuführen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die Meldung als Korrektur kenntlich gemacht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die im Vorgang enthaltene Marktlokations-ID zum genannten Zeitpunkt dem ÜNB bereits zur Aggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code='A19', note='Die Marktlokation bzw. Tranche ist für den genannten Zeitpunkt nicht dem ÜNB zur Aggregation gemeldet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt das im Vorgang unter "Verwendung der Daten ab" genannte Datum zum Zeitpunkt des Empfangs des Vorgangs beim ÜNB vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A20', note='Das Datum „Verwendung der Daten ab“ des Vorgangs liegt vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht. \nHinweis: Eine Korrektur des Datums "Verwendung der Daten ab" auf den nächstmöglichen Zeitpunkt ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist das im Vorgang unter "Verwendung der Daten ab" genannte Datum ein anderes Datum, als der erste eines Monats?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Die Übertragung der Datenaggregation durch den ÜNB kann nur zum Ersten eines Monats erfolgen. Eine Korrektur des Datums "Verwendung der Daten ab" auf den nächstmöglichen Zeitpunkt ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des LF festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code='A98', note='Die Stammdaten des LF genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des LF anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wurde die angegebene Verarbeitungsnummer im Vorgang bereits für einen verarbeiteten Vorgang zu dieser Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code='A22', note='Verarbeitungsnummer bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code='A02', note='Regelzone falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der angegebene Netzbetreiber der Marktlokation in der Regelzone bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code='A03', note='Netzbetreiber nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist das Bilanzierungsgebiet zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A04', note='Bilanzierungsgebiet nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der angegebene Netzbetreiber dem Bilanzierungsgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code='A16', note='Angegebener Netzbetreiber entspricht nicht dem zugeordneten Netzbetreiber des Bilanzierungs-gebiets.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Wird die Marktlokation auf Grundlage von Werten bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Ist der Messstellenbetreiber zum angegebenen Zeitpunkt in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code='A18', note='Messstellenbetreiber nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Ist der im Vorgang genannte LF identisch mit dem Absender der Nachricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code='A05', note='LF im Vorgang weicht vom Absender ab.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Ist der Bilanzkreis zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='17'), result_code='A06', note='Bilanzkreis nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Entspricht der Zeitreihentyp (ZRT) dem gültigen ZRT zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code='A07', note='ZRT nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Passt die Prognosegrundlage zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code='A17', note='Prognosegrundlage passt nicht zum ZRT.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code='A08', note='OBIS nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Passt die Lieferrichtung zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code='A09', note='Lieferrichtung nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht das Bilanzierungsverfahren dem gültigen Bilanzierungsverfahren zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='23'), result_code='A10', note='Bilanzierungsverfahren nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt für das Bilanzierungsgebiet Bestandteil der Profildefinitionsliste des Netzbetreibers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code='A12', note='Normiertes Profil liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt ein Profil aus der Gruppe SLP mit synthetischen Verfahren?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code='A13', note='Normiertes Profil – nicht SLP mit synthetischem Verfahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Ist die Prognosegrundlage der Marktlokation eine, für die der ÜNB die Aggregation durchführen darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code='A14', note='Unpassende Prognosegrundlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Hat keine vorangegangene Prüfung zu einer Antwort geführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Stammdaten wurden widerspruchsfrei übernommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Stammdaten wurden übernommen.\nHinweis A**: Es werden alle gemerkten Antwortcodes der vorhergehenden Prüfschritte übermittelt.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='7', instruction_text='Alle festgestellten Antworten sind anzugeben, soweit im Format möglich (maximal 8 Antwortcodes)*.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0456]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0456', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0456 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich bei der Marktlokation um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFür diese Marktlokation ist kein Lieferschein zu versenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Endedatum des Zeitraums des Lieferscheins in der Zukunft?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEndedatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht der Typ dieses Lieferscheins (Grund-/Arbeitspreis bzw. Arbeits-/Leistungspreis) für den übermittelten Zeit-raum mit der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/Arbeitspreis bzw. Arbeits-/Leistungspreis)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDer Typ des Lieferscheins ist nicht identisch zur Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Handelt es sich um einen Lieferschein vom Typ „Grund-/ Arbeitspreis“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt in dem Lieferschein genannten Zeitraum mindestens ein Tag eines noch nicht stornierten Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nÜberschneidender Zeitraum in noch nicht stornierten Lieferscheinen „Arbeits-/Grundpreis“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „keine Messung“ (pauschale Marktlokation)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht die im Lieferschein übermittelte Energiemenge der Energiemenge, welche sich aus der zuvor für den Zeitraum ausgetauschten Jahresverbrauchsprognose ergibt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nEnergiemenge für pauschale Marktlokation stimmt nicht überein.')], use_cases=None), EbdTableRow(step_number='8', description='Liegen nach Reklamation beim MSB für den korrespondierenden Zeitraum des Lieferscheins die Energiemengen an der Marktlokation vom MSB vor?\nHinweis: Sollten die Energiemengen an der Marktlokation vom MSB für den korrespondierenden Zeitraum nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nEnergiemengen vom MSB an der Marktlokation fehlen und sind beim MSB reklamiert\nHinweis: \nDie Prüfung des Lieferscheins erfolgt für Leistungszeiträume vor dem 01.12.2019 auf Basis der Werte, die vom NB bzw. vom gMSB übermittelt wurden.\nSiehe Mitteilung Nr. 6 zur MaKo 2020 (Az.: BK6-18-032) der Bundesnetzagentur vom 28.01.2020.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt für den im Lieferschein genannten Zeitraum für eine der genannten OBIS-Kennzahlen eine zusätzliche Energiemenge vor, die noch nicht storniert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nFür einen Zeitabschnitt liegen für mindestens eine OBIS-Kennzahl mehrere Energiemengen vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die zuvor vom MSB übermittelte Summe der Energiemengen je OBIS-Kennzahl der Summe der Energiemengen der aus dem Lieferschein korrespondierenden OBIS-Kennzahl für den vom Lieferschein abgedeckten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um eine Marktlokation, deren Netznutzung aufgrund vertraglicher Vereinbarungen abweichend zu den in GPKE Kapitel II. 6.2 beschriebenen Regelungen abgerechnet wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die im Lieferschein übermittelte Energiemenge der Energiemenge, welche sich auf Basis der vertraglichen Vereinbarungen ergibt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nEnergiemenge widerspricht vertraglich vereinbarter Logik.')], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die zuvor vom MSB übermittelte Summe der Energiemengen der Summe der Energiemengen aus dem Lieferschein für den vom Lieferschein abgedeckten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nEnergiemengen stimmen nicht überein.')], use_cases=None), EbdTableRow(step_number='14', description='Handelt es sich um eine Marktlokation mit der messtech-nischen Einordnung „keine Messung“ (pauschale Markt-lokation)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht die Energiemenge aus dem Lieferschein den bilateral vertraglichen Vereinbarungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nEnergiemenge für pauschale Marktlokation stimmt nicht überein.')], use_cases=None), EbdTableRow(step_number='16', description='Liegen nach Reklamation für den korrespondierenden Zeit-raum des Lieferscheins die Lastgänge an der Marktlokation vom MSB und ggf. das Leistungsmaximum (bei iMS vom MSB, bei kME mit RLM aus Lastgang vom LF entnommen und bei einem unterjährigen Lieferantenwechsel vom NB) vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den korrespondierenden Zeitraum des Lieferscheins nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nLastgänge vom MSB an der Marktlokation fehlen und sind beim MSB reklamiert oder vom NB fehlt die Nachricht „Arbeit und Leistungsmaximum Kalenderjahr vor Lieferbeginn".'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Handelt es sich um eine Marktlokation, deren Netznutzung aufgrund vertraglicher Vereinbarungen abweichend zu den in GPKE Kapitel II. 6.2 beschriebenen Regelungen abgerechnet wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Entspricht die Energiemenge bzw. das Leistungsmaximum aus dem Lieferschein den bilateral vertraglichen Vereinbarungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEnergiemenge bzw. Leistungsmaximum aus dem Lieferschein entspricht nicht der vertraglich vereinbarten Energiemenge.')], use_cases=None), EbdTableRow(step_number='19', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht das im Lieferschein übermittelte Leistungsmaximum dem Leistungsmaximum, das zuvor vom MSB über-mittelt wurde oder dem Leistungsmaximum, welches bei einem unterjährigen Lieferantenwechsel vom NB an den LF übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nLeistungsmaximum aus dem Lieferschein ist nicht identisch zum vorliegenden Leistungsmaximum.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht das im Lieferschein übermittelte Leistungsmaximum dem vorliegenden Leistungsmaximum beim LF, welches aus dem Lastgang vom MSB entnommen oder das Leistungsmaximum, welches bei einem unterjährigen Lieferantenwechsel vom NB an den LF übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nLeistungsmaximum unplausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Entspricht jede auf dem Lieferschein vorkommende Energiemenge je Position (OBIS-Kennzahl und Zeitraum) einer Summe der vom MSB zuvor übermittelten ¼ h-Werte unter Berücksichtigung von möglichen kaufmännischen Rundungen, wobei ggf. die Energiemengen aus den bisher gemessenen Arbeits- und Leistungswerten des NB berücksichtigt wurden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nEnergiemenge aus dem Lieferschein entspricht nicht der Summe aus dem Lastgang.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0458]
  EbdTableMetaData(ebd_code='E_0458', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0108_Weitere Bearbeitung prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0459]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0459', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0459 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0460]
  EbdTableMetaData(ebd_code='E_0460', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0461]
  EbdTableMetaData(ebd_code='E_0461', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0044_ORDRSP_Ablehnung der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0462]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0462', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0462 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist in der Anmeldung die Angabe der Identifikationslogik mit dem Wert „Marktlokations-ID“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde die im Geschäftsvorfall angegebene ID der Marktlokation im IT-System des Empfängers gefunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht identifizierbar.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note='Hinweis: Bei dieser Prüfung hat der NB auch die Marktlokationen zu berücksichtigen, die in den letzten drei Jahren vor dem Eingang der Anfrage im Netzgebiet des NB waren.')], use_cases=None), EbdTableRow(step_number='3', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil?\n(Dies sind Marktlokationen, bei welchen ein Bilanzkreis und ein Lieferant zugeordnet ist. Z.B. stillgelegte Marktlokationen oder Marktlokationen einer Kundenanlage, welche vom Kundenanlagenbetreiber beliefert werden und somit keine Zuordnung zu einem Lieferanten haben, nehmen nicht an der Marktkommunikation teil.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMarktlokation, die über Marktlokations-ID identifiziert wurde, nimmt nicht an der Marktkommunikation teil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt genau eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil? \n(Dies sind Marktlokationen, bei welchen ein Bilanzkreis und ein Lieferant zugeordnet ist. Z.B. stillgelegte Marktlokationen oder Marktlokationen einer Kundenanlage, welche vom Kundenanlagenbetreiber beliefert werden und somit keine Zuordnung zu einem Lieferanten haben, nehmen nicht an der Marktkommunikation teil.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nIdentifizierte Marktlokation nimmt nicht an der Marktkommunikation teil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt mehr als eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Handelt es sich um einen „Einzug in Neuanlage“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Identifizierung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die Anmeldung (der Neuanlage) vor mehr als 60 WT eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nNeuangelegte Marktlokation konnte nicht identifiziert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Nimmt von den identifizierten Marktlokationen exakt eine Marktlokation an der Marktkommunikation teil? \n(Die andere(n) Marktlokation(en) sind z.B. stillgelegte Marktlokation(en), Objekt(e) um einen Teil einer Kundenanlage.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nMehrfachidentifizierung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist die Marktlokation zum Eingangsdatum der Meldung dem Netzgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMarktlokation befindet sich zum Eingangsdatum der Meldung nicht mehr im Netzgebiet des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um einen Ein-/Auszug (Umzug)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Handelt es sich um einen „Einzug in Neuanlage“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Liegt der Transaktionsgrund zur Beendigung einer Ersatz-versorgung vor?\nDies ist bei dem folgenden Transaktionsgrund der Fall:\nLieferbeginn und Abmeldung aus der Ersatzversorgung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code=None, note='Hinweis: es liegt der Transaktionsgrund „Wechsel“ vor.')], use_cases=None), EbdTableRow(step_number='14', description='Sind bisheriger und neuer Anschlussnutzer identisch?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEs handelt sich nicht um einen Einzug, da zum genannten Datum kein Anschlussnutzerwechsel stattfand.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Handelt es sich um eine Marktlokation, deren Messlokationen vollständig mit iMS ausgestattet sind oder/und deren Prognosegrundlage auf Basis von Werten erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='17'), result_code=None, note=None)], use_cases=['Einzug']), EbdTableRow(step_number='16', description='Liegt das Lieferbeginndatum der Anmeldung mindestens einen Tag nach dem Eingangsdatum der Anmeldung?\nHinweis: Diese Prüfung enthält keine Aussage darüber, ob eine Verschiebung des Lieferbeginns notwendig ist.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEingangsfrist bei iMS / kME mit RLM nicht ein-gehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Einzug', 'iMS/kME mit RLM']), EbdTableRow(step_number='17', description='Liegt das Eingangsdatum der Anmeldung mehr als sechs Wochen nach dem Lieferbeginndatum der Anmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristüberschreitung bei kME ohne RLM/mME/ Pauschalanlage'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Einzug', 'kME ohne RLM/mME/ Pauschalanlage']), EbdTableRow(step_number='18', description='Ist in der Anmeldung die Angabe der Identifikationslogik mit dem Wert „Marktlokations-ID“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=['Lieferantenwechsel']), EbdTableRow(step_number='19', description='Liegt das Lieferbeginndatum der Anmeldung mindestens 7 WT nach dem Eingangsdatum der Anmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nFrist bei einem Lieferantenwechsel nicht ein-gehalten im Rahmen der schnellen Identifikation.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Lieferantenwechsel', 'schnelle Identifikation']), EbdTableRow(step_number='20', description='Liegt das Lieferbeginndatum der Anmeldung mindestens 10 WT nach dem Eingangsdatum der Anmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nFrist bei einem Lieferantenwechsel nicht eingehalten im Rahmen der langsamen Identifikation.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Lieferantenwechsel', 'langsame Identifikation']), EbdTableRow(step_number='21', description='Liegt für diese Marktlokation bereits eine gerade in Arbeit befindliche und noch nicht beantwortete Anmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nAndere Anmeldung in Bearbeitung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Liegt die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nZuordnungsermächtigung fehlt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Liegt der Transaktionsgrund „Lieferbeginn und Abmeldung aus der Ersatzversorgung“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='EBD E_0402_Prüfen, ob eine Abmeldeanfrage erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist der zum Anmeldedatum zugeordnete LF der GV?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nGrundversorger ist der Marktlokation nicht zu-geordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0402_Prüfen, ob eine Abmeldeanfrage erforderlich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0464]
  EbdTableMetaData(ebd_code='E_0464', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0465]
  EbdTableMetaData(ebd_code='E_0465', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0466]
  EbdTableMetaData(ebd_code='E_0466', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0467]
  EbdTableMetaData(ebd_code='E_0467', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0468]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0468', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0468 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde der Sperr- / Entsperrauftrag bereits durch den NB abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAuftrag wurde bereits abgelehnt und kann nicht mehr storniert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Handelt es sich um eine Stornierung eines Entsperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note='Hinweis: Es handelt sich um eine Stornierung eines Sperrauftrags.')], use_cases=None), EbdTableRow(step_number='3', description='Ist die Stornierung vor der Durchführung der Entsperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nEntsperrauftrag ist storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nStornierung des Entsperrauftrags nicht mehr möglich.')], use_cases=None), EbdTableRow(step_number='4', description='Ist der Nachrichteneingang der Stornierung spätestens am Tag vor dem geplanten Ausführungstermin bzw. fixen Sperrtermin aus dem Sperrauftrag eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nSperrauftrag ist bis zum Vortag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Stornierung vor der Durchführung der Sperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nSperrauftrag ist am Tag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nStornierung des Sperrauftrags nicht mehr möglich.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0470]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0470', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0470 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist bereits gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt für die Marktlokation im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin bereits ein Sperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nSperrauftrag für Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist im gesamten Ausführungszeitraum des Sperrauftrags (= frühestmöglicher Sperrtermin bis frühestmöglicher Sperrtermin + 6 WT) der die Sperrung beauftragende LF der zu sperrenden Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nZukünftiger bestätigter Lieferbeginn liegt gegenüber anderem Lieferanten bereits vor.\nDie Ausführungsfrist der 6 WT ab dem frühestmöglichen Sperrtermin berührt das bestätigte Lieferbeginndatum gegenüber anderem Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin an allen Messlokationen, welche der Marktlokation zugeordnet sind, der identische MSB zugeordnet, wie an der zu sperrenden Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nAn mindestens einer Messlokation ist ein anderer MSB zugeordnet als an der Marktlokation.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt die zu sperrende Marktlokation in der Niederspannung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation ist nicht in der Niederspannung.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Sind weitere Marktlokationen von der Sperrung betroffen, für die dieser Sperrauftrag keine Wirkung entfalten darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='65'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='65', description='Handelt es sich bei der bzw. den weiteren Marktlokationen ausschließlich um erzeugende Marktlokation(en)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMindestens eine weitere Marktlokation ist von der Sperrung betroffen.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt im gesamten Ausführungszeitraum ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nIm Ausführungszeitraum liegt bereits ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist der Sperrauftrag termingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt der übermittelte Sperrtermin mindestens 12 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristverletzung bei einem termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Liegt der übermittelte frühestmögliche Sperrtermin mindestens 6 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nFristverletzung bei einem nicht termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Kann der Sperrauftrag pauschal über das elektronische Preisblatt abgebildet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nSperrung wird über das elektronische Preisblatt abgebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nDie individuellen Sperrkosten werden in der Nachricht ausgetauscht.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0472]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0472', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0472 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='War eine Sperrung aus rechtlichen Gründen nicht möglich (z.\xa0B. wenn eine Einstweilige Verfügung vorlag)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein rechtlicher Grund vor Ort erkannt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde der Anschlussnutzer angetroffen?\nHinweis: Es gab keine Anzeichen dafür, dass der Anschlussnutzer anwesend war.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: gescheitert\nDer Anschlussnutzer wurde nicht angetroffen. Es gab keine Anzeichen dafür, dass dieser anwesend war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='War eine Sperrung aus dem Grund „aktive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „aktive Zutrittsverweigerung“ ist zu verstehen, dass der Anschlussnutzer angetroffen wurde und dieser den Zugang z.B. durch Drohungen, physische Angriffe, versperren des Zugangs zur Trennstelle unterbunden hat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine aktive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='War eine Sperrung aus dem Grund „passive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „passiver Zutrittsverweigerung“ ist zu verstehen, dass eine Anwesenheit des Anschlussnutzers festgestellt wurde, dieser jedoch seine Anwesenheit verleugnet. (z.B. Anschlussnutzer wurden in der Wohnung gesichtet, öffnet aber die Tür nicht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine passive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='War eine Sperrung wegen eines Verhinderungsgrundes nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein Verhinderungsgrund vorlag.\nHinweis: Im Freitext muss der Verhinderungsgrund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='War eine Sperrung aus einem tatsächlichen Grund nicht möglich?\nUnter tatsächliche Gründe fallen z. B.\nMarktlokation vor Ort nicht identifizierbar\nZugang zur Marktlokation nicht möglich\nKundenwechsel an der Marktlokation festgestellt', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein tatsächlicher Grund vorlag.\nHinweis: Im Freitext muss der tatsächliche Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='War eine Sperrung aus einem technischen Grund nicht möglich (z. B. eine weitere Marktlokation wäre von der Sperrung betroffen gewesen)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein technischer Grund vorlag.\nHinweis: Im Freitext muss der technische Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: erfolgreich\nMarktlokation wurde gesperrt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0477]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0477', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0477 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist der Marktlokation zum Zeitpunkt der bestellten Änderung die Sondervertragskunden-KA zugeordnet?\nHinweis: Wenn der Marktlokation zum Zeitpunkt der bestellten Änderung die Sondervertragskunden-KA zugeordnet ist und die Kriterien nach § 2 Abs. 7 KAV wurden nicht erreicht, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Sondervertragskunden-KA gemäß § 2 Abs. 3 der Konzessionsabgabenverordnung, daher keine Änderung möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist die Marktlokation von der Konzessionsabgabe befreit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Änderung nicht möglich, da Marktlokation von Konzessionsabgabe befreit.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der bestellte Zustand an der Marktlokation bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Der gewünschte Zustand ist bereits an der Marktlokation hinterlegt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Bestellt der LF für eine Marktlokation den Wechsel auf eine Schwachlast-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Stammdatenänderung NB (verantwortlich) ausgehend\nHinweis: Der LF beauftragt den NB die Schwachlast-Konzessionsabgabe an der Marktlokation nicht mehr ab dem angegebenen Zeitpunkt abzurechnen. Es soll die reguläre Konzessionsabgabe abgerechnet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Möchte der NB die Bestellung der rückwirkenden Änderung der Konzessionsabgabe aufgrund rechtlicher Fristen ablehnen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Eine rückwirkende Änderung wird abgelehnt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Lässt die Gerätekonfiguration der Messlokationen der angefragten Marktlokation zum Umsetzungszeitpunkt die separate Erfassung der Energie in den Schwachlastzeiten zu, um die niedrige Konzessionsabgabe für diese Menge abrechnen zu können?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='An der Marktlokation kann die Energie in den Schwachlastzeiten nicht zum angefragten Zeitpunkt separat erfasst werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdatenänderung NB (verantwortlich) ausgehend')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0487]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0487', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0487 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Marktlokation ist entsperrt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Bilaterale Klärung.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0488]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0488', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0488 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Hat der MSB die generelle Zustimmung zur Durchführung einer Entsperrung/Sperrung dem NB erteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nGenerelle Zustimmung des MSB für die Sperrung/Entsperrung liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegen dem MSB technische Gründe für eine Ablehnung der Sperrung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs liegt ein technischer Ablehnungsgrund vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine Mitwirkung des MSB bei Entsperrung/Sperrung vor Ort gewünscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung unter Mitwirkung des MSB zugestimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung durch NB zugestimmt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0497]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0497', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0497 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde die Sperrung durch den UC "Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF" ausgelöst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation wurde nicht über den UC (Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF) gesperrt. \nHinweis: Die Entsperrung muss auf konventionellem Weg erfolgen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wäre eine Wiederinbetriebnahme aufgrund eines technischen Verhinderungsrundes (z.B. entspricht nicht den geltenden Rechtsvorschriften, behördlichen Verfügungen, den anerkannten Regeln der Technik, DIN VDE Normen, Technischen Anschlussbedingungen (TAB) oder den sonstigen besonderen Vorschriften des NB) nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nWiederinbetriebnahme wäre technisch nicht möglich\nHinweis:\nDie Marktlokation bzw. die dazugehörigen elektrischen Anlagen kann gemäß NAV und TAB nicht wieder in Betrieb genommen werden. Sie entspricht nicht der geltenden Rechtsvorschriften und behördlichen Verfügungen sowie den anerkannten Regeln der Technik, insbesondere DIN VDE Normen, den Technischen Anschlussbedingungen (TAB) und den sonstigen besonderen Vorschriften des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist zum Zeitpunkt des Nachrichteneingangs die Marktlokation bereits entsperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt bereits ein Entsperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEntsperrauftrag für die Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0499]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0499', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0499 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: erfolgreich\nMarktlokation ist entsperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation ist weiterhin gesperrt.\nHinweis: Die Gründe des Scheiterns sind zu übermitteln.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0501]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0501', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0501 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Teilt der NB (ggf. nach erfolgtem Clearing mit dem MSB) die Ansicht des MSB, dass keine Sperrung erfolgen darf/kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer Antwortgrund des MSB aus „E_0488_Anfrage prüfen“ muss dem LF mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Sperrauftrag durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0502]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0502', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0502 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde bereits zum identischen Abmeldedatum für die in diesem Geschäftsvorfall genannte Marktlokation die Lieferende-Meldung positiv bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLieferende zum Abmeldedatum wurde bereits bestätigt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt der Transaktionsgrund Stilllegung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nAbmeldung wg. fehl. Zuordnungsermächtigung aufgrund Deaktivierung vom BKV beim NB\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT')], use_cases=None), EbdTableRow(step_number='30', description='Ist die Prognosegrundlage der Marktlokation auf Basis von Werten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Profilen')], use_cases=None), EbdTableRow(step_number='40', description='Liegt das Lieferende-Datum mindestens einen 1 WT nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEine Stilllegung einer Marktlokation mit Prognosegrundlage auf Basis von Werten kann nicht in die Vergangenheit gemeldet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBei Marktlokation mit Prognosegrundlage auf Basis von Werten muss Bilanzierungsende und Lieferende identisch sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wird ein Datum „Bilanzierungsende“ in der Abmeldung mitgeteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Hat eine Bilanzierung stattgefunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEs wurde kein Bilanzierungsende mitgeteilt, obwohl eine Bilanzierung stattgefunden hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Hat eine Bilanzierung stattgefunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nEs wurde ein Bilanzierungsende mitgeteilt, obwohl keine Bilanzierung stattgefunden hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde bereits ein Lieferende zu einem späteren Termin durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Ist das mitgeteilte Bilanzierungsende später als das zuvor mitgeteilte Bilanzierungsende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nBilanzierungsende ist später als das zuvor mitgeteilte Bilanzierungsende.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist das mitgeteilte Bilanzierungsende identisch zu dem zuvor mitgeteilten Bilanzierungsende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die Anfrage nach dem 3. WT vor dem Monatsletzten eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist das Bilanzierungsende ≤ dem Ende des Folgemonats (erster Tag des übernächsten Monats 00:00 Uhr)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDas Bilanzierungsende liegt zu weit in der Zukunft. Das bisherige Bilanzierungsende muss angepasst werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist das Bilanzierungsende ≤ dem Ende des aktuellen Monats (erster Tag des Folgemonats 00:00 Uhr)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nBilanzierungsfrist bei Marktlokationen mit Prognosegrundlage auf Basis von Profilen nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Ist das Lieferendedatum ≤ dem Monatsersten des Folgemonats 00:00 Uhr, in welchem der Geschäftsvorfall eingegangen ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='160'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die Anfrage nach dem 3. WT vor dem Monatsletzten eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Ist als Bilanzierungsende das Ende des Folgemonats (erster Tag des übernächsten Monats 00:00 Uhr) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nDas Bilanzierungsende ist zum angegebenen Termin nicht mehr möglich.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist als Bilanzierungsende das Ende des aktuellen Monats (erster Tag des Folgemonats 00:00 Uhr) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDas Bilanzierungsende ist nicht der erste Tag des Folgemonats 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='Ist als Bilanzierungsende das Ende des Monats angeben, in welchem das Lieferende liegt? (erster Tag des Folgemonats 00:00 Uhr des Monats in welchem das Lieferende liegt).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nDas Bilanzierungsende bei Lieferenden, welche in einem zukünftigen Monat liegen, muss zum Ablauf des gleichen Monats sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Liegen dem LF Informationen darüber vor, dass die Marktlokation nicht stillgelegt wird/wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDem LF liegen Informationen vor, dass die Marktlokation nicht stillgelegt wird/wurde.\nHinweis: Die Informationen sind in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None), EbdTableRow(step_number='210', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nLieferende und Bilanzierungsende müssen bei Lieferende von NB an LF aufgrund entfallender Zuordnungsermächtigung synchron sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Liegt das übermittelte Datum „Lieferende“ nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nLieferende bei entfallender Zuordnungsermächtigung muss in der Zukunft liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Ist das angegebene Datum „Lieferende“ der nächste 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDas Lieferende bei Abmeldung wegen Deaktivierung der Zuordnungsermächtigung muss auf dem 1. eines Kalendermonats liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='240', description='Liegt der Transaktionsgrund Abmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='250'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='260'), result_code=None, note='Hinweis: Es liegt der Transaktionsgrund „Abmeldung wg. fehl. Zuordnungsermächtigung“ aufgrund Deaktivierung vom BKV beim NB vor.')], use_cases=None), EbdTableRow(step_number='250', description='Wurde der Zeitreihentyp an der betreffenden Marktlokation in einen Zeitreihentyp geändert, für welchen keine Zuordnungsermächtigung besteht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nEs liegt keine Änderung des Zeitreihentyps vor, für welchen keine Zuordnungsermächtigung besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='260'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='260', description='Hat der BKV die Deaktivierung der Zuordnungsermächtigung für den ZRT, welcher der genannten Marktlokation zugeordnet ist, vorgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDeaktivierung der Zuordnungsermächtigung für den der Marktlokation zugeordneten ZRT hat nicht stattgefunden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0503]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0503', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0503 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nRechnung entspricht nicht §14 UstG.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt ein Rechenfehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Handelt es sich um eine Forderung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note='Hinweis: Es handelt sich um eine Rückerstattung.')], use_cases=None), EbdTableRow(step_number='7', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von Blindarbeit oder Unterbrechung / Wiederherstellung der Anschlussnutzung.')], use_cases=None), EbdTableRow(step_number='10', description='Werden die Positionen mit dem korrekten Steuersatz abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nMindestens eine der Positionen ist mit dem falschen Steuersatz abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um eine Rechnung von „Unterbrechung/Wiederherstellung der Anschlussnutzung“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von „Blindarbeit“.')], use_cases=None), EbdTableRow(step_number='12', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Hat der Lieferant einen Sperrauftrag mit der in der Rechnung vorhandenen Auftragsnummer des Sperrauftrags bestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDer abzurechnende Sperrauftrag ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Wurde der Sperrauftrag bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde diese Rechnung zum Sperrauftrag wieder storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Sperrauftrag wurde bereits abgerechnet (doppelte Rechnung).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Ist der identifizierte Sperrauftrag storniert und die Stornierung bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note='Hinweis: Der Sperrauftrag wurde nicht storniert oder die Stornierung erfolgte zu spät und wurde daher abgelehnt.')], use_cases=None), EbdTableRow(step_number='17', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-004] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung bis zum Vortag der Sperrung) oder Artikel-ID \n[2-01-7-005] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung am Tag der Sperrung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für einen stornierten Auftrag zur Unterbrechung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis „Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung“ des Preisblatts bzw. Artikel-ID ist im Preisblatt nicht genannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='War die Sperrung aus dem Sperrauftrag erfolgreich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note='Hinweis: Sperrung war nicht erfolgreich.')], use_cases=None), EbdTableRow(step_number='20', description='Wurde von dem Lieferanten bereits die Wiederherstellung der Anschlussnutzung für die aus diesem Auftrag umgesetzte Unterbrechung der Anschlussnutzung beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Wurde die Entsperrung vom Lieferanten mit der Option „Entsperrung auch außerhalb der regulären Arbeitszeit“ beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Werden in der Rechnung die beiden Artikel-IDs \n[2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird in der Rechnung die Artikel-ID [2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und zusätzlich genau eine der beiden Artikel-ID \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) oder \n[2-01-7-006] (Wiederherstellung der Anschlussnutzung außerhalb der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Entsprechen die Preise in der Rechnung den Preisen aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMindestens ein Preis in der Rechnung passt nicht zum Preis für eine Unterbrechung und Wiederherstellung der Anschlussnutzung auf dem Preisblatt bzw. mindestens eine Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-003] (Erfolglose Unterbrechung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für eine erfolglose Unterbrechung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für eine erfolglose Unterbrechung auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die Verzugskosten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Liegt dem Lieferanten die Rechnung vor, auf die sich die Verzugskostenrechnung bezieht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nDie Rechnung, auf die sich die Verzugskostenrechnung bezieht, ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='29'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='29', description='Wird in der Rechnung die Artikel-ID \n[2-02-0-001] (Verzugskosten pauschal) oder Artikel-ID \n[2-02-0-002] (Verzugskosten variabel) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für Verzugskosten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Sind die Verzugskosten gerechtfertigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDie Verzugskosten sind nicht gerechtfertigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Werden die Verzugskosten pauschal mit der \nArtikel-ID [2-02-0-001] (Verzugskosten pauschal) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='33'), result_code=None, note='Hinweis:\nDie Verzugskosten werden variabel mit der \nArtikel-ID [2-02-0-002] abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='32'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='32', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Verzugskosten auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='33', description='Entsprechen die geltend gemachten Verzugskosten den gesetzlichen Regelungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nPreis ist in der Höhe nicht angemessen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Abrechnung der Blindarbeit zwischen Lieferanten und Netzbetreiber für diese Lokation für den abgerechneten Zeitraum vereinbart?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A24', note='Cluster: Ablehnung\nDie Abrechnung der Blindarbeit ist nicht mit dem Lieferanten vereinbart'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='35'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='35', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Blindarbeit“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die freiwillige Abrechnung sonstiger Leistungen vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='36'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='36', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Lokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung\nDer LF lehnt die Zahlung der Blindarbeitsrechnung ab. Der LF ist der Lokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Lokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nDer LF lehnt die Zahlung der Blindarbeitsrechnung ab. Eine Ablehnung der Zahlung wird durch den LF begründet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='38'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='38', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A33', note='Cluster: Ablehnung \nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='39'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='39', description='Ist in dem Rechnungszeitraum ein bereits abgerechnetes Zeitintervall enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A27', note='Cluster: Ablehnung\nDie Rechnung enthält einen bereits abgerechneten Zeitraum'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegen dem Lieferanten die relevanten Messwerte vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A28', note='Cluster: Ablehnung\nDie relevanten Messwerte zur Rechnungsprüfung liegen nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='41'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='41', description='Wurde die vertraglich vereinbarte Menge Blindarbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A29', note='Cluster: Ablehnung\nMenge der Blindarbeit ist nicht korrekt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='42'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='42', description='Wird in der Rechnung eine der folgenden Artikel-IDs abgerechnet?\n[3-01-0-001] (Blindarbeit)\n[3-02-0-001] (Blindarbeit 1)\n[3-02-0-002] (Blindarbeit 2)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht keiner Artikel-ID für Blindarbeit'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Blindarbeit auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='44', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Zahlungsavis versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0504]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0504', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0504 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Unterbrechung der Anschlussnutzung (Sperren)“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note='Hinweis: Es handelt sich um ein Nicht-Zahlungsavis der Kategorie „Blindarbeit“')], use_cases=None), EbdTableRow(step_number='3', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Ein gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des an ihm versandten, für die Rechnung gültigen Preisblatts.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der Lieferant wegen unbekanntem Sperrauftrag abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt ein bestätigter Sperrauftrag mit der angegebenen Referenz auf den Sperrauftrag des Lieferanten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Gültiger Sperrauftrag ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='7', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Hat der LF den Sperrauftrag storniert und wurde diese Stornierung vom NB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Wurde die korrekte Artikel-ID entsprechend eines stornierten Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Korrekte Artikel-ID für die Abrechnung eines stornierten Sperrauftrags wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus der Stornierung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='10', description='Wurde die korrekte Artikel-ID entsprechend des Ergebnisses des Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Korrekte Artikel-ID wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus dem Ergebnis des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='11', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein, zum Preisblatt abweichender Preis angegeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Wurde in der Rechnung der im Preisblatt angegebene Preis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Korrekter Preis zum gültigen Preisblatt wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='13', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='14', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='16', description='Hat der Lieferant wegen unbekannter Rechnung, auf die sich die Verzugskostenrechnung bezieht, abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, dem Lieferanten zugestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='18', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Gültige Rechnung ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung der Rechnung, auf die sich die Verzugskostenrechnung bezieht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='19', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde genau eine der beiden Artikel-ID für Verzugskosten in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Es wurde für die Verzugskosten eine der beiden Artikel-ID verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='21', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein zum Preisblatt abweichender Preis angeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Wurde in der Rechnung die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='24'), result_code=None, note='Hinweis: Es wurde die Artikel-ID 2-02-0-002 (Verzugskosten variabel) angegeben')], use_cases=None), EbdTableRow(step_number='23', description='Ist der angegeben Preis in der Rechnung identisch mit dem Preis für die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Korrekter Preis wurde in der Rechnung abgerechnet\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='24', description='Ist der Preis, der in der Rechnung für die Artikel-ID 2-02-0-002 (Verzugskosten variabel) in Rechnung gestellt wurde für die der Verzugsrechnung zugrundeliegende, nicht bezahlte Rechnung angemessen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='25', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='26', description='Hat der Lieferant wegen fehlendem Preisblatt „Blindarbeit“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Wurde dem Lieferanten ein, für die Rechnung gültiges, Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Gültiges Preisblatt für Blindarbeit wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='28', description='Hat der Lieferant die Rechnung wegen einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='29'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='29', description='Wurde die korrekte Artikel-ID für Blindarbeit in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Korrekte Artikel-ID wurde in der Rechnung angegeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='30', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0505]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0505', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0505 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der Rechnungssteller den Einwand des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Rechnungsempfänger ist nach erneuter Prüfung immer noch der Ansicht, dass das Nichtzahlungsavis gerechtfertigt ist. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegen weitere Fehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Rechnung wird aufgrund noch nicht gemeldeter Fehler weiterhin abgelehnt.\nHinweis: Die Fehler sind in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Rechnung zustimmen und im Zahlungsavis berücksichtigen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0506]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0506', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0506 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0510]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0510', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0510 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ging innerhalb der Antwortfrist eine Ablehnung des Lieferanten ein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAblehnung der Abmeldung durch den Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nBestätigung der Anmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0511]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0511', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0511 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0512]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0512', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0512 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0513]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0513', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0513 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='E_0514_Beendigung der Zuordnung prüfen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0514]
  EbdTableMetaData(ebd_code='E_0514', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0515]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0515', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0515 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein gültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0516]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0516', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0516 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0517]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0517', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0517 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0518]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0518', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0518 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0519]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0519', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0519 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0520]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0520', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0520 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0521]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0521', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0521 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0522]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0522', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0522 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0523]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0523', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0523 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um eine kostenpflichtige Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nKostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt sich um eine Bestellung einer Konfiguration einer Änderung des Bilanzierungsverfahrens (Prognosegrundlage)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung einer Konfiguration einer Zählzeitdefinition', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note='Hinweis: Es handelt sich um eine Bestellung einer anderen Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“ oder um eine Marktlokation, bei der alle Messlokationen mit einem Zähler des Typs Lastgangzähler ausgestattet sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMarktlokation befindet sich nicht in der messtechnischen Einordnung „iMS“ oder es handelt sich nicht um eine Marktlokation, bei der alle Messlokationen mit einem Zähler des Typs Lastgangzähler ausgestattet sind.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entspricht der geplante Termin zur Änderung der Prognosegrundlage den Prozessfristvorgaben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nErzeugende Marktlokationen mit iMS oder kME/ RLM werden immer auf der Prognosegrundlage auf Basis von Werten bilanziert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt eine Zuordnungsermächtigung für den sich aus der gewünschten Prognosegrundlage ergebenden ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nZuordnungsermächtigung liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die gewünschte Prognosegrundlage auf Basis von Profilen angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Werten liegt vor.')], use_cases=None), EbdTableRow(step_number='90', description='Befindet sich die Marktlokation in einem Lokationsbündel, in welchem ebenfalls eine erzeugende Marktlokation vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Entspricht die erzeugte Energiemenge der Marktlokation der gemessenen Energiemenge in der Flussrichtung Erzeugung an der Messlokation der Netzübergabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Volleinspeisung, keine Prognosegrundlage auf Basis von Profilen möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Besteht für die Marktlokation ein Wahlrecht zur Änderung der Prognosegrundlage durch den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nKein Wahlrecht der Prognosegrundlage für die Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die gewünschte Prognosegrundlage zum gewünschten Termin bereits umgesetzt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nÄnderung zum gewünschten Termin bereits umgesetzt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei der Marktlokation um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nBestellungen sind nur für verbrauchende Marktlokationen möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei der Bestellung um eine Rückkehr auf eine Eintariflogik?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die gewünschte Zählzeit zum Anwendungszeitpunkt Bestandteil der Übersicht der Zählzeitdefinition, welche zuvor vom NB übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung \nZählzeitdefinition zum Anwendungszeitpunkt nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Ist die in der Bestellung genannte Zählzeit in der Übersicht der Zählzeitdefinition des NB als eine bestellbare Zählzeit gekennzeichnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung \nZählzeit ist nicht bestallbar'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Liegt zum Anwendungszeitpunkt die ausgerollte Zählzeit zur Zählzeitdefinition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung \nAusgerollte Zählzeit zur Zählzeitdefinition liegt zum Anwendungszeitpunkt nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='Ist der bestellte Zustand bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nBestellter Zustand bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist die gewünschte Konfiguration grundsätzlich möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung \nKonfiguration technisch nicht möglich\nHinweis: z.\xa0B. Zählzeit bestellt und Eintarifzähler verbaut')], use_cases=None), EbdTableRow(step_number='210', description='Wurde die Vorlauffristen zu der geplanten Änderung der Gerätekonfiguration eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung \nFristüberschreitung')], use_cases=None), EbdTableRow(step_number='220', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Zustimmung\nBestellung wird an den MSB der Marktlokation weitergeleitet')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0524]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0524', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0524 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Die bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Konfiguration, welche im Preisblatt A des MSB aufgeführt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Nicht kostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Anfragenden an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Sind die in der Anfrage enthaltenen Artikel auch im Preisblatt des MSB zum angefragten Zeitpunkt gültig', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Es ist mindestens ein Artikel in der Anfrage, welcher vom MSB nicht angeboten wird'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der MSB bei allen betroffenen Lokationen aktiver MSB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Der MSB ist nicht an allen Lokationen der zugeordnete MSB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note='Angebot erstellen')], use_cases=None), EbdTableRow(step_number='70', description='Ist die bestellte Konfiguration an der betroffenen Lokation möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Konfiguration ist an der betroffenen Lokation nicht möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Wurden die Vorlauffristen eingehalten?\n\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Die Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0525]
  EbdTableMetaData(ebd_code='E_0525', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es wird kein EBD benötigt')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0526]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0526', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0526 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Bestellung einer kostenfreien Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note='Hinweis: \nEs handelt sich um eine kostenpflichtige Konfiguration')], use_cases=None), EbdTableRow(step_number='25', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Besteller an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Angebot noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nAngebot ist nicht mehr gültig\n(z.B. Angebot ist zu alt, Preise haben sich in der Zwischenzeit geändert)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um die Konfiguration einer Zählzeitdefinition, Schaltzeitdefinition oder Leistungskurvendefinition, welche dem MSB zum bestellten Zeitpunkt nicht bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nBestellte Konfiguration ist dem MSB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0527]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0527', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0527 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die Bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0528]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0528', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0528 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0529]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0529', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0529 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0530]
  EbdTableMetaData(ebd_code='E_0530', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Kein EBD erforderlich')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0531]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0531', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0531 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Konfiguration, welche im Preisblatt A des MSB aufgeführt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nNicht kostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Anfragenden an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Sind die in der Anfrage enthaltenen Artikel auch im Preisblatt des MSB zum angefragten Zeitpunkt gültig', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEs ist mindestens ein Artikel in der Anfrage, welcher vom MSB nicht angeboten wird'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der MSB bei allen betroffenen Lokationen aktiver MSB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDer MSB ist nicht an allen Lokationen der zugeordnete MSB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note='Angebot erstellen')], use_cases=None), EbdTableRow(step_number='70', description='Ist die bestellte Konfiguration an der betroffenen Lokation möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKonfiguration ist an der betroffenen Lokation nicht möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Wurden die Vorlauffristen eingehalten?\n\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0532]
  EbdTableMetaData(ebd_code='E_0532', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es wird kein EBD benötigt')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0533]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0533', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0533 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Bestellung einer kostenfreien Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note='Hinweis: \nEs handelt sich um eine kostenpflichtige Konfiguration')], use_cases=None), EbdTableRow(step_number='25', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine Konfiguration vom Besteller an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in der Anfrage zum Angebot die Referenz der Bestellung der bestehenden Konfiguration enthalten?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Anfrage ist die Referenz der bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Angebot noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nAngebot ist nicht mehr gültig\n(z.B. Angebot ist zu alt, Preise haben sich in der Zwischenzeit geändert)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um die Konfiguration einer Zählzeitdefinition, Schaltzeitdefinition oder Leistungskurvendefinition, welche dem MSB zum bestellten Zeitpunkt nicht bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nBestellte Konfiguration ist dem MSB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0534]
  EbdTableMetaData(ebd_code='E_0534', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='MSB (weitere) nicht weiß, ob der NB oder der LF bestellt hat, wird hier das EBD E_0527 verwendet.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0535]
  EbdTableMetaData(ebd_code='E_0535', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0528 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0536]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0536', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0536 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0537]
  EbdTableMetaData(ebd_code='E_0537', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Kein EBD erforderlich')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0538]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0538', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0538 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0539]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0539', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0539 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0540]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0540', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0540 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0541]
  EbdTableMetaData(ebd_code='E_0541', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0542]
  EbdTableMetaData(ebd_code='E_0542', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0543]
  EbdTableMetaData(ebd_code='E_0543', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0544]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0544', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0544 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\n\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrigierte Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0545]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0545', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0545 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\n\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrigierte Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0546]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0546', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0546 Dummy Name', remark=None), rows=[EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Absender eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0547]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0547', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0547 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0548]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0548', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0548 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeitdefinition bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der LF das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den LF versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der LF eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der LF das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den LF versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der LF eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0549]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0549', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0549 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeitdefinition bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der MSB eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0550]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0550', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0550 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Reklamiert der Absender das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0551]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0551', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0551 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet \nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeitdefinition bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der Anfragende eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0552]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0552', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0552 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration.')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note='.')], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden. \nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0553]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0553', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0553 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden.\nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0554]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0554', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0554 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden.\nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0555]
  EbdTableMetaData(ebd_code='E_0555', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0556]
  EbdTableMetaData(ebd_code='E_0556', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0558]
  EbdTableMetaData(ebd_code='E_0558', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0556 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0560]
  EbdTableMetaData(ebd_code='E_0560', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0555 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0561]
  EbdTableMetaData(ebd_code='E_0561', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0556 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0566]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0566', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0566 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Der NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den NB begründet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2024 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE6', note='Cluster: Ablehnung auf Kopfebene\nDer Beginn des Abrechnungszeitraums ist < 01.01.2024 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='77'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='77', description='Ist im gesamten Abrechnungszeitraum an mindestens einer Messlokation der Marktlokation ein iMS eingebaut?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE8', note='Cluster: Ablehnung auf Kopfebene\nIm gesamten Abrechnungszeitraum ist an keiner Messlokation der Marktlokation ein iMS eingebaut.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem NB liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='115', description='Ist der MSB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE9', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Ist der MSB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AF0', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen NB und MSB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben?\nHinweis: Die Abrechnung für diesen Zeitraum ist dann vorgegeben, wenn für jeden Zeitpunkt dieses Zeitraums mindestens eine Artikel-ID in den Stammdaten ausgetauscht wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem NB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='301'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='301', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='302'), result_code='AF1', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen. \nHinweis: Der Netzbetreiber gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='302'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='302', description='Darf aus Sicht des NB die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des NB für diese Marktlokation nicht passt?\nHinweis: Ggf. ist zu prüfen: \nder Mittelwert des Jahresstromverbrauchs der vorherigen drei Kalenderjahre\ndie Jahresverbrauchsprognose für die Marktlokation\ndie installierte Leistung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='303'), result_code='AF2', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='301'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='501'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='501', description='Fehlen noch Positionen, die über die ausgetauschten Artikel-ID vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='AE7', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht in der Rechnung enthaltenen ausgetauschten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='501', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0567]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0567', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0567 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0568]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0568', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0568 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC1', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Der NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den NB begründet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2024 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE6', note='Cluster: Ablehnung auf Kopfebene\nDer Beginn des Abrechnungszeitraums ist < 01.01.2024 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='77'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='77', description='Ist im gesamten Abrechnungszeitraum an mindestens einer Messlokation der Marktlokation ein iMS eingebaut?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE8', note='Cluster: Ablehnung auf Kopfebene\nIm gesamten Abrechnungszeitraum ist an keiner Messlokation der Marktlokation ein iMS eingebaut.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem NB liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='115', description='Ist der MSB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE9', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Ist der MSB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AF0', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen NB und MSB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben?\nHinweis: Die Abrechnung für diesen Zeitraum ist dann vorgegeben, wenn für jeden Zeitpunkt dieses Zeitraums mindestens eine Artikel-ID in den Stammdaten ausgetauscht wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem NB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='301'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='301', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='302'), result_code='AF1', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen. \nHinweis: Der Netzbetreiber gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='302'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='302', description='Darf aus Sicht des NB die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des NB für diese Marktlokation nicht passt?\nHinweis: Ggf. ist zu prüfen: \nder Mittelwert des Jahresstromverbrauchs der vorherigen drei Kalenderjahre\ndie Jahresverbrauchsprognose für die Marktlokation\ndie installierte Leistung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='303'), result_code='AF2', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='301'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='501'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='501', description='Fehlen noch Positionen, die über die ausgetauschten Artikel-ID vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='AE7', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht in der Rechnung enthaltenen ausgetauschten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='301', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='501', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0569]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0569', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0569 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0570]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0570', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0570 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Änderung der Netzentgelte aufgrund netzorientierter Steuerungsmöglichkeit möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Zustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0571]
  EbdTableMetaData(ebd_code='E_0571', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0800]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0800', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0800 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegen zwischen dem Eingangsdatum der Nachricht und dem Monatsletzten des Monats, in dem der angefragte Bilanzierungszeitraum endet, mindestens 30 Werktage?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt die Aggregationsverantwortung im angefragten Zeitraum komplett beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Aggregationsverantwortung liegt nicht oder nur zeitweise beim ÜNB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Marktlokation im angefragten Zeitraum komplett auf Basis von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Marktlokation wird nicht auf Basis von Profilen bilanziert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bilanzierte Menge versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0801]
  EbdTableMetaData(ebd_code='E_0801', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='GS_002_MehrMinderMengen-Rechnung prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0802]
  EbdTableMetaData(ebd_code='E_0802', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='G_0080_aggregierte Menge und Abrechnungszeitraum prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0803]
  EbdTableMetaData(ebd_code='E_0803', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='G_0001_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0804]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0804', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0804 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: \n\nDas identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0806]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0806', chapter='Dummy Chapter', section='Dummy Section', role='MGV', ebd_name='E_0806 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: \n\nDas identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0900]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0900', chapter='Dummy Chapter', section='Dummy Section', role='BTR', ebd_name='E_0900 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entsprechen die Energiemengen der Ausfallarbeitszeitreihe den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Zustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übermittlung Gegenvorschlag')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0901]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0901', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0901 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die Ausfallarbeitszeitreihe bereits eine Zustimmung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAusfallarbeitszeitreihe wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Gegenvorschlag zur Ausfallarbeitszeitreihe innerhalb der vorgegebenen Frist eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt bereits ein Gegenvorschlag zur Ausfallarbeitszeitreihe vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nGegenvorschlag liegt bereits vor\nHinweis: Ein weiterer Gegenvorschlag kann nicht eingereicht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Können die Energiemengen des Gegenvorschlages zur Ausfallarbeitszeitreihe akzeptiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0902]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0902', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0902 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entsprechen die Energiemengen der Ausfallarbeitszeitreihe bzw. der Fahrplananteilzeitreihe den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Kann ein Gegenvorschlag erstellt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel\nÜbermittlung Gegenvorschlag\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel inkl. Korrekturanforderung\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0903]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0903', chapter='Dummy Chapter', section='Dummy Section', role='BTR', ebd_name='E_0903 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die Ausfallarbeitszeitreihe bereits eine Zustimmung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAusfallarbeitszeitreihe wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Gegenvorschlag zur Ausfallarbeitszeitreihe innerhalb der vorgegebenen Frist eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt bereits ein Gegenvorschlag zur Ausfallarbeitszeitreihe vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nGegenvorschlag liegt bereits vor\nHinweis: Ein weiterer Gegenvorschlag kann nicht eingereicht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Können die Energiemengen des Gegenvorschlages zur Ausfallarbeitszeitreihe akzeptiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_0904]
  EbdTableMetaData(ebd_code='E_0904', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1000]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1000', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1000 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist bereits gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt für die Marktlokation im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin bereits ein Sperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nSperrauftrag für Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist im gesamten Ausführungszeitraum des Sperrauftrags \n(= frühestmöglicher Sperrtermin bis frühestmöglicher Sperrtermin + 6 WT) der die Sperrung beauftragende LF der zu sperrenden Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nZukünftiger bestätigter Lieferbeginn liegt gegenüber anderem Lieferanten bereits vor.\nDie Ausführungsfrist der 6 WT ab dem frühestmöglichen Sperrtermin berührt das bestätigte Lieferbeginndatum gegenüber anderem Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt an der zu sperrenden Marktlokation eine 1:1-Beziehung zwischen Marktlokation und Messlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine 1:1-Beziehung zwischen Marktlokation und Messlokation.\nHinweis: Gasspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wird die zu sperrende Marktlokation auf Basis von Grund- und Arbeitspreis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation wird nicht auf Basis von Grund- und Arbeitspreis abgerechnet.\nHinweis: Gasspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Sind weitere Marktlokationen von der Sperrung betroffen, für die dieser Sperrauftrag keine Wirkung entfalten darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMindestens eine weitere Marktlokation ist von der Sperrung betroffen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt im gesamten Ausführungszeitraum ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nIm Ausführungszeitraum liegt bereits ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist der Sperrauftrag termingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt der übermittelte Sperrtermin mindestens 12 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristverletzung bei einem termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Liegt der übermittelte frühestmögliche Sperrtermin mindestens 6 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nFristverletzung bei einem nicht termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Kann der Sperrauftrag pauschal über das elektronische Preisblatt abgebildet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nSperrung wird über das elektronische Preisblatt abgebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nDie individuellen Sperrkosten werden in der Nachricht ausgetauscht.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1001]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1001', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_1001 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der MSB die generelle Zustimmung zur Durchführung einer Entsperrung/Sperrung dem NB erteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nGenerelle Zustimmung des MSB für die Sperrung/Entsperrung liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegen dem MSB technische Gründe für eine Ablehnung der Sperrung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs liegt ein technischer Ablehnungsgrund vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist eine Mitwirkung des MSB bei Entsperrung/Sperrung vor Ort gewünscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung unter Mitwirkung des MSB zugestimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung durch NB zugestimmt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1002]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1002', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1002 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Teilt der NB (ggf. nach erfolgtem Clearing mit dem MSB) die Ansicht des MSB, dass keine Sperrung erfolgen darf/kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer Antwortgrund des MSB aus „E_1001_Anfrage prüfen“ muss dem LF mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Sperrauftrag durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1003]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1003', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1003 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='War eine Sperrung aus rechtlichen Gründen nicht möglich (z.\xa0B., wenn eine Einstweilige Verfügung vorlag)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein rechtlicher Grund vor Ort erkannt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde der Anschlussnutzer angetroffen?\nHinweis: Es gab keine Anzeichen dafür, dass der Anschlussnutzer anwesend war.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: gescheitert\nDer Anschlussnutzer wurde nicht angetroffen. Es gab keine Anzeichen dafür, dass dieser anwesend war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='War eine Sperrung aus dem Grund „aktive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „aktive Zutrittsverweigerung“ ist zu verstehen, dass der Anschlussnutzer angetroffen wurde und dieser den Zugang z.\xa0B. durch Drohungen, physische Angriffe, versperren des Zugangs zur Trennstelle unterbunden hat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine aktive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='War eine Sperrung aus dem Grund „passive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „passiver Zutrittsverweigerung“ ist zu verstehen, dass eine Anwesenheit des Anschlussnutzers festgestellt wurde, dieser jedoch seine Anwesenheit verleugnet. (z.B. Anschlussnutzer wurden in der Wohnung gesichtet, öffnet aber die Tür nicht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine passive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='War eine Sperrung wegen eines Verhinderungsgrundes nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein Verhinderungsgrund vorlag.\nHinweis: Im Freitext muss der Verhinderungsgrund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='War eine Sperrung aus einem tatsächlichen Grund nicht möglich?\nUnter tatsächliche Gründe fallen z. B.\nMarktlokation vor Ort nicht identifizierbar\nZugang zur Marktlokation nicht möglich\nKundenwechsel an der Marktlokation festgestellt', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein tatsächlicher Grund vorlag.\nHinweis: Im Freitext muss der tatsächliche Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='War eine Sperrung aus einem technischen Grund nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein technischer Grund vorlag.\nHinweis: Im Freitext muss der technische Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: erfolgreich\nMarktlokation wurde gesperrt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1004]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1004', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1004 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde die Sperrung durch den UC "Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF" ausgelöst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation wurde nicht über den UC (Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF) gesperrt. \nHinweis: Die Entsperrung muss auf konventionellem Weg erfolgen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wäre eine Wiederinbetriebnahme aufgrund eines technischen Verhinderungsgrundes (z.B. entspricht nicht den geltenden Rechtsvorschriften, behördlichen Verfügungen, den anerkannten Regeln der Technik, DVGW Technischen Anschlussbedingungen (TAB) oder den sonstigen besonderen Vorschriften des NB) nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster Ablehnung\nWiederinbetriebnahme wäre technisch nicht möglich\nHinweis:\nDie Marktlokation bzw. die dazugehörigen elektrischen Anlagen kann gemäß NAV und TAB nicht wieder in Betrieb genommen werden. Sie entspricht nicht der geltenden Rechtsvorschriften und behördlichen Verfügungen sowie den anerkannten Regeln der Technik, DVGW, den Technischen Anschlussbedingungen (TAB) und den sonstigen besonderen Vorschriften des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist zum Zeitpunkt des Nachrichteneingangs die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt bereits ein Entsperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEntsperrauftrag für die Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1005]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1005', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1005 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: erfolgreich\nMarktlokation ist entsperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation ist weiterhin gesperrt.\nHinweis: Die Gründe des Scheiterns sind zu übermitteln.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1006]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1006', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1006 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde der Sperr- / Entsperrauftrag bereits durch den NB abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAuftrag wurde bereits abgelehnt und kann nicht mehr storniert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Stornierung eines Entsperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note='Hinweis: Es handelt sich um eine Stornierung eines Sperrauftrags.')], use_cases=None), EbdTableRow(step_number='30', description='Ist die Stornierung vor der Durchführung der Entsperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nEntsperrauftrag ist storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nStornierung des Entsperrauftrags nicht mehr möglich.')], use_cases=None), EbdTableRow(step_number='40', description='Ist der Nachrichteneingang der Stornierung spätestens am Tag vor dem vom NB geplanten Ausführungstermin bzw. fixen Sperrtermin aus dem Sperrauftrag eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nSperrauftrag ist bis zum Vortag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist die Stornierung vor der Durchführung der Sperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nSperrauftrag ist am Tag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nStornierung des Sperrauftrags nicht mehr möglich.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1007]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1007', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1007 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nRechnung entspricht nicht §14 UstG.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt ein Rechenfehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine Forderung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note='Hinweis: Es handelt sich um eine Rückerstattung.')], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die Frist der Fälligkeit überschritten?\nZahlungsziel\xa0>\xa010 WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='270'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von Unterbrechung / Wiederherstellung der Anschlussnutzung.')], use_cases=None), EbdTableRow(step_number='100', description='Werden die Positionen mit dem korrekten Steuersatz abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nMindestens eine der Positionen ist mit dem falschen Steuersatz abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Hat der Lieferant einen Sperrauftrag mit der in der Rechnung vorhandenen Auftragsnummer des Sperrauftrags bestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDer abzurechnende Sperrauftrag ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Wurde der Sperrauftrag bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde diese Rechnung zum Sperrauftrag wieder storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Sperrauftrag wurde bereits abgerechnet (doppelte Rechnung).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist der identifizierte Sperrauftrag storniert und die Stornierung bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note='Hinweis: Der Sperrauftrag wurde nicht storniert oder die Stornierung erfolgte zu spät und wurde daher abgelehnt.')], use_cases=None), EbdTableRow(step_number='170', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-004] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung bis zum Vortag der Sperrung) oder Artikel-ID \n[2-01-7-005] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung am Tag der Sperrung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für einen stornierten Auftrag zur Unterbrechung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis „Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung“ des Preisblatts bzw. Artikel-ID ist im Preisblatt nicht genannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='War die Sperrung aus dem Sperrauftrag erfolgreich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note='Hinweis: Sperrung war nicht erfolgreich.')], use_cases=None), EbdTableRow(step_number='200', description='Wurde von dem Lieferanten bereits die Wiederherstellung der Anschlussnutzung für die aus diesem Auftrag umgesetzte Unterbrechung der Anschlussnutzung beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Wurde die Entsperrung vom Lieferanten mit der Option „Entsperrung auch außerhalb der regulären Arbeitszeit“ beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Werden in der Rechnung die beiden Artikel-IDs \n[2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Wird in der Rechnung die Artikel-ID [2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und zusätzlich genau eine der beiden Artikel-ID \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) oder \n[2-01-7-006] (Wiederherstellung der Anschlussnutzung außerhalb der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='240', description='Entsprechen die Preise in der Rechnung den Preisen aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMindestens ein Preis in der Rechnung passt nicht zum Preis für eine Unterbrechung und Wiederherstellung der Anschlussnutzung auf dem Preisblatt bzw. mindestens eine Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='250', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-003] (Erfolglose Unterbrechung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für eine erfolglose Unterbrechung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='260'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='260', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für eine erfolglose Unterbrechung auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='270', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die Verzugskosten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='280'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='280', description='Liegt dem Lieferanten die Rechnung vor, auf die sich die Verzugskostenrechnung bezieht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nDie Rechnung, auf die sich die Verzugskostenrechnung bezieht, ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='290'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='290', description='Wird in der Rechnung die Artikel-ID \n[2-02-0-001] (Verzugskosten pauschal) oder Artikel-ID \n[2-02-0-002] (Verzugskosten variabel) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für Verzugskosten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Sind die Verzugskosten gerechtfertigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDie Verzugskosten sind nicht gerechtfertigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Werden die Verzugskosten pauschal mit der \nArtikel-ID [2-02-0-001] (Verzugskosten pauschal) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note='Hinweis:\nDie Verzugskosten werden variabel mit der \nArtikel-ID [2-02-0-002] abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Verzugskosten auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die geltend gemachten Verzugskosten den gesetzlichen Regelungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nPreis ist in der Höhe nicht angemessen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Zahlungsavis versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1008]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1008', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1008 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Unterbrechung der Anschlussnutzung (Sperren)“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Abrechnung „Blindarbeit“ für Sparte Gas nicht relevant.')], use_cases=None), EbdTableRow(step_number='30', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Ein gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des an ihm versandten, für die Rechnung gültigen Preisblatts.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='50', description='Hat der Lieferant wegen unbekanntem Sperrauftrag abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt ein bestätigter Sperrauftrag mit der angegebenen Referenz auf den Sperrauftrag des Lieferanten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Gültiger Sperrauftrag ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='70', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Hat der LF den Sperrauftrag storniert und wurde diese Stornierung vom NB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die korrekte Artikel-ID entsprechend eines stornierten Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Korrekte Artikel-ID für die Abrechnung eines stornierten Sperrauftrags wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus der Stornierung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='100', description='Wurde die korrekte Artikel-ID entsprechend des Ergebnisses des Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Korrekte Artikel-ID wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus dem Ergebnis des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='110', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein, zum Preisblatt abweichender Preis angegeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wurde in der Rechnung der im Preisblatt angegebene Preis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Korrekter Preis zum gültigen Preisblatt wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='130', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='140', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='160', description='Hat der Lieferant wegen unbekannter Rechnung, auf die sich die Verzugskostenrechnung bezieht, abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, dem Lieferanten zugestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='180', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Gültige Rechnung ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung der Rechnung, auf die sich die Verzugskostenrechnung bezieht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='190', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Wurde genau eine der beiden Artikel-ID für Verzugskosten in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Es wurde für die Verzugskosten eine der beiden Artikel-ID verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='210', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein zum Preisblatt abweichender Preis angeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Wurde in der Rechnung die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='240'), result_code=None, note='Hinweis: Es wurde die Artikel-ID 2-02-0-002 (Verzugskosten variabel) angegeben')], use_cases=None), EbdTableRow(step_number='230', description='Ist der angegeben Preis in der Rechnung identisch mit dem Preis für die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Korrekter Preis wurde in der Rechnung abgerechnet\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='240', description='Ist der Preis, der in der Rechnung für die Artikel-ID 2-02-0-002 (Verzugskosten variabel) in Rechnung gestellt wurde für die der Verzugsrechnung zugrundeliegende, nicht bezahlte Rechnung angemessen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='250', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1009]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1009', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1009 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte der Rechnungssteller den Einwand des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Rechnungsempfänger ist nach erneuter Prüfung immer noch der Ansicht, dass das Nichtzahlungsavis gerechtfertigt ist. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegen weitere Fehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Rechnung wird aufgrund noch nicht gemeldeter Fehler weiterhin abgelehnt.\nHinweis: Die Fehler sind in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Rechnung zustimmen und im Zahlungsavis berücksichtigen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2410][E_1010]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1010', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1010 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2025 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0003]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0003', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0003 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Bestellung fristgerecht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Bestellung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0004]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0004', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0004 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-CL Abonnement vor? Entspricht die Versionsangabe in der BG-CL der Versionsangabe der BG-SZR (Kategorie B), zu der eine BG-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe einer vorliegenden LF-SZR (Kategorie B)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0005]
  EbdTableMetaData(ebd_code='E_0005', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0007]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0007', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0007 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-SZR (Kategorie A) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0008]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0008', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0008 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang einer Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 1 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0009]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0009', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0009 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0010]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0010', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0010 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die ID bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0011]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0011', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0011 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Erfolgt die Aktivierung des MaBiS-ZP auf Ebene des Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Regelzone, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Regelzone, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vor-handen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der Bilanzkreis zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung \nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0012]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0012', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0012 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0013]
  EbdTableMetaData(ebd_code='E_0013', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0014]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0014', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0014 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe der LF-SZR (Kategorie B), zu der eine LF-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0015]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0015', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0015 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der ÜNB zum Aktivierungsbeginn für das Bilanzierungsgebiet zuständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Spannungsebene und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0016]
  EbdTableMetaData(ebd_code='E_0016', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0017]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0017', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0017 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der BG-CL der Versionsangabe der BG-SZR (Kategorie B), zu der eine BG-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der BG-CL nicht ent-halten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung \nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der BG-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zu-geordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der BG-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB (über LF) und ÜNB ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB (über LF) und ÜNB ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB (über LF) und ÜNB ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0018]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0018', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0018 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0019]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0019', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0019 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0020]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0020', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0020 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die ID bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist genau eines der angegebenen Bilanzierungsgebiete das Bilanzierungsgebiet des Empfängers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet des benachbarten NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Empfänger zum Aktivierungsbeginn für eines der zwei angegebenen Bilanzierungsgebiete zuständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet des verantwortlichen NB, Bilanzierungsgebiet des benachbarten NB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0021]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0021', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0021 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0022]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0022', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0022 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Abbestellung fristgerecht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Abbestellung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0023]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0023', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0023 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Hat der BKV für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0024]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0024', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0024 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet des verantwortlichen NB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet des verantwortlichen NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet des benachbarten NB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet des benachbarten NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für eines der zwei angegebenen Bilanzierungsgebiete?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet des verantwortlichen NB, Bilanzierungsgebiet des benachbarten NB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0025]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0025', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0025 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Hat der BKV dem BIKO für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Falsche Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV dem BIKO für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Falsche Aggregationsebene RZ'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0026]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0026', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0026 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='6', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code='A03', note='Datenstatus „Abgerechnete Daten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='7', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus „Abgerechnete Daten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='1', instruction_text='Je höchster Version der BK-SZR mit dem Datenstatus „Abrechnungsdaten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat erfolgen nachfolgende Prüfungen:'), MultiStepInstruction(first_step_number_affected='7', instruction_text='Die folgenden Aktionen sind je zugehörigem MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0027]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0027', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0027 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Regelzone und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Regelzone und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vor-handen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung \nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0028]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0028', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0028 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0029]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0029', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0029 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Eingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0030]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0030', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0030 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Eingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0031]
  EbdTableMetaData(ebd_code='E_0031', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0032]
  EbdTableMetaData(ebd_code='E_0032', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0033]
  EbdTableMetaData(ebd_code='E_0033', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0034]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0034', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0034 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für das angegebene Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungsgebiet, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der Bilanzkreis zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0035]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0035', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0035 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Aktivierungsende in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Aktivierungsende bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Deaktivierungszeitpunkt bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0036]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0036', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0036 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang einer Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0038]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0038', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0038 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0039]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0039', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0039 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in dem angefragten Gebiet (Bilanzierungsgebiet oder Regelzone) für diesen Bilanzkreis LF-SZR zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0040]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0040', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0040 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der NZR den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0041]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0041', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0041 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0042]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0042', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0042 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='6', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code='A01', note='Datenstatus „Abrechnungsdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A02', note='Datenstatus „Prüfdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='7', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus Abrechnungsdaten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='7', instruction_text='Die folgenden Aktionen sind je zugehörigem MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0043]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0043', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0043 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Hat der BKV für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='9', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code='A01', note='Datenstatus „Abrechnungsdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='12', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus Abrechnungsdaten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='12', instruction_text='Die folgenden Aktionen sind je zugehörigen MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0045]
  EbdTableMetaData(ebd_code='E_0045', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0046]
  EbdTableMetaData(ebd_code='E_0046', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0047]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0047', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0047 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe der LF-SZR (Kategorie A), zu der eine LF-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz bzw. ergänzte Markt-lokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP, spezifische Arbeit, usw.) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachstehenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0048]
  EbdTableMetaData(ebd_code='E_0048', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0049]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0049', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0049 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-CL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe einer vorliegenden LF-SZR (Kategorie A)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP, spezifische Arbeit, usw.) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachstehenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0051]
  EbdTableMetaData(ebd_code='E_0051', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0052]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0052', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0052 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges BG-CL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der BG-CL der Versionsangabe einer vorliegenden BG-SZR (Kategorie B)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der BG-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der BG-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zu-geordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der BG-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB (über LF) und ÜNB ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB (über LF) und ÜNB ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB (über LF) und ÜNB ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0053]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0053', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0053 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der BG-SZR mit dem Daten-status „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der BG-SZR mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0054]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0054', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0054 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0055]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0055', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0055 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Aktueller Datenstatus\nHinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0056]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0056', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0056 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der BK-SZR mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version (der BK-SZR mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0057]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0057', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0057 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0058]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0058', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0058 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0059]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0059', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0059 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version des DZÜ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version des DZÜ mit dem Daten-status „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0061]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0061', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0061 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung innerhalb der Clearingphase für DZÜ der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0062]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0062', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0062 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BG-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0063]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0063', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0063 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BK-SZR (Kategorie A) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0064]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0064', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0064 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BK-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0065]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0065', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0065 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist für die Version der Zeitreihe des DZÜ für den Bilanzierungsmonat eine DZÜ-Liste mit identischer Version und identischem Bilanzierungsmonat zu diesem MaBiS-ZP vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDZÜ-Liste nicht vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entsprechen die Energiemengen des DZÜ den auf Basis des Prüfergebnisses der DZÜ-Liste ermittelten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0066]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0066', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0066 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der NZR mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungs-monat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus "Abgerechnete Daten KBKA" für die höchste Version der NZR mit dem Datenstatus "Abgerechnete Daten" oder "Abrechnungsdaten KBKA" in diesem Bilanzierungsmonat')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0067]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0067', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0067 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für die Clearingphase BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0068]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0068', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0068 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in dem angefragten Gebiet (Bilanzierungsgebiet oder Regelzone) für diesen Bilanzkreis LF-SZR zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0069]
  EbdTableMetaData(ebd_code='E_0069', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0070]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0070', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0070 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der DZÜ-Liste innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nEingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die Marktlokation bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation ist nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB für SLS ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis von 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der Übertrag der Energiemenge der Marktlokation aus der ÜNB-DZR in die NB-DZR berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='2', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0071]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0071', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0071 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Redispatch-Bilanzkreis des ANB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für den angegebenen Redispatch-Bilanzkreis des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungs-gebiet, Redispatch-Bilanzkreis des ANB, Bilanzkreis des LF und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungs-gebiet, Redispatch-Bilanzkreis des ANB, Bilanzkreis des LF und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Bilanzkreis des LF zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Passt die Angabe des Mediums zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMedium nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0072]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0072', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0072 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Redispatch-Bilanzkreis des ANB zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0073]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0073', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0073 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0074]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0074', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0074 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0075]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0075', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0075 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der AAÜZ mit dem Daten-status „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0076]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0076', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0076 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0077]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0077', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0077 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0078]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0078', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0078 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Redispatch-Bilanzkreis des ANB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für den angegebenen Redispatch-Bilanzkreis des ANB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungsgebiet, Redispatch-Bilanzkreis des ANB, Redispatch-Bilanzkreis des anfNB und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet, Redispatch-Bilanzkreis des ANB, Redispatch-Bilanzkreis des anfNB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Redispatch-Bilanzkreis des anfNB zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des anfNB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Passt die Angabe des Mediums zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMedium nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0079]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0079', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0079 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Redispatch-Bilanzkreis des ANB zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0080]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0080', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0080 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0081]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0081', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0081 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0082]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0082', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0082 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0083]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0083', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0083 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0084]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0084', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0084 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0093]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0093', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0093 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-AASZR den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0094]
  EbdTableMetaData(ebd_code='E_0094', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0095]
  EbdTableMetaData(ebd_code='E_0095', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0096]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0096', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0096 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-AACL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-AACL der Versionsangabe einer vorliegenden LF-AASZR?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-AACL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-AACL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-AACL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF aus-getauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht die tatsächliche Ausfallarbeitsmenge der er-warteten Ausfallarbeitsmenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0097]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0097', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0097 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-AACL der Versionsangabe der LF-AASZR, zu der eine LF-AACL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-AACL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-AACL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-AACL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht die tatsächliche Ausfallarbeitsmenge der er-warteten Ausfallarbeitsmenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0098]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0098', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0098 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der AAÜZ den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0099]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0099', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0099 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der AAÜZ den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0100]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0100', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0100 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Gehört das empfangene Profil bzw. die Profilschar zu einer zuvor abonnierten Profilgruppe aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Profil bzw. Profilschar gehört nicht zu einer zuvor abonnierten Profilgruppe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde eine Profilschar empfangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note='Hinweis: Es wurde ein Profil empfangen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die übermittelte Version des Profils für den übermittelten Zeitraum höher als die bisher höchste verarbeitete Version des Profils des gleichen Zeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Version des Profils nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die übermittelte Version der Profilschar für den übermittelten Beginnzeitpunkt höher als die bisher höchste verarbeitete Version der Profilschar zu diesem Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Version der Profilschar nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Stimmt die angegebene Maßeinheit der verwendeten OBIS-Kennzahl mit der Maßeinheit des Normierungsfaktors aus der Liste der Profildefinitionen überein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Maßeinheit weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht die niedrigste Temperaturmaßzahl der Profilschar der Begrenzungskonstante aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Niedrigste Temperaturmaßzahl weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht die Anzahl der Temperaturmaßzahlen der Profilschar der erwarteten Anzahl der Temperaturmaßzahlen gemäß der Bezugstemperatur und der Begrenzungskonstante aus der Liste der Profildefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Anzahl der Temperaturmaßzahlen weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0101]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0101', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0101 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Gehört das empfangene Profil zu einer zuvor abonnierten Profilgruppe aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Empfangenes Profil gehört nicht zu einer zuvor abonnierten Profilgruppe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die übermittelte Version des Profils für den übermittelten Zeitraum höher als die bisher höchste verarbeitete Version des Profils des gleichen Zeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Version des Profils nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0102]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0102', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0102 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wird die ID der Netzgangzeitreihe bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Zuordnung der Netzgangzeitreihe zur Netzzeitreihe der Vereinbarung zur messtechnischen Abgrenzung der beiden benachbarten NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nZuordnung passt nicht zur Vereinbarung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Absender zum Zuordnungsbeginn an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Berechtigung für die Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger zum Zuordnungsbeginn an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKeine Beteiligung an der Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Existiert zum Zuordnungsbeginn bereits eine Zuordnung der angegebenen Netzgangzeitreihe zu einer Netzzeitreihe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nZuordnung bereits vorhanden\nHinweis: In der Antwort ist die zugeordnete Netzzeitreihe anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist ein nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZuordnung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0103]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0103', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0103 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Beendigung der Zuordnung der Netzgangzeitreihe zur Netzzeitreihe der Vereinbarung zur messtechnischen Abgrenzung der beiden benachbarten NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBeendigung der Zuordnung passt nicht zur Vereinbarung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Absender zum Zuordnungsende an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine Berechtigung für die Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Empfänger zum Zuordnungsende an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Beteiligung an der Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Existiert zum Zuordnungsende eine Zuordnung der angegebenen Netzgangzeitreihe zu der angegebenen Netzzeitreihe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZuordnung nicht vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nBeendigung der Zuordnung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0104]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0104', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0104 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in der Liste LF-SZR enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0105]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0105', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0105 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in der Liste LF-SZR enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0200]
  EbdTableMetaData(ebd_code='E_0200', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0090_Bestätigung Kündigung MSBS\nS_0054_Ablehnung Kündigung MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0201]
  EbdTableMetaData(ebd_code='E_0201', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0055_Bestätigung Anmeldung MSB\nS_0056_Ablehnung Anmeldung MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0202]
  EbdTableMetaData(ebd_code='E_0202', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0059_Bestätigung Ende MSB\nS_0060_Ablehnung Ende MSB')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0203]
  EbdTableMetaData(ebd_code='E_0203', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0061_ORDRSP Fortführungsbestätigung MSBA\nS_0062_ORDRSP Ablehnung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0204]
  EbdTableMetaData(ebd_code='E_0204', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0065_Ankündigung zum Eigenausbau\nS_0066_Mitteilung, kein Eigenausbau MSBA')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0205]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0205', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0205 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt ein gültiger Vertrag zwischen MSB und LF vor, der die Rechnungsabwicklung des Messstellenbetriebs an den LF regelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein gültiger Vertrag'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind alle Messlokationen der angefragten Marktlokationen mit kME ausgestattet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausschließlich mit kME ausgestattet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Lässt das Vertragsverhältnis mit dem Kunden die Abrechnung des Messstellenbetriebs zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Vertragsverhältnis mit Dritten lässt Abrechnung des Messstellenbetriebs nicht zu'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Lässt das Vertragsverhältnis mit dem Kunden das im Angebot benannte Beginndatum zum Messstellenbetrieb zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Vertragsverhältnis mit Dritten lässt das Beginn-datum nicht zu'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Handelt es sich um ein Angebot auf Basis eines Preisblattes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt dem LF ein gültiges Preisblatt mit allen im Angebot an-gegebenen Preisschlüsselstämmen bzw. mit allen im Angebot angegebenen Artikel-ID vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Kein Preisblatt vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entsprechen die angebotenen Positionen dem Vertragsverhältnis mit dem Kunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Angebotspositionen abweichend zum Vertrags-verhältnis'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bestellung versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0206]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0206', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0206 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht ein Vertragsverhältnis über die Rechnungsabwicklung über den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nKeine Vereinbarung über die Abrechnung MSB über den LF'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0207]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0207', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0207 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt ein gültiger Vertrag zwischen MSB und LF vor, der die Rechnungsabwicklung des Messstellenbetriebs an den LF regelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein gültiger Vertrag'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der angefragte Beginn der Übernahme der Abrechnung des Messstellenbetriebs im Zeitraum einer vom MSB bereits bestätigten Vereinbarung mit dem anfragenden LF zur Abwicklung des Messentgeltes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Abwicklung des Messentgelts schon vollzogen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Sind alle Messlokationen der angefragten Marktlokation mit kME ausgestattet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausschließlich mit kME ausgestattet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Besteht ein Vertrag mit dem Anschlussnehmer gemäß MsbG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Vertragsverhältnis mit Anschlussnehmer lässt das nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Besteht ein nicht konkludent geschlossener Vertrag für den Messstellenbetrieb mit dem Anschlussnutzer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist eine Abrechnung über den LF durch den Vertrag ausgeschlossen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Vertragsverhältnis mit dem Dritten lässt das nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wird das Entgelt bereits über die erzeugende Marktlokation entrichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Entgelt wird durch erzeugende Marktlokation abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wird das Entgelt über eine andere Marktlokation entrichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Entgelt wird über eine andere Marktlokation abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Möchte der MSB zum angefragten Termin kein Angebot erstellen und verzichtet auf die Erstellung und Versendung des Angebots?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt bereits eine mit dem LF vereinbarte Rechnungsabwicklung für diese Marktlokation zu einem späteren Zeitpunkt vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Die vereinbarte Rechnungsabwicklung für diese Marktlokation bleibt erhalten. \nFür das Zeitintervall zwischen angefragtem Termin und vereinbarter Rechnungsabwicklung wird kein Messentgelt in Rechnung gestellt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Der MSB erstellt zum angefragten Termin kein Angebot.\nHinweis: Möchte der MSB die Abrechnung zu einem späteren Zeitpunkt starten, so wird er gemäß Use-Case „Angebot zur Rechnungsabwicklung des Messstellenbetriebes über den LF durch den MSB“ ein Angebot zusenden.')], use_cases=None), EbdTableRow(step_number='11', description='Liegt der angefragte Beginn der Übernahme der Abrechnung des Messstellenbetriebs in einem bereits vom MSB abgerechneten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Angebot versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Hat der LF zum nächstmöglichen Termin angefragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Beginndatum liegt im bereits abgerechneten Zeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0208]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0208', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0208 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Lässt das Vertragsverhältnis mit dem Kunden das im Angebot benannte Beginndatum zum Messstellenbetrieb zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Vertragsverhältnis mit Dritten lässt das Beginn-datum nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um ein Angebot auf Basis eines Preisblattes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt dem LF ein gültiges Preisblatt mit allen im Angebot angegebenen Preisschlüsselstämmen bzw. mit allen im Angebot angegebenen Artikel-ID vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kein Preisblatt vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die angebotenen Positionen dem Vertrags-verhältnis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Angebotspositionen abweichend zum Vertrags-verhältnis'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bestellung versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0209]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0209', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0209 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht ein Vertragsverhältnis über die Rechnungsabwicklung über den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLF ist nicht Zahler des Messstellenbetriebs'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Beendigungsdatum nach dem Stichtag, der wie folgt berechnet wird: Eingangsdatum der Nachricht - (6 Wochen + 5 WT)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0210]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0210', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0210 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer LF lehnt die Zahlung des Messstellenbetriebs ab. Der LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer LF lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den LF begründet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='95'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='95', description='Wurde das in der Rechnung genannte Angebot auf Basis eines Preisblatts gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis: In dem Angebot des MSB an den LF wurde ein individuelles Angebot angegeben.')], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem Lieferanten liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde das in der Rechnung genannte Angebot des MSB zur Übernahme der Rechnungsabwicklung des Messstellenbetriebs für diese Marktlokation angenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem Lieferanten für diese Marktlokation vereinbart.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist das in der Rechnung genannte Angebot das jüngste bestätigte Angebot, das genau zu diesem Zeitpunkt beginnt?\nHinweis: Das jüngste bestätigte Angebot richtet sich nach dem Nachrichtendatum (Segment DTM+137) der QUOTES vom MSB.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nDie Referenz erfolgt nicht auf das jüngste Angebot zu diesem Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen Lieferanten und MSB für diese Marktlokation für den abgerechneten Zeitraum vereinbart?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem Lieferanten für diese Marktlokation für den abgerechneten Zeitraum vereinbart.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Liegt im Abrechnungszeitraum mindestens ein weiteres bestätigtes Angebot vor, welches zu einem Zeitpunkt beginnt, der innerhalb des Abrechnungszeitraumes liegt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung auf Kopfebene\nEs dürfen nicht mehrere bestätigte Angebote in einer Rechnung abgerechnet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde das Angebot auf Basis eines Preisblatts gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='301'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='309'), result_code=None, note='Hinweis: In dem Angebot des MSB an den LF wurde ein individuelles Angebot angegeben.')], use_cases=None), EbdTableRow(step_number='301', description='Wurde die in der Rechnungsposition genutzte Artikelnummer bzw. Artikel-ID in dem referenzierten Angebot angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='302'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code='A30', note='Cluster: Ablehnung auf Positionsebene\nDie Artikelnummer bzw. Artikel-ID der Rechnungsposition ist nicht in dem bestätigten Angebot enthalten.')], use_cases=None), EbdTableRow(step_number='302', description='Wurde die in der Rechnungsposition genutzte Artikelnummer bzw. Artikel-ID für den gesamten Positionszeitraum dieser Position im Angebot genannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDie Artikelnummer bzw. Artikel-ID der Rechnungsposition ist nicht in dem bestätigten Angebot für den gesamten Positionszeitraum enthalten.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.')], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='309', description='Entspricht der Preis aus der Rechnungsposition dem Preis des individuellen Angebots?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A29', note='Cluster: Ablehnung auf Positionsebene\nDer Preis aus der Rechnungsposition entspricht nicht dem vereinbarten Preis aus dem individuellen Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlagepasst nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0211]
  EbdTableMetaData(ebd_code='E_0211', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0217]
  EbdTableMetaData(ebd_code='E_0217', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Diese Codeliste befindet sich noch im Datenformat.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0218]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0218', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0218 Dummy Name', remark=None), rows=[EbdTableRow(step_number='5', description='Handelt es sich um eine Berechnungsformel für eine Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Handelt es sich um eine Berechnungsformel für eine Netzlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Handelt es sich bei dem „Verwendungszeitraum der Daten“ um einen Zeitraum mit dem Status „keine Daten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Werden für den Verwendungszeitraum der Daten mit dem Status „keine Daten“ Daten erwartet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A13', note='Cluster: Ablehnung\nFür den Verwendungszeitraum mit dem Status „keine Daten“ werden Daten erwartet.')], use_cases=None), EbdTableRow(step_number='20', description='Ist im Geschäftsvorfall der Status der Berechnungsformel mit „Berechnungsformel muss beim Absender angefragt werden“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A09', note='Cluster: Zustimmung\nBerechnungsformel muss bilateral ausgetauscht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist im Geschäftsvorfall der Status der Berechnungsformel mit „Berechnungsformel besitzt keine Rechenoperation“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in den zuvor ausgetauschten Stammdatenmeldungen (z.B.\xa0Anmeldebestätigung, Stammdatenänderung (inklusive Lokationsbündelstrukturänderung)) für den betroffenen Zeitraum genau eine Messlokation dieser Lokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code='A10', note='Cluster: Ablehnung\nDer Lokation ist nicht genau eine Messlokation zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A11', note='Cluster: Zustimmung\nEnergiemenge der Lokation ist mit der Energiemenge der Messlokation identisch')], use_cases=None), EbdTableRow(step_number='50', description='Liegt eine Änderung der Lokationsbündelstruktur durch den NB vor, die durch Stammdatenänderung übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der Zeitraum der Zeitraum-ID der Berechnungsformel identisch mit dem Zeitraum der Strukturänderung des Lokationsbündels?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code='A02', note='Cluster: Ablehnung\nZeitraum der Berechnungsformel unplausibel.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Anzahl der gemeldeten / vorliegenden Mess-lokationen aus den Stammdatenmeldungen (z. B. Anmeldebestätigung, Stammdatenänderung) gemäß dem Zeitraum kleiner als in der Berechnungsformel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A04', note='Cluster: Ablehnung\nEs sind zu viele Messlokationen in der Berechnungsformel für diesen Zeitraum vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die Anzahl gemäß der gemeldeten/vorliegenden Messlokationen aus den Stammdatenmeldungen (z.\xa0B. Anmeldebestätigung, Stammdatenänderung) gemäß dem Zeitraum größer als in der Berechnungsformel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A05', note='Cluster: Ablehnung\nEs fehlen Messlokationen in der Berechnungs-formel.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Sind alle ID der Messlokationen in der Berechnungsformel mit den zuvor in den Stammdatenmeldungen (z. B. Anmeldebestätigung, Stammdatenänderung) gemeldeten ID der Messlokationen für diesen Zeitraum identisch?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code='A06', note='Cluster: Ablehnung\nID der Messlokationen stimmen für den Zeitraum nicht überein'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Existiert für jede Flussrichtung der in der Berechnungsformel vorhandenen Messlokationen mindestens eine zuvor in den Stammdatenmeldungen (z.\xa0B. Anmeldebestätigung, Stammdatenänderung) ausgetauschte OBIS-Kennzahl* mit identischer Flussrichtung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code='A07', note='Cluster: Ablehnung\nDie Flussrichtung mindestens einer Messlokation ist nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code='A12', note='Cluster: Zustimmung \nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A99', note='Cluster: Ablehnung \nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: offen')], use_cases=None), EbdTableRow(step_number='120', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='15', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Zeitraum-ID, für jeden Zeitraum durchgeführt. Tritt in einem Zeitraum der erste Fehler auf, so sind für diesen Zeitraum keine weiteren Prüfungen durchzuführen. Alle in den Zeiträumen gefundene Fehler sind, unter Nennung der jeweiligen Zeitraum-ID, zu nennen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0219]
  EbdTableMetaData(ebd_code='E_0219', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0073_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0220]
  EbdTableMetaData(ebd_code='E_0220', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0221]
  EbdTableMetaData(ebd_code='E_0221', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0075_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0222]
  EbdTableMetaData(ebd_code='E_0222', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0225]
  EbdTableMetaData(ebd_code='E_0225', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0226]
  EbdTableMetaData(ebd_code='E_0226', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0076_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0227]
  EbdTableMetaData(ebd_code='E_0227', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0228]
  EbdTableMetaData(ebd_code='E_0228', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0078_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0229]
  EbdTableMetaData(ebd_code='E_0229', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0230]
  EbdTableMetaData(ebd_code='E_0230', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0079_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0231]
  EbdTableMetaData(ebd_code='E_0231', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0232]
  EbdTableMetaData(ebd_code='E_0232', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0057_Statusmeldung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0233]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0233', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0233 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die für den Rollout vorgesehene Messlokation ein Bestandsschutz gemäß §19 Abs. 5 MsbG vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wird auf den Bestandsschutz gemäß § 19 Abs. 5 MsbG für die Messlokation verzichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBestandsschutz gemäß § 19 Abs. 5 MsbG für die Messlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Selbsteinbau eines iMS oder einer mME geplant?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nSelbsteinbau eines iMS oder einer mME geplant'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wird auf den Selbsteinbau eines iMS oder einer mME verzichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nAuf Selbsteinbau eines iMS oder einer mME wird verzichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZum jetzigen Zeitpunkt noch keine Aussage hin-sichtlich Selbsteinbau möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0240]
  EbdTableMetaData(ebd_code='E_0240', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0063_Bestätigung Verpflichtungsanfrage\nS_0064_Ablehnung Verpflichtungsanfrage')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0241]
  EbdTableMetaData(ebd_code='E_0241', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0243]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0243', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0243 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.')], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0245]
  EbdTableMetaData(ebd_code='E_0245', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0246]
  EbdTableMetaData(ebd_code='E_0246', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0247]
  EbdTableMetaData(ebd_code='E_0247', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0067_ORDRSP Bestellbestätigung\nS_0068_ORDRSP Abl. der Bestellung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0248]
  EbdTableMetaData(ebd_code='E_0248', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Diese Codeliste befindet sich noch im Datenformat.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0249]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0249', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0249 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das gewünschte Änderungsdatum mindestens 20 WT nach dem Nachrichteneingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nÄnderung kann durchgeführt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0250]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0250', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0250 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das gewünschte Änderungsdatum mindestens 20 WT nach dem Nachrichteneingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nÄnderung kann durchgeführt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0251]
  EbdTableMetaData(ebd_code='E_0251', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0252]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0252', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0252 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist das vom ESA gewünschte Messprodukt in der Codeliste der Konfigurationen als „Pflicht“ gekennzeichnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wird das vom ESA gewünschte Messprodukt entsprechend der Codeliste der Konfigurationen angeboten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDas vom ESA gewünschte Messprodukt wird vom MSB nicht angeboten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die vertragliche Grundlage zur Anfrage und Übermittlung der Werte und Abrechnung der erbrachten Dienstleistung vom MSB an den ESA beim MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nVertragliche Grundlage des ESA liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt dem MSB eine gültige datenschutzrechtliche Einwilligung (wie z. B. das BDEW-Muster „Einwilligungserklärung in die Verarbeitung personenbezogener Daten nach DS-GVO - \nAnfrage und Übermittlung von Messprodukten \ngemäß BNetzA-Festlegung BK6-20-160“) zur Anfrage und Übermittlung von Messprodukten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie unterzeichnete Einwilligung für die Lokation liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind die Daten in der Einwilligung plausibel und vollständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVorliegende Einwilligung ist nicht plausibel oder vollständig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ermöglicht die vorhandene Gerätetechnik die Übermittlung der angefragten Werte entsprechend dem Messprodukt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie Gerätetechnik misst die angeforderten Messwerte nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Handelt es sich um eine Anfrage von Werten auf Ebene der Marktlokation / Tranche / Netzlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der MSB an allen der Marktlokation (inkl. Tranche) / Netzlokation zugeordneten Messlokationen auch der MSB der Messlokation(en)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDer MSB der Marktlokation / Netzlokation ist nicht zeitgleich der allen Messlokation(en) zugeordnete MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0253]
  EbdTableMetaData(ebd_code='E_0253', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0254]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0254', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0254 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich bei der Bestellung um eine Bestellung für turnusmäßige/regelmäßige Übermittlung (Abo) von Werten an den ESA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nEs handelte sich bei der Bestellung um eine einmalige Übermittlung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist das gewünschte Beendigungsdatum größer als der Beginnzeitpunkt der turnusmäßigen/regelmäßigen Übermittlung (Abo)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDie Bestellung ist zu stornieren.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wurde die Übermittlung von Werten bereits zu einem früheren oder zu dem in der Beendigung genannten Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie Übermittlung wurde bereits zu einem früheren oder zu dem in der Beendigung genannten Zeitpunkt beendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt das gewünschte Beendigungsdatum vor dem Zeitpunkt, für den die jüngsten Daten geliefert wurden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung \nEs wurden bereits Daten nach dem gewünschten Beendigungsdatum übermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nBeendigung wird bestätigt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0256]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0256', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0256 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Bindungsfrist des Angebots abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Akzeptiert der MSB die Bestellung auch bei abgelaufener Bindungsfrist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Bindungsfrist des Angebots ist abgelaufen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Handelt es sich bei der Bestellung um ein Abo?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Bietet der MSB das gewünschte Messprodukt zum Zeitraum / Zeitpunkt der Messwertermittlung als Abo an?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDer MSB sieht für das gewünschte Messprodukt keine Übermittlung als Abo vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Bietet der MSB das gewünschte Messprodukt zum Zeitraum / Zeitpunkt der Messwertermittlung als einmalige Übermittlung an?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDer MSB sieht für das gewünschte Messprodukt keine einmalige Übermittlung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die vertragliche Grundlage zur Anfrage und Übermittlung der Werte und Abrechnung der erbrachten Dienstleistung vom MSB an den ESA beim MSB zum Zeitraum / Zeitpunkt der Messwertermittlung noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie vertragliche Grundlage zwischen dem MSB und dem ESA ist nicht mehr gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der MSB für den im Angebot spezifizierten Zeitraum / Zeitpunkt der Messwertermittlung der entsprechenden Lokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDer MSB ist der Lokation für den im Angebot spezifizierten Zeitraum / Zeitpunkt der Messwertermittlung nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die dem MSB vorliegende datenschutzrechtliche Einwilligung (wie z. B. das BDEW-Muster „Einwilligungserklärung in die Verarbeitung personenbezogener Daten nach DS-GVO - \nAnfrage und Übermittlung von Messprodukten \ngemäß BNetzA-Festlegung BK6-20-160“) zur Anfrage und Übermittlung von Messprodukten zum Zeitraum / Zeitpunkt der Messwertermittlung weiterhin gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDer Anschlussnutzer hat gegenüber dem ESA seine Einwilligung widerrufen oder ihre Gültigkeit ist abgelaufen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ermöglicht die vorhandene Gerätetechnik zum Zeitraum / Zeitpunkt der Messwertermittlung die Übermittlung der angefragten Werte entsprechend dem Messprodukt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDie Gerätetechnik misst die angeforderten Messwerte nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Handelt es sich um eine Bestellung von Werten auf Ebene der Marktlokation / Tranche / Netzlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestellung ist angenommen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MSB zum Zeitraum / Zeitpunkt der Messwertermittlung an allen der Marktlokation (inkl. Tranche) / Netzlokation zugeordneten Messlokationen auch der MSB der Messlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer MSB der Marktlokation /Netzlokation ist nicht zeitgleich der allen Messlokationen zugeordnete MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestellung ist angenommen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0257]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0257', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0257 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde die Bestellung des ESA durch den MSB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Bestellung des ESA wurde durch den MSB nicht bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Handelte es sich bei der Bestellung um ein turnusmäßige/regelmäßige Übermittlung (Abo)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note='Hinweis: Es handelte sich bei der Bestellung um eine einmalige Übermittlung.')], use_cases=None), EbdTableRow(step_number='3', description='Wurde die turnusmäßige/regelmäßige Übermittlung (Abo) von Werten bereits begonnen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMit der Übermittlung von Werten aus dem Abo wurde bereits begonnen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nStornierung wird bestätigt.')], use_cases=None), EbdTableRow(step_number='4', description='Ist die einmalige Übermittlung von Werten bereits erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie einmalige Übermittlung der Werte ist bereits erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nStornierung wird bestätigt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0258]
  EbdTableMetaData(ebd_code='E_0258', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0259]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0259', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0259 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes/Ausführungsdatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes/Ausführungsdatums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum/Ausführungsdatum der genannten Messlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer MSB ist der Messlokation nicht einen Tag des Abrechnungszeitraumes/Ausführungsdatums zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum/Ausführungsdatum der genannten Messlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer MSB lehnt die Zahlung ab. Eine Ablehnung der Zahlung wird durch den MSB begründet.\nHinweis: Der MSB gibt den erwarteten Abrechnungszeitraum/das erwartete Ausführungsdatum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum/ Ausführungsdatum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält ein bereits abgerechnetes Zeitintervall/ einen bereits abgerechneten Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\n(Zahlungsziel < 10 WT zum Rechnungseingangsdatum)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Handelt es sich um eine Geräteübernahme (Kauf/ Nutzungsüberlassung)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde das in der Rechnung genannte Angebot des MSB in der Bestellbestätigung im Prozess Geräteübernahme für diese Messlokation bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Angebot des MSB in der Bestellbestätigung im Prozess Geräteübernahme für diese Messlokation wurde nicht bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die in der Rechnung genannte Bestellung die jüngste bestätigte Bestellung, die genau zu diesem Zeitpunkt beginnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDie Referenz erfolgt nicht auf die jüngste Bestellung zu diesem Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Handelt es sich um eine Geräteübernahme (Kauf/ Nutzungsüberlassung)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Entspricht die Rechnungsposition dem bestätigten Angebot?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDie Rechnungsposition entspricht nicht dem bestätigten Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition gleich oder nach dem Enddatum des Abrechnungszeitraums / Ausführungsdatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition ist gleich oder nach dem Enddatum des Abrechnungszeitraums/ Ausführungsdatums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition vor oder gleich dem Beginndatum des Abrechnungszeitraums?\nHinweis: Bei Nutzung des Ausführungsdatums in der Rechnung Prüfschritt mit ja beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der richtige Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nFalscher Abrechnungszeitraum wird abgerechnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Entspricht der Preis in der Position dem vereinbarten Preis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A16', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition passt nicht zum vereinbarten Preis.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen vereinbarte Positionen in der Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A18', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden.\nHinweis: Fehlende Positionen sind im Freitextfeld zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A19', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A20', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0260]
  EbdTableMetaData(ebd_code='E_0260', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0261]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0261', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0261 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.')], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0264]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0264', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0264 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Angebot, dass zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischen Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0265]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0265', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0265 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0266]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0266', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0266 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Angebot, dass zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischen Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0267]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0267', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0267 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0406]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0406', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0406 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist dem gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist mit dem NB vereinbart, dass der Empfänger der Rechnung der Zahler der Rechnung ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger ist nicht Zahler der Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der NB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Wurde ein unterjähriger Netzbetreiberwechsel an der Marktlokation im Leistungszeitraum durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Weicht der Absender (NAD+MS) von der Angabe im Segment Preise des Netzbetreibers (RFF+Z56) ab?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AF3', note='Cluster: Ablehnung auf Kopfebene\nIm Leistungszeitraum fand ein unterjähriger Netzbetreiberwechsel an der Marktlokation statt und die Preise des NBA wurden nicht berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum beim LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nObwohl es sich um keine Abschlagsrechnung handelt, ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist die Frist der Fälligkeit eingehalten?\nHinweis: Fälligkeitsdatum muss ≥ 10 WT als das Rechnungsdatum sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC7', note='Cluster: Ablehnung auf Kopfebene\nDie Frist für die Abschlagsrechnung wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das Fälligkeitsdatum > das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC8', note='Cluster: Ablehnung auf Kopfebene\nDie Vorgabe, dass die Zahlung nachschüssig zu leisten ist, wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Erfüllt die Rechnung weitere Anforderungen gem. §14 Abs. 4 UStG nicht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG.\nHinweis: Die Ablehnung ist zu begründen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Handelt es sich bei der Rechnung um eine Sonderrechnung (SOR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='48'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist das Nachrichtendatum der Sonderrechnung ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A79', note='Cluster: Ablehnung auf Kopfebene\nDas Nachrichtendatum der Sonderrechnung ist ≤ 01.01.2023 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Wurde die der Sonderrechnung zugrundeliegende Rechnung bereits mit mindestens einer der in dieser Rechnung genannten Arten der Sonderrechnung korrigiert?\nHinweise: \nEs sind nur die nicht stornierten Sonderrechnungen relevant, die sich auf dieselbe Rechnung beziehen, wie die vorliegende Sonderrechnung.\nDie Arten der Sonderrechnung sind der INVOIC zu entnehmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A80', note='Cluster: Ablehnung auf Kopfebene\nDie Art der vorliegenden Abrechnung wurde bereits in einer vorherigen Sonderrechnung korrigiert.\nHinweis: Es sind alle betroffenen Sonderrechnungen anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='46'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='46', description='Ist die Sonderrechnung aus Sicht des Rechnungsempfängers in Ordnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A95', note='Cluster: Ablehnung auf Kopfebene\nDie Sonderrechnung ist aus Sicht des Rechnungsempfängers nicht in Ordnung.\nHinweis: Die Ablehnung ist zu begründen.')], use_cases=None), EbdTableRow(step_number='48', description='Handelt es sich bei dem Rechnungstyp um eine 13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='54'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='49'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='49', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Abschlussrechnung, Monatsrechnung oder Integrierte 13. Rechnung (13I)) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='52'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='52', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='54', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten integrierte 13. Rechnung (13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='AE1', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Referenziert die Rechnung auf einen erhaltenen Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt zur Rechnung kein Lieferschein vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='58'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='58', description='Referenziert die Rechnung auf einen nicht stornierten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='61'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='61', description='Referenziert die Rechnung auf einen fristgerecht abgelehnten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='64'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='62'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='62', description='Ist die Frist für die Rückmeldung auf den Lieferschein, auf den die Rechnung referenziert, bereits abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE0', note='Cluster: Ablehnung auf Kopfebene\nDer Netzbetreiber hat die Rechnung übermittelt, bevor die Frist für die Rückmeldung auf den Lieferschein abgelaufen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='64', description='Hat der NB der Ablehnung des Lieferscheines widersprochen und konnte er die Ablehnungsgründe des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde erfolgreich abgelehnt und wurde nicht vom NB widersprochen und entkräftet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='67', description='Ist der gesamte Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR, MVR, 13I, 13R) im referenzierten Lieferschein enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung auf Kopfebene\nIm referenzierten Lieferschein ist nicht der gesamte Abrechnungszeitraum der Rechnung enthalten. \nHinweis: Der LF gibt den Zeitraum an, welcher nicht im referenzierten Lieferschein enthalten ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Entspricht der Rechnungstyp (z. B. Abschlagsrechnung oder Monatsrechnung) der zu prüfenden Rechnung für den übermittelten Zeitraum der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/ Arbeitspreis bzw. Arbeits-/Leistungspreis)?\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Grund-/ Arbeitspreis möglich:\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nTurnusrechnung (JVR)\nZwischenabrechnung (ZVR)\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Leistungs-/ Arbeitspreis möglich:\nMVR Monatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung auf Kopfebene\nRechnungstyp passt nicht zu der vereinbarten Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='73'), result_code=None, note='Nutzungshinweis: Der Rechnungstyp (13. Rechnung) 13R kann für Zeiträume ≥ 01.01.2023 00:00 Uhr nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='73', description='Ist das Ende des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='76'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='76', description='Liegt ein elektronisches Preisblatt Netznutzung vor in dem NAD+MS und RFF+Z56 identisch mit NAD+MS und RFF+Z56 der INVOIC sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt kein Preisblatt Netznutzung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='79'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='79', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR)\nZwischenrechnung (ZVR)\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='82'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung auf Kopfebene\nEs handelt sich um einen nicht zulässigen Rechnungstyp.\nNutzungshinweis: Der Rechnungstyp 13. Rechnung (13R) kann für Zeiträume, deren Beginndatum ≥ 01.01.2023 00:00 Uhr ist, nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='82', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler in den Kopfdaten.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Ab hier beginnt die Prüfung auf Positionsebene.')], use_cases=None), EbdTableRow(step_number='100', description='Ist in der Rechnungsposition das Enddatum des Positionszeitraumes ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note='Hinweis: \nDas vorliegende EBD E_0406_Netznutzungsrechnung prüfen wird für diese Position nicht weiter durchgeführt und es werden keine Codes dieses EBD genutzt. Die Prüfung dieser Rechnungsposition erfolgt für diesen Prüfschritt ausschließlich nach der Prüflogik vor der Nutzung des elektronischen Netznutzungspreisblatts mit den entsprechenden Codes aus der Codeliste S_0103. \nWerden bei der Anwendung der Codeliste S_0103 Fehler festgestellt, so sind sich diese zu merken. Nach Abschluss der Prüfung der Rechnungsposition gegen die Codeliste S_0103 ist mit dem EBD E_0406_Netznutzungsrechnung prüfen mit Prüfschritt 105 weiter fortzufahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden: \n• Turnusrechnung (JVR) \n• Abschlussrechnung (ABR) \n• Zwischenrechnung (ZVR) \n• Monatsrechnung (MVR) \n• Integrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note='Hinweis: Es handelt sich um eine Abschlagsrechnung (ABS).')], use_cases=None), EbdTableRow(step_number='115', description='Ist in der Rechnungsposition der Beginn des Positionszeitraumes < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nDie Aufteilung der Position in < und ≥ 01.01.2023 00:00 Uhr ist nicht erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wird eine Artikelnummer verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A22', note='Cluster: Ablehnung auf Positionsebene\nFür den Positionszeitraum und dem Rechnungstyp ist keine Artikelnummer erlaubt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A23', note='Cluster: Ablehnung auf Positionsebene\nEin Rechenfehler liegt vor.\nHinweis: Der Rechenfehler wird in der Ablehnung mitgeteilt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='135'), result_code='A24', note='Cluster: Ablehnung auf Positionsebene\nDer auf der Position enthaltene Umsatzsteuersatz ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum dieser Position > das Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='145'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='145', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR) \nAbschlussrechnung (ABR) \nZwischenrechnung (ZVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei dem Rechnungstyp um eine Monatsrechnung (MVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Integrierte 13. Rechnung (13I).')], use_cases=None), EbdTableRow(step_number='200', description='Ist die Abschlagshöhe plausibel zur mitgeteilten Jahresverbrauchsprognose (JVP)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='205'), result_code='A26', note='Cluster: Ablehnung auf Positionsebene\nDie Abschlagshöhe ist nicht plausibel.\nHinweis: Der LF teilt die erwartete Abschlagshöhe mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='205', description='Ist das Beginndatum des Positionszeitraums < dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A81', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Ist der Abrechnungszeitraum der Abschlagsrechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Monatsrechnung oder 13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='215'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='215', description='Überlappt der Abrechnungszeitraum der Abschlagsrechnung um mehr als 10 Tage mit einer vorhergehenden Abschlagsrechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code='A82', note='Cluster: Ablehnung auf Positionsebene\nZu große Überlappung von Abschlagszeitraum.\nHinweis: Es ist die Abschlagsrechnung anzugeben, mit dem die Überlappung des Abrechnungszeitraum besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Ist die Artikelnummer für eine Abschlagsrechnung gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDie in dieser Position verwendete Artikelnummer ist nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='225', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Ist das Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code='A83', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='305'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='305', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A84', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='315', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code='A85', note='Cluster: Ablehnung auf Positionsebene\nDas Stammdatum der Position ist aus Sicht des LF falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='322'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='322', description='Handelt es sich um die Artikel-ID 1-02-0-015?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='325'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='325', description='Sind für die Artikel-ID die in den Stammdaten ausgetauschten Zu- und Abschläge fehlerfrei in der Position berücksichtigt?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='326'), result_code='A32', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='326'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='326', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='327'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='327', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='328'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='328', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='AE2', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins der Menge der abgerechneten Position der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='A33', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='335', description='Liegen alle zur Prüfung notwendigen plausiblen Energiemengen vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A34', note='Cluster: Ablehnung auf Positionsebene\nEs fehlt/fehlen die Energiemenge(n) und wurde(n) bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlende Energiemenge reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegen alle zur Prüfung notwendigen Werte vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code='A39', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A35', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='355', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='365'), result_code=None, note='Hinweis: Höchstsätze der Konzessionsabgabenverordnung werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A36', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='365', description='Ergibt sich der Preis zur Artikel-ID aus gesetzlich festgelegten Abgaben und Umlagen?\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A37', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A38', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='399'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='399'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='399', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='415'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A46', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note='Hinweis: Der NB rechnet die Konzessionsabgabe für Sondervertragskunden ab, obwohl für diese Marktlokation die Konzessionsabgabe für Tarifkunde vereinbart wurde. Diese Vorgehensweise ist erlaubt, da eine Änderung der Artikel-ID über eine Stammdatenänderung nicht möglich ist.')], use_cases=None), EbdTableRow(step_number='410', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AC9', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='415', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A43', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A42', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='422'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='422', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='424'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='424', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='425'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='425', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='427'), result_code='A44', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='427', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='491'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='435'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='445'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt.')], use_cases=None), EbdTableRow(step_number='440', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A87', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='445', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A88', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende ist < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Wird mit der Artikel-ID eine physikalische Arbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='455'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='455', description='Ist die Menge der Resultierenden negativ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Bei der hier gebildeten Resultierenden handelt es sich um Rücknahmepositionen und damit um das, was in der Prüfung 460 als korrespondierende Resultierende benötigt wird und darf damit nicht im Rechnungsprüfungsprozess als Resultierende genutzt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='458'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='458', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='460'), result_code=None, note='Hinweis: Zu der Resultierenden muss, um den Prüfschritt 460 durchführen zu können, auch die korrespondierende Resultierende gebildet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note='Hinweis: Umfasst die Resultierende maximal einen Kalendermonat, kann es zur Resultierenden keine korrespondierende Resultierende geben.')], use_cases=None), EbdTableRow(step_number='460', description='Beginnt der Zeitraum der korrespondieren Resultierenden zum selben Zeitpunkt wie der Zeitraum dieser Resultierenden und enthält der Zeitraum der korrespondierenden Resultierenden keinen Zeitraum des Monats, in dem die Resultierende endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A89', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende passt nicht zur korrespondierenden Resultierenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='465'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='465', description='Wird durch die korrespondierende Resultierende alle Positionen der vorangegangenen Rechnungen (MVR) zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA1', note='Cluster: Ablehnung auf Positionsebene\nEs wurden nicht alle Positionen vorangegangener MVR Rechnungen zurückgenommen.\nHinweis: Es sind die Rechnungsnummern der MVR anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='470', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='471'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='471', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='472'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='472', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='473'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='473', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='AE3', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.')], use_cases=None), EbdTableRow(step_number='475', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='A45', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis: „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='480', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor? \nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='485'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='485', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='490'), result_code='AA2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert.\nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='490'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='490', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code='AA3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='491', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='492'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='492', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code='AA8', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='495', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A47', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='502'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='502', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='513'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A48', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='513', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='515'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='515', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden?\nHinweis:\nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='525'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A60', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='525', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A50', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt.\nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='528', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code='A51', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der Resultierenden wird doppelt abgerechnet\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='535'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='535', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='555'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='555', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA6', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Handelt es sich bei der in Artikel-ID der zu prüfenden Positionen um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='561'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='561', description='Wird in derselben Rechnung eine Konzessionsabgabe Position mit einer Artikel-ID, die nicht der Artikel-ID für Sondervertragskunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='563'), result_code='AD0', note='Cluster: Ablehnung auf Positionsebene\nIn derselben Rechnung wird die Konzessionsabgabe einmal für Tarifkunden und für Sondervertragskunden berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='563'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='563', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='565'), result_code=None, note='Hinweis: die Artikel-ID umfasst mehr als einen Abrechnungsmonat'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note='Hinweis: die Artikel-ID berücksichtigt maximal einen Kalendermonat')], use_cases=None), EbdTableRow(step_number='565', description='Wurden alle Positionen der Konzessionsabgabe für Tarifkunden aus den vorherigen MVR zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe für Tarifkunden wurde bereits in einer vorangegangenen MVR abgerechnet und wurde nicht zurückgenommen.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='595', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='599'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='599'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='599', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='607'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='607', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Tarifkunden-Konzessionsabgabe oder für die gemeindespezifische Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A77', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD1', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='615', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='A53', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A54', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='622'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='622', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='624'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='624', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='625'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='625', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='627'), result_code='A55', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='627', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='676'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='635'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='645'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='635', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='640'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt')], use_cases=None), EbdTableRow(step_number='640', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AA9', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='645'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='645', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB1', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='650'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='650', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='651'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='651', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='652'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='652', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='653'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='653', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='AE4', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='660', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='A56', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis: „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='665', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='670'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='670', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='675'), result_code='AB2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='675'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='675', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code='AB3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='676', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='677'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='677', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code='AC6', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='680', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='685'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='690'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='685', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A58', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='687'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='687', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='690', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='695'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='698'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.')], use_cases=None), EbdTableRow(step_number='695', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A59', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='698', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='700'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='700', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden:\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AC2', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='710', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A61', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='712', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='715', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code='A62', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der Resultierenden wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='725'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='725', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='770'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='730', description='Ist die aus den Leistungs- und Arbeitswerten des Lieferscheins berechnete Benutzungsstundendauer (h/a) für den Zeitraum eines Anschlussnutzers und des Abrechnungszeitraumes ≥ 2.500 Stunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='735'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer ≥ 2.500 h/a in Rechnung stellen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='755'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer< 2.500 h/a in Rechnung stellen.')], use_cases=None), EbdTableRow(step_number='735', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='740'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='740', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB5', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='755', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='760'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='760', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB7', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='765', description='Erfolgt über die mit dieser Artikel-ID Resultierende eine vollständige Rücknahme dessen, was in allen zu dieser 13I gehörenden MVR bereist mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A63', note='Cluster: Ablehnung auf Positionsebene\nEs liegt eine der beiden Fehlersituationen vor:\n1) Es werden zu wenige bzw. zu viele Positionen aus den vorangegangenen MVR zurückgenommen.\n2) Es wurde die Artikel-ID für die falschen Benutzungsstunden abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='770', description='Handelt es sich um eine Artikel-ID für die Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='775'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='772'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='772', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB8', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='775', description='Gibt es weitere Artikel-ID für eine Konzessionsabgabe, die von dieser Artikel-ID abweicht, mit der sich somit eine weitere Resultierende bilden lässt?\nHinweis: In den Prüfschritten 775 bis 794 wird zur Reduzierung der Anzahl der beschriebenen Prüfungen vom Standard abgewichen, immer nur die zur Prüfung stehende Resultierende zu betrachten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='781'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='780'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='780', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD6', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.')], use_cases=None), EbdTableRow(step_number='781', description='Ist mindestens eine der Resultierenden eine Rücknahmeposition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='782'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='786'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='782', description='Wird mit allen Resultierenden der Rücknahmepositionen alle bereits bezahlten Konzessionsbeträge mit der entsprechenden Artikel-ID vollständig zurückgenommen?\nHinweis: Die Rücknahmeposition (es können auch mehrere sein) kann auch mit einer anderen Resultierenden zur Konzessionsabgabe dieser Rechnung erfolgen als die zur Prüfung stehende Resultierende. Wichtig ist, dass die bereits gezahlten Konzessionsbeträge vollständig zurückgenommen wurden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='784'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='783'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='783', description='Ist die Resultierende der Rücknameposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD5', note='Cluster: Ablehnung auf Positionsebene\nMit den Rücknahmepositionen werden nicht alle bereits bezahlten Konzessionsbeträge vollständig zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='784', description='Wird mit der Resultierenden der Vorwärtsposition für das Kalenderjahr die richtige Konzessionsabgabe abgerechnet?\nHinweis: Die richtige Konzessionsabgabe ergibt sich aus der Prüfung der Leistungswerte und Energiemenge gegen die Kriterien der Sondervertragskunden -Konzessionsabgabe und der Nutzung des gesetzlichen Preisvorgaben bzw. den gemeindespezifischen Konzessionsabgabe des Netzbetreiber.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='785'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='785', description='Ist die Resultierende der Vorwärtsposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD3', note='Cluster: Ablehnung auf Positionsebene\nEs wird die falsche Konzessionsabgabe für das Kalenderjahr abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='786', description='Handelt es sich bei den Resultierenden um eine Artikel-ID für Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='787'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wird falsch abgerechnet.')], use_cases=None), EbdTableRow(step_number='787', description='Wird in derselben Rechnung eine Konzessionsabgaben-Position mit einer Artikel-ID, die nicht einer Tarifkunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD8', note='Cluster: Ablehnung auf Positionsebene\nKonzessionsabgabe wird doppelt abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='788'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='788', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='789'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='789', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='790'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='790', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AE5', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='793', description='Ist die Energiemenge der Resultierenden plausibel zur Energiemenge des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD4', note='Cluster: Ablehnung auf Positionsebene\nDie Energiemenge der Resultierenden passt nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='794', description='Ist die saldierte Energiemenge der Konzessionsabgabe passend zum Lieferschein?\nHinweis: Die saldierte abgerechnete Energiemenge ergibt sich durch Addition aller Energiemengen (unter Berücksichtigung derer Vorzeichen) aller Resultierenden zur Konzessionsabgabe dieser Rechnung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD9', note='Cluster: Ablehnung auf Positionsebene\nDie saldierte Energiemenge der Resultierenden passen nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='795', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='799'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='799'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='799', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='800', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='805', description='Fehlen noch Artikel-ID für Rechnungspositionen ≥ 01.01.2023 00:00 Uhr, die vorher mit den Stammdaten ausgetauscht und somit in der Rechnung erwartet wurden?\nHinweis: Hat sich die tatsächlich abgerechnete Konzessionsabgabe gegenüber der in den Stammdaten ausgetauschten Konzessionsabgabe geändert, ist die Artikel-ID, welche zuvor in den Stammdaten ausgetauscht wurde, nicht als fehlende Artikel-ID zu übermitteln.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A78', note='Cluster: Ablehnung auf Summenebene\nErwartete Artikel-ID in der Rechnung nicht vorhanden.\nHinweis: Die erwarteten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='810'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='810', description='Sind die Netzentgelte unter Berücksichtigung der pauschalen Netzentgeltreduzierung nach §14a EnWG richtig berechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code='AD2', note='Cluster: Ablehnung auf Summenebene\nDie Netzentgelte unter Berücksichtigung der pauschalen Netzentgeltreduzierung nach §14a EnWG sind nicht richtig berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='815', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='816'), result_code='A66', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='816'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='816', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='817'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='820'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='817', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='818'), result_code='AC3', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='818'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='818', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern der vorausbezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='AC4', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern der Rechnung entspricht nicht der Summe der Steuern der vorausbezahlten Rechnungen. \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='820', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='825'), result_code='A67', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='825'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='825', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern, die in den tatsächlich gezahlten Beträgen in den referenzierten Rechnungen mit diesem Steuersatz enthalten sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='A68', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern entspricht nicht der Summe der vorausbezahlten Steuern aus den referenzierten Rechnungen.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='835'), result_code='A69', note='Cluster: Ablehnung auf Summenebene\nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='835'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='835', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='900'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='900', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='905'), result_code='A70', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='905'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='905', description='Entspricht der fällige Betrag dieser Rechnung dem Rechnungsbetrag abzgl. der Summe aller vorausbezahlten Beträge, sofern diese vorhanden sind und abzgl. des Gemeinderabatt/Kommunalrabatt, sofern dieser vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='910'), result_code='A71', note='Cluster: Ablehnung auf Summenebene\nFälliger Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='910'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='910', description='Entspricht der Gemeinderabatt/Kommunalrabatt der Summe der Gemeinderabatt-/Kommunalrabattbeträge aus der Positionsebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='920'), result_code='A72', note='Cluster: Ablehnung auf Summenebene\nSumme des Gemeinderabatts ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='920'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='920', description='Handelt es sich bei dem Rechnungstyp um einen der folgenden:\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='921'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Turnusrechnung (JVR), Abschlussrechnung (ABR) oder Zwischenabrechnung (ZVR).')], use_cases=None), EbdTableRow(step_number='921', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='922'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='925'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='922', description='Ist der vorausbezahlte Betrag identisch mit der Summe aller zuvor bezahlten Abschlagsrechnungen, deren Abrechnungszeitraum im Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) liegen?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden, sofern die Abschlagsrechnung nicht bereits in einer anderen vom LF akzeptierten und nicht stornierten Rechnung berücksichtigt wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='AC5', note='Cluster: Ablehnung auf Summenebene\nFür den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) sind nicht alle zuvor bezahlten Abschlagsrechnungen enthalten \nHinweise: Der LF gibt die Rechnungsnummern aller Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='925', description='Sind für den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) alle Referenzen der zugehörigen und zuvor bezahlten Abschlagsrechnungen enthalten?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden, sofern die Abschlagsrechnung nicht bereits in einer anderen vom LF akzeptierten und nicht stornierten Rechnung berücksichtigt wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='A74', note='Cluster: Ablehnung auf Summenebene\nReferenzen auf zuvor bezahlte Abschlagsrechnungen fehlen. \nHinweise: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat und die nicht in dieser Rechnung berücksichtigt wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='927'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='927', description='Entspricht die Angabe des vorausbezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='930'), result_code='A73', note='Cluster: Ablehnung auf Summenebene\nAusgewiesener vorausgezahlter Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='930'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='930', description='Sind alle in der Rechnung (JVR, ZVR, ABR) berücksichtigten Abschlagsrechnungen durch den Empfänger mit einem Zahlungsavis bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='935'), result_code='A76', note='Cluster: Ablehnung auf Summenebene\nMindestens eine Abschlagsrechnung, die in dieser Rechnung berücksichtig wurde, wurde vom LF abgelehnt oder nicht beantwortet. \nAngeforderte, aber nicht beglichene Abschlagsrechnungen sind vom NB zu stornieren.\nHinweis: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die nicht in der vorliegenden Rechnung hätten berücksichtigt werden dürfen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='935'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='935', description='Ist mindestens eine der referenzierten Abschlagsrechnungen bereits in einer anderen Rechnung verrechnet worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code='A75', note='Cluster: Ablehnung auf Summenebene\nMindestens eine referenzierte Abschlagsrechnung ist bereits verrechnet worden. \nHinweis: Der LF gibt in der Ablehnung die Abschlagsrechnung(en), welche bereits verrechnet wurden, sowie die Rechnung(en) (im RFF+AFL), in der der Abschlag/die Abschläge (im FTX+Z14) bereits berücksichtigt wurden, an.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='940', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='990'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiger Fehler in den Summenteil.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='990'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='990', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='805', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Artikel-ID keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='815', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 815 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem NB als Ergebnis übermittelt.\nFolgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen; dies gilt für alle Rechnungstypen, ausgenommen der Sonderrechnung.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0407]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0407', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0407 Dummy Name', remark=None), rows=[EbdTableRow(step_number='0', description='Konnte der NB alle Einwände des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC1', note='Cluster: Ablehnung auf Kopfebene \nDer LF lehnt die Zahlung der Rechnung weiterhin ab, da der NB nicht alle Einwände des LF entkräften konnte.\nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='1'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='1', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist dem gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist mit dem NB vereinbart, dass der Empfänger der Rechnung der Zahler der Rechnung ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger ist nicht Zahler der Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der NB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Wurde ein unterjähriger Netzbetreiberwechsel an der Marktlokation im Leistungszeitraum durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Weicht der Absender (NAD+MS) von der Angabe im Segment Preise des Netzbetreibers (RFF+Z56) ab?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AF3', note='Cluster: Ablehnung auf Kopfebene\nIm Leistungszeitraum fand ein unterjähriger Netzbetreiberwechsel an der Marktlokation statt und die Preise des NBA wurden nicht berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum beim LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nObwohl es sich um keine Abschlagsrechnung handelt, ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist die Frist der Fälligkeit eingehalten?\nHinweis: Fälligkeitsdatum muss ≥ 10 WT als das Rechnungsdatum sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC7', note='Cluster: Ablehnung auf Kopfebene\nDie Frist für die Abschlagsrechnung wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das Fälligkeitsdatum > das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC8', note='Cluster: Ablehnung auf Kopfebene\nDie Vorgabe, dass die Zahlung nachschüssig zu leisten ist, wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Erfüllt die Rechnung weitere Anforderungen gem. §14 Abs. 4 UStG nicht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG.\nHinweis: Die Ablehnung ist zu begründen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Handelt es sich bei der Rechnung um eine Sonderrechnung (SOR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='48'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist das Nachrichtendatum der Sonderrechnung ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A79', note='Cluster: Ablehnung auf Kopfebene\nDas Nachrichtendatum der Sonderrechnung ist ≤ 01.01.2023 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Wurde die der Sonderrechnung zugrundeliegende Rechnung bereits mit mindestens einer der in dieser Rechnung genannten Arten der Sonderrechnung korrigiert?\nHinweise: \nEs sind nur die nicht stornierten Sonderrechnungen relevant, die sich auf dieselbe Rechnung beziehen, wie die vorliegende Sonderrechnung.\nDie Arten der Sonderrechnung sind der INVOIC zu entnehmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A80', note='Cluster: Ablehnung auf Kopfebene\nDie Art der vorliegenden Abrechnung wurde bereits in einer vorherigen Sonderrechnung korrigiert.\nHinweis: Es sind alle betroffenen Sonderrechnungen anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='46'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='46', description='Ist die Sonderrechnung aus Sicht des Rechnungsempfängers in Ordnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A95', note='Cluster: Ablehnung auf Kopfebene\nDie Sonderrechnung ist aus Sicht des Rechnungsempfängers nicht in Ordnung.\nHinweis: Die Ablehnung ist zu begründen.')], use_cases=None), EbdTableRow(step_number='48', description='Handelt es sich bei dem Rechnungstyp um eine 13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='54'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='49'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='49', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Abschlussrechnung, Monatsrechnung oder Integrierte 13. Rechnung (13I)) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='52'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='52', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='54', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten integrierte 13. Rechnung (13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='AE1', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Referenziert die Rechnung auf einen erhaltenen Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt zur Rechnung kein Lieferschein vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='58'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='58', description='Referenziert die Rechnung auf einen nicht stornierten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='61'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='61', description='Referenziert die Rechnung auf einen fristgerecht abgelehnten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='64'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='62'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='62', description='Ist die Frist für die Rückmeldung auf den Lieferschein, auf den die Rechnung referenziert, bereits abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE0', note='Cluster: Ablehnung auf Kopfebene\nDer Netzbetreiber hat die Rechnung übermittelt, bevor die Frist für die Rückmeldung auf den Lieferschein abgelaufen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='64', description='Hat der NB der Ablehnung des Lieferscheines widersprochen und konnte er die Ablehnungsgründe des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde erfolgreich abgelehnt und wurde nicht vom NB widersprochen und entkräftet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='67', description='Ist der gesamte Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR, MVR, 13I, 13R) im referenzierten Lieferschein enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung auf Kopfebene\nIm referenzierten Lieferschein ist nicht der gesamte Abrechnungszeitraum der Rechnung enthalten. \nHinweis: Der LF gibt den Zeitraum an, welcher nicht im referenzierten Lieferschein enthalten ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Entspricht der Rechnungstyp (z. B. Abschlagsrechnung oder Monatsrechnung) der zu prüfenden Rechnung für den übermittelten Zeitraum der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/ Arbeitspreis bzw. Arbeits-/Leistungspreis)?\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Grund-/ Arbeitspreis möglich:\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nTurnusrechnung (JVR)\nZwischenabrechnung (ZVR)\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Leistungs-/ Arbeitspreis möglich:\nMVR Monatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung auf Kopfebene\nRechnungstyp passt nicht zu der vereinbarten Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='73'), result_code=None, note='Nutzungshinweis: Der Rechnungstyp (13. Rechnung) 13R kann für Zeiträume ≥ 01.01.2023 00:00 Uhr nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='73', description='Ist das Ende des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='76'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='76', description='Liegt ein elektronisches Preisblatt Netznutzung vor in dem NAD+MS und RFF+Z56 identisch mit NAD+MS und RFF+Z56 der INVOIC sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt kein Preisblatt Netznutzung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='79'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='79', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR)\nZwischenrechnung (ZVR)\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='82'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung auf Kopfebene\nEs handelt sich um einen nicht zulässigen Rechnungstyp.\nNutzungshinweis: Der Rechnungstyp 13. Rechnung (13R) kann für Zeiträume, deren Beginndatum ≥ 01.01.2023 00:00 Uhr ist, nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='82', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler in den Kopfdaten.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Ab hier beginnt die Prüfung auf Positionsebene.')], use_cases=None), EbdTableRow(step_number='100', description='Ist in der Rechnungsposition das Enddatum des Positionszeitraumes ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note='Hinweis: \nDas vorliegende EBD E_0407_Netznutzungsrechnung prüfen wird für diese Position nicht weiter durchgeführt und es werden keine Codes dieses EBD genutzt. Die Prüfung dieser Rechnungsposition erfolgt für diesen Prüfschritt ausschließlich nach der Prüflogik vor der Nutzung des elektronischen Netznutzungspreisblatts mit den entsprechenden Codes aus der Codeliste S_0104. \nWerden bei der Anwendung der Codeliste S_0104 Fehler festgestellt, so sind sich diese zu merken. Nach Abschluss der Prüfung der Rechnungsposition gegen die Codeliste S_0104 ist mit dem EBD E_0407_Netznutzungsrechnung prüfen mit Prüfschritt 105 weiter fortzufahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden: \n• Turnusrechnung (JVR) \n• Abschlussrechnung (ABR) \n• Zwischenrechnung (ZVR) \n• Monatsrechnung (MVR) \n• Integrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note='Hinweis: Es handelt sich um eine Abschlagsrechnung (ABS).')], use_cases=None), EbdTableRow(step_number='115', description='Ist in der Rechnungsposition der Beginn des Positionszeitraumes < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nDie Aufteilung der Position in < und ≥ 01.01.2023 00:00 Uhr ist nicht erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wird eine Artikelnummer verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A22', note='Cluster: Ablehnung auf Positionsebene\nFür den Positionszeitraum und dem Rechnungstyp ist keine Artikelnummer erlaubt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A23', note='Cluster: Ablehnung auf Positionsebene\nEin Rechenfehler liegt vor.\nHinweis: Der Rechenfehler wird in der Ablehnung mitgeteilt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='135'), result_code='A24', note='Cluster: Ablehnung auf Positionsebene\nDer auf der Position enthaltene Umsatzsteuersatz ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum dieser Position > das Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='145'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='145', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR) \nAbschlussrechnung (ABR) \nZwischenrechnung (ZVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei dem Rechnungstyp um eine Monatsrechnung (MVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Integrierte 13. Rechnung (13I).')], use_cases=None), EbdTableRow(step_number='200', description='Ist die Abschlagshöhe plausibel zur mitgeteilten Jahresverbrauchsprognose (JVP)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='205'), result_code='A26', note='Cluster: Ablehnung auf Positionsebene\nDie Abschlagshöhe ist nicht plausibel.\nHinweis: Der LF teilt die erwartete Abschlagshöhe mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='205', description='Ist das Beginndatum des Positionszeitraums < dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A81', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Ist der Abrechnungszeitraum der Abschlagsrechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Monatsrechnung oder 13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='215'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='215', description='Überlappt der Abrechnungszeitraum der Abschlagsrechnung um mehr als 10 Tage mit einer vorhergehenden Abschlagsrechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code='A82', note='Cluster: Ablehnung auf Positionsebene\nZu große Überlappung von Abschlagszeitraum.\nHinweis: Es ist die Abschlagsrechnung anzugeben, mit dem die Überlappung des Abrechnungszeitraum besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Ist die Artikelnummer für eine Abschlagsrechnung gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDie in dieser Position verwendete Artikelnummer ist nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='225', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Ist das Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code='A83', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='305'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='305', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A84', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='315', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code='A85', note='Cluster: Ablehnung auf Positionsebene\nDas Stammdatum der Position ist aus Sicht des LF falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='322'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='322', description='Handelt es sich um die Artikel-ID 1-02-0-015?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='325'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='325', description='Sind für die Artikel-ID die in den Stammdaten ausgetauschten Zu- und Abschläge fehlerfrei in der Position berücksichtigt?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='326'), result_code='A32', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='326'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='326', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='327'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='327', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='328'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='328', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='AE2', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins der Menge der abgerechneten Position der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='A33', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='335', description='Liegen alle zur Prüfung notwendigen plausiblen Energiemengen vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A34', note='Cluster: Ablehnung auf Positionsebene\nEs fehlt/fehlen die Energiemenge(n) und wurde(n) bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlende Energiemenge reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegen alle zur Prüfung notwendigen Werte vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code='A39', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A35', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='355', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='365'), result_code=None, note='Hinweis: Höchstsätze der Konzessionsabgabenverordnung werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A36', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='365', description='Ergibt sich der Preis zur Artikel-ID aus gesetzlich festgelegten Abgaben und Umlagen?\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A37', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A38', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='399'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='399'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='399', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='415'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A46', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note='Hinweis: Der NB rechnet die Konzessionsabgabe für Sondervertragskunden ab, obwohl für diese Marktlokation die Konzessionsabgabe für Tarifkunde vereinbart wurde. Diese Vorgehensweise ist erlaubt, da eine Änderung der Artikel-ID über eine Stammdatenänderung nicht möglich ist.')], use_cases=None), EbdTableRow(step_number='410', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AC9', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='415', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A43', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A42', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='422'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='422', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='424'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='424', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='425'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='425', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='427'), result_code='A44', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='427', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='491'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='435'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='445'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt.')], use_cases=None), EbdTableRow(step_number='440', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A87', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='445', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A88', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende ist < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Wird mit der Artikel-ID eine physikalische Arbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='455'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='455', description='Ist die Menge der Resultierenden negativ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Bei der hier gebildeten Resultierenden handelt es sich um Rücknahmepositionen und damit um das, was in der Prüfung 460 als korrespondierende Resultierende benötigt wird und darf damit nicht im Rechnungsprüfungsprozess als Resultierende genutzt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='458'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='458', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='460'), result_code=None, note='Hinweis: Zu der Resultierenden muss, um den Prüfschritt 460 durchführen zu können, auch die korrespondierende Resultierende gebildet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note='Hinweis: Umfasst die Resultierende maximal einen Kalendermonat, kann es zur Resultierenden keine korrespondierende Resultierende geben.')], use_cases=None), EbdTableRow(step_number='460', description='Beginnt der Zeitraum der korrespondieren Resultierenden zum selben Zeitpunkt wie der Zeitraum dieser Resultierenden und enthält der Zeitraum der korrespondierenden Resultierenden keinen Zeitraum des Monats, in dem die Resultierende endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A89', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende passt nicht zur korrespondierenden Resultierenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='465'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='465', description='Wird durch die korrespondierende Resultierende alle Positionen der vorangegangenen Rechnungen (MVR) zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA1', note='Cluster: Ablehnung auf Positionsebene\nEs wurden nicht alle Positionen vorangegangener MVR Rechnungen zurückgenommen.\nHinweis: Es sind die Rechnungsnummern der MVR anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='470', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='471'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='471', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='472'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='472', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='473'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='473', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='AE3', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.')], use_cases=None), EbdTableRow(step_number='475', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='A45', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis: „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='480', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor? \nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='485'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='485', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='490'), result_code='AA2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert.\nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='490'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='490', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code='AA3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='491', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='492'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='492', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code='AA8', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='495', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A47', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='502'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='502', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='513'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A48', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='513', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='515'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='515', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden?\nHinweis:\nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='525'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A60', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='525', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A50', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt.\nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='528'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='528', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code='A51', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der Resultierenden wird doppelt abgerechnet\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='535'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='535', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='555'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='555', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA6', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Handelt es sich bei der in Artikel-ID der zu prüfenden Positionen um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='561'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='561', description='Wird in derselben Rechnung eine Konzessionsabgabe Position mit einer Artikel-ID, die nicht der Artikel-ID für Sondervertragskunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='563'), result_code='AD0', note='Cluster: Ablehnung auf Positionsebene\nIn derselben Rechnung wird die Konzessionsabgabe einmal für Tarifkunden und für Sondervertragskunden berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='563'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='563', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='565'), result_code=None, note='Hinweis: die Artikel-ID umfasst mehr als einen Abrechnungsmonat'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note='Hinweis: die Artikel-ID berücksichtigt maximal einen Kalendermonat')], use_cases=None), EbdTableRow(step_number='565', description='Wurden alle Positionen der Konzessionsabgabe für Tarifkunden aus den vorherigen MVR zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe für Tarifkunden wurde bereits in einer vorangegangenen MVR abgerechnet und wurde nicht zurückgenommen.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='595', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='599'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='599'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='599', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?\nHinweis: Bei einem unterjährigen Lieferantenwechsel gelten die Artikel-ID aus der Anmeldebestätigung bzw. Stammdatenänderung ab dem 01.01. des laufenden Kalenderjahres und sind für die Prüfung der Rechnungspositionen der Netznutzungsabrechnung ebenfalls für Zeiträume vor dem Lieferantenwechsel heranzuziehen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='607'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='607', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Tarifkunden-Konzessionsabgabe oder für die gemeindespezifische Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A77', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD1', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='615', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='A53', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A54', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='622'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='622', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='624'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='624', description='Handelt es sich um die Artikel-ID 1-01-6-005 oder 1-01-9-001 oder 1-01-9-002 oder 1-07-4-001 oder um eine Artikel-ID, die der Gruppenartikel-ID 1-03-8 oder 1-03-9 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='625'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='625', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='627'), result_code='A55', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='627', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='676'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='635'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='645'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='635', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='640'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt')], use_cases=None), EbdTableRow(step_number='640', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum, dem eine Menge, ein Preis und ein Betrag zugwiesen ist?\nHinweis: Alle Positionen derselben Artikel-ID muss derselbe Preis zugewiesen sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AA9', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='645'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='645', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB1', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='650'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='650', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='651'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='651', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-KG und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='652'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='652', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='653'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='653', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='AE4', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='660', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='A56', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis: „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='665', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='670'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='670', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='675'), result_code='AB2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='675'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='675', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code='AB3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='676', description='Ist die in der Position angegebene physikalische Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='677'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='677', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code='AC6', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='680', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='685'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='690'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='685', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A58', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='687'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='687', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='690', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='695'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='698'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.')], use_cases=None), EbdTableRow(step_number='695', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A59', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='698', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='700'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='700', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden:\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AC2', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='710', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A61', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='712'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='712', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='715', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code='A62', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der Resultierenden wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='725'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='725', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='770'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='730', description='Ist die aus den Leistungs- und Arbeitswerten des Lieferscheins berechnete Benutzungsstundendauer (h/a) für den Zeitraum eines Anschlussnutzers und des Abrechnungszeitraumes ≥ 2.500 Stunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='735'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer ≥ 2.500 h/a in Rechnung stellen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='755'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer< 2.500 h/a in Rechnung stellen.')], use_cases=None), EbdTableRow(step_number='735', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='740'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='740', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB5', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='755', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='760'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='760', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB7', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='765', description='Erfolgt über die mit dieser Artikel-ID Resultierende eine vollständige Rücknahme dessen, was in allen zu dieser 13I gehörenden MVR bereist mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A63', note='Cluster: Ablehnung auf Positionsebene\nEs liegt eine der beiden Fehlersituationen vor:\n1) Es werden zu wenige bzw. zu viele Positionen aus den vorangegangenen MVR zurückgenommen.\n2) Es wurde die Artikel-ID für die falschen Benutzungsstunden abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='770', description='Handelt es sich um eine Artikel-ID für die Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='775'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='772'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='772', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB8', note='Cluster: Ablehnung auf Positionsebene\nDie abzurechnende Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die abzurechnende Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='775', description='Gibt es weitere Artikel-ID für eine Konzessionsabgabe, die von dieser Artikel-ID abweicht, mit der sich somit eine weitere Resultierende bilden lässt?\nHinweis: In den Prüfschritten 775 bis 794 wird zur Reduzierung der Anzahl der beschriebenen Prüfungen vom Standard abgewichen, immer nur die zur Prüfung stehende Resultierende zu betrachten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='781'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='780'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='780', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD6', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.')], use_cases=None), EbdTableRow(step_number='781', description='Ist mindestens eine der Resultierenden eine Rücknahmeposition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='782'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='786'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='782', description='Wird mit allen Resultierenden der Rücknahmepositionen alle bereits bezahlten Konzessionsbeträge mit der entsprechenden Artikel-ID vollständig zurückgenommen?\nHinweis: Die Rücknahmeposition (es können auch mehrere sein) kann auch mit einer anderen Resultierenden zur Konzessionsabgabe dieser Rechnung erfolgen als die zur Prüfung stehende Resultierende. Wichtig ist, dass die bereits gezahlten Konzessionsbeträge vollständig zurückgenommen wurden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='784'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='783'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='783', description='Ist die Resultierende der Rücknameposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD5', note='Cluster: Ablehnung auf Positionsebene\nMit den Rücknahmepositionen werden nicht alle bereits bezahlten Konzessionsbeträge vollständig zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='784', description='Wird mit der Resultierenden der Vorwärtsposition für das Kalenderjahr die richtige Konzessionsabgabe abgerechnet?\nHinweis: Die richtige Konzessionsabgabe ergibt sich aus der Prüfung der Leistungswerte und Energiemenge gegen die Kriterien der Sondervertragskunden -Konzessionsabgabe und der Nutzung des gesetzlichen Preisvorgaben bzw. den gemeindespezifischen Konzessionsabgabe des Netzbetreiber.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='785'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='785', description='Ist die Resultierende der Vorwärtsposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD3', note='Cluster: Ablehnung auf Positionsebene\nEs wird die falsche Konzessionsabgabe für das Kalenderjahr abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='786', description='Handelt es sich bei den Resultierenden um eine Artikel-ID für Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='787'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wird falsch abgerechnet.')], use_cases=None), EbdTableRow(step_number='787', description='Wird in derselben Rechnung eine Konzessionsabgaben-Position mit einer Artikel-ID, die nicht einer Tarifkunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD8', note='Cluster: Ablehnung auf Positionsebene\nKonzessionsabgabe wird doppelt abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='788'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='788', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='789'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='789', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='790'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='790', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AE5', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='793', description='Ist die Energiemenge der Resultierenden plausibel zur Energiemenge des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD4', note='Cluster: Ablehnung auf Positionsebene\nDie Energiemenge der Resultierenden passt nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='794', description='Ist die saldierte Energiemenge der Konzessionsabgabe passend zum Lieferschein?\nHinweis: Die saldierte abgerechnete Energiemenge ergibt sich durch Addition aller Energiemengen (unter Berücksichtigung derer Vorzeichen) aller Resultierenden zur Konzessionsabgabe dieser Rechnung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD9', note='Cluster: Ablehnung auf Positionsebene\nDie saldierte Energiemenge der Resultierenden passen nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='795', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='799'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='799'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='799', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='800', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='805', description='Fehlen noch Artikel-ID für Rechnungspositionen ≥ 01.01.2023 00:00 Uhr, die vorher mit den Stammdaten ausgetauscht und somit in der Rechnung erwartet wurden?\nHinweis: Hat sich die tatsächlich abgerechnete Konzessionsabgabe gegenüber der in den Stammdaten ausgetauschten Konzessionsabgabe geändert, ist die Artikel-ID, welche zuvor in den Stammdaten ausgetauscht wurde, nicht als fehlende Artikel-ID zu übermitteln.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A78', note='Cluster: Ablehnung auf Summenebene\nErwartete Artikel-ID in der Rechnung nicht vorhanden.\nHinweis: Die erwarteten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='810'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='810', description='Sind die Netzentgelte unter Berücksichtigung der pauschalen Netzentgeltreduzierung nach §14a EnWG richtig berechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code='AD2', note='Cluster: Ablehnung auf Summenebene\nDie Netzentgelte unter Berücksichtigung der pauschalen Netzentgeltreduzierung nach §14a EnWG sind nicht richtig berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='815', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='816'), result_code='A66', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='816'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='816', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='817'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='820'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='817', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='818'), result_code='AC3', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='818'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='818', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern der vorausbezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='AC4', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern der Rechnung entspricht nicht der Summe der Steuern der vorausbezahlten Rechnungen. \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='820', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='825'), result_code='A67', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='825'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='825', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern, die in den tatsächlich gezahlten Beträgen in den referenzierten Rechnungen mit diesem Steuersatz enthalten sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='A68', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern entspricht nicht der Summe der vorausbezahlten Steuern aus den referenzierten Rechnungen.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='835'), result_code='A69', note='Cluster: Ablehnung auf Summenebene\nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='835'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='835', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='900'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='900', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='905'), result_code='A70', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='905'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='905', description='Entspricht der fällige Betrag dieser Rechnung dem Rechnungsbetrag abzgl. der Summe aller vorausbezahlten Beträge, sofern diese vorhanden sind und abzgl. des Gemeinderabatt/Kommunalrabatt, sofern dieser vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='910'), result_code='A71', note='Cluster: Ablehnung auf Summenebene\nFälliger Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='910'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='910', description='Entspricht der Gemeinderabatt/Kommunalrabatt der Summe der Gemeinderabatt-/Kommunalrabattbeträge aus der Positionsebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='920'), result_code='A72', note='Cluster: Ablehnung auf Summenebene\nSumme des Gemeinderabatts ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='920'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='920', description='Handelt es sich bei dem Rechnungstyp um einen der folgenden:\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='921'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Turnusrechnung (JVR), Abschlussrechnung (ABR) oder Zwischenabrechnung (ZVR).')], use_cases=None), EbdTableRow(step_number='921', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='922'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='925'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='922', description='Ist der vorausbezahlte Betrag identisch mit der Summe aller zuvor bezahlten Abschlagsrechnungen, deren Abrechnungszeitraum im Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) liegen?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden, sofern die Abschlagsrechnung nicht bereits in einer anderen vom LF akzeptierten und nicht stornierten Rechnung berücksichtigt wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='AC5', note='Cluster: Ablehnung auf Summenebene\nFür den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) sind nicht alle zuvor bezahlten Abschlagsrechnungen enthalten \nHinweise: Der LF gibt die Rechnungsnummern aller Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='925', description='Sind für den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) alle Referenzen der zugehörigen und zuvor bezahlten Abschlagsrechnungen enthalten?\nHinweis: Sobald aus dem Abrechnungszeitraum des Abschlages mindestens ein Tag in den Abrechnungszeitraum der Netznutzungsrechnung (JVR, ZVR, ABR) enthalten und bezahlt ist, muss dieser angerechnet werden, sofern die Abschlagsrechnung nicht bereits in einer anderen vom LF akzeptierten und nicht stornierten Rechnung berücksichtigt wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='A74', note='Cluster: Ablehnung auf Summenebene\nReferenzen auf zuvor bezahlte Abschlagsrechnungen fehlen. \nHinweise: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat und die nicht in dieser Rechnung berücksichtigt wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='927'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='927', description='Entspricht die Angabe des vorausbezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='930'), result_code='A73', note='Cluster: Ablehnung auf Summenebene\nAusgewiesener vorausgezahlter Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='930'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='930', description='Sind alle in der Rechnung (JVR, ZVR, ABR) berücksichtigten Abschlagsrechnungen durch den Empfänger mit einem Zahlungsavis bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='935'), result_code='A76', note='Cluster: Ablehnung auf Summenebene\nMindestens eine Abschlagsrechnung, die in dieser Rechnung berücksichtig wurde, wurde vom LF abgelehnt oder nicht beantwortet. \nAngeforderte, aber nicht beglichene Abschlagsrechnungen sind vom NB zu stornieren.\nHinweis: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die nicht in der vorliegenden Rechnung hätten berücksichtigt werden dürfen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='935'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='935', description='Ist mindestens eine der referenzierten Abschlagsrechnungen bereits in einer anderen Rechnung verrechnet worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code='A75', note='Cluster: Ablehnung auf Summenebene\nMindestens eine referenzierte Abschlagsrechnung ist bereits verrechnet worden. \nHinweis: Der LF gibt in der Ablehnung die Abschlagsrechnung(en), welche bereits verrechnet wurden, sowie die Rechnung(en) (im RFF+AFL), in der der Abschlag/die Abschläge (im FTX+Z14) bereits berücksichtigt wurden, an.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='940', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='990'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiger Fehler in den Summenteil.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='990'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='990', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='805', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Artikel-ID keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='815', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 815 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem NB als Ergebnis übermittelt.\nFolgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen; dies gilt für alle Rechnungstypen, ausgenommen der Sonderrechnung.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0408]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0408', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0408 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0409]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0409', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0409 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0410]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0410', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0410 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0412]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0412', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0412 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0415]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0415', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0415 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0441]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0441', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0441 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der LF im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der LF für den angefragten Zeitraum z. B. aufgrund einer Vollmacht berechtigt die angefragten Stammdaten zu erhalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0442]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0442', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0442 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der LF im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Falscher Prozess\nHinweis: WiM Geschäftsprozess „Reklamation von Werten beim MSB“ ist zu verwenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der LF für den angefragten Zeitraum berechtigt die angefragten Werte in der angefragten Granularität zu erhalten?\nAuflistung, siehe WiM Strom Teil 2, Kapitel „Darstellung der zu übermittelnden Werte“ in der jeweils gültigen Fassung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Mussten die angefragten Werte in Art und Umfang in der Vergangenheit erfasst werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es wurden Werte angefragt, die es auf der ge-nannten Marktlokation, Messlokation oder Tranche nicht geben kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurden die angefragten Werte auf der genannten Marktlokation, Messlokation oder Tranche erfasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die angefragten Werte sind nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Werte versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0443]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0443', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0443 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um einen MSB aus der Sparte Gas?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist der MSB im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der MSB für den angefragten Zeitraum z.\xa0B. aufgrund einer Vollmacht berechtigt die angefragten Stammdaten zu erhalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden')], use_cases=None), EbdTableRow(step_number='40', description='Ist an der genannten Messlokation ein iMS verbaut?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kein iMS verbaut')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0452]
  EbdTableMetaData(ebd_code='E_0452', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0456]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0456', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0456 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich bei der Marktlokation um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFür diese Marktlokation ist kein Lieferschein zu versenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Endedatum des Zeitraums des Lieferscheins in der Zukunft?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEndedatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht der Typ dieses Lieferscheins (Grund-/Arbeitspreis bzw. Arbeits-/Leistungspreis) für den übermittelten Zeit-raum mit der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/Arbeitspreis bzw. Arbeits-/Leistungspreis)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDer Typ des Lieferscheins ist nicht identisch zur Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Handelt es sich um einen Lieferschein vom Typ „Grund-/ Arbeitspreis“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt in dem Lieferschein genannten Zeitraum mindestens ein Tag eines noch nicht stornierten Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nÜberschneidender Zeitraum in noch nicht stornierten Lieferscheinen „Arbeits-/Grundpreis“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „keine Messung“ (pauschale Marktlokation)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht die im Lieferschein übermittelte Energiemenge der Energiemenge, welche sich aus der zuvor für den Zeitraum ausgetauschten Jahresverbrauchsprognose ergibt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nEnergiemenge für pauschale Marktlokation stimmt nicht überein.')], use_cases=None), EbdTableRow(step_number='8', description='Liegen nach Reklamation beim MSB für den korrespondierenden Zeitraum des Lieferscheins die Energiemengen an der Marktlokation vom MSB vor?\nHinweis: Sollten die Energiemengen an der Marktlokation vom MSB für den korrespondierenden Zeitraum nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nEnergiemengen vom MSB an der Marktlokation fehlen und sind beim MSB reklamiert\nHinweis: \nDie Prüfung des Lieferscheins erfolgt für Leistungszeiträume vor dem 01.12.2019 auf Basis der Werte, die vom NB bzw. vom gMSB übermittelt wurden.\nSiehe Mitteilung Nr. 6 zur MaKo 2020 (Az.: BK6-18-032) der Bundesnetzagentur vom 28.01.2020.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt für den im Lieferschein genannten Zeitraum für eine der genannten OBIS-Kennzahlen eine zusätzliche Energiemenge vor, die noch nicht storniert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nFür einen Zeitabschnitt liegen für mindestens eine OBIS-Kennzahl mehrere Energiemengen vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die zuvor vom MSB übermittelte Summe der Energiemengen je OBIS-Kennzahl der Summe der Energiemengen der aus dem Lieferschein korrespondierenden OBIS-Kennzahl für den vom Lieferschein abgedeckten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um eine Marktlokation, deren Netznutzung aufgrund vertraglicher Vereinbarungen abweichend zu den in GPKE Teil 2 Kapitel 3.2.2 beschriebenen Regelungen abgerechnet wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die im Lieferschein übermittelte Energiemenge der Energiemenge, welche sich auf Basis der vertraglichen Vereinbarungen ergibt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nEnergiemenge widerspricht vertraglich vereinbarter Logik.')], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die zuvor vom MSB übermittelte Summe der Energiemengen der Summe der Energiemengen aus dem Lieferschein für den vom Lieferschein abgedeckten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nEnergiemengen stimmen nicht überein.')], use_cases=None), EbdTableRow(step_number='14', description='Handelt es sich um eine Marktlokation mit der messtech-nischen Einordnung „keine Messung“ (pauschale Markt-lokation)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht die Energiemenge aus dem Lieferschein den bilateral vertraglichen Vereinbarungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nEnergiemenge für pauschale Marktlokation stimmt nicht überein.')], use_cases=None), EbdTableRow(step_number='16', description='Liegen nach Reklamation für den korrespondierenden Zeit-raum des Lieferscheins die Lastgänge an der Marktlokation vom MSB und ggf. das Leistungsmaximum (bei iMS vom MSB, bei kME mit RLM aus Lastgang vom LF entnommen und bei einem unterjährigen Lieferantenwechsel vom NB) vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den korrespondierenden Zeitraum des Lieferscheins nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nLastgänge vom MSB an der Marktlokation fehlen und sind beim MSB reklamiert oder vom NB fehlt die Nachricht „Arbeit und Leistungsmaximum Kalenderjahr vor Lieferbeginn".'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Handelt es sich um eine Marktlokation, deren Netznutzung aufgrund vertraglicher Vereinbarungen abweichend zu den in GPKE Teil 2 Kapitel 3.2.2 beschriebenen Regelungen abgerechnet wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Entspricht die Energiemenge bzw. das Leistungsmaximum aus dem Lieferschein den bilateral vertraglichen Vereinbarungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEnergiemenge bzw. Leistungsmaximum aus dem Lieferschein entspricht nicht der vertraglich vereinbarten Energiemenge.')], use_cases=None), EbdTableRow(step_number='19', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht das im Lieferschein übermittelte Leistungsmaximum dem Leistungsmaximum, das zuvor vom MSB über-mittelt wurde oder dem Leistungsmaximum, welches bei einem unterjährigen Lieferantenwechsel vom NB an den LF übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nLeistungsmaximum aus dem Lieferschein ist nicht identisch zum vorliegenden Leistungsmaximum.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht das im Lieferschein übermittelte Leistungsmaximum dem vorliegenden Leistungsmaximum beim LF, welches aus dem Lastgang vom MSB entnommen oder das Leistungsmaximum, welches bei einem unterjährigen Lieferantenwechsel vom NB an den LF übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nLeistungsmaximum unplausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Entspricht jede auf dem Lieferschein vorkommende Energiemenge je Position (OBIS-Kennzahl und Zeitraum) einer Summe der vom MSB zuvor übermittelten ¼ h-Werte unter Berücksichtigung von möglichen kaufmännischen Rundungen, wobei ggf. die Energiemengen aus den bisher gemessenen Arbeits- und Leistungswerten des NB berücksichtigt wurden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nEnergiemenge aus dem Lieferschein entspricht nicht der Summe aus dem Lastgang.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0458]
  EbdTableMetaData(ebd_code='E_0458', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0108_Weitere Bearbeitung prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0459]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0459', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0459 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung \n\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0468]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0468', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0468 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde der Sperr- / Entsperrauftrag bereits durch den NB abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAuftrag wurde bereits abgelehnt und kann nicht mehr storniert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Handelt es sich um eine Stornierung eines Entsperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note='Hinweis: Es handelt sich um eine Stornierung eines Sperrauftrags.')], use_cases=None), EbdTableRow(step_number='3', description='Ist die Stornierung vor der Durchführung der Entsperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nEntsperrauftrag ist storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nStornierung des Entsperrauftrags nicht mehr möglich.')], use_cases=None), EbdTableRow(step_number='4', description='Ist der Nachrichteneingang der Stornierung spätestens am Tag vor dem geplanten Ausführungstermin bzw. fixen Sperrtermin aus dem Sperrauftrag eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nSperrauftrag ist bis zum Vortag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Stornierung vor der Durchführung der Sperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nSperrauftrag ist am Tag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nStornierung des Sperrauftrags nicht mehr möglich.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0470]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0470', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0470 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist bereits gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt für die Marktlokation im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin bereits ein Sperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nSperrauftrag für Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist im gesamten Ausführungszeitraum des Sperrauftrags (= frühestmöglicher Sperrtermin bis frühestmöglicher Sperrtermin + 6 WT) der die Sperrung beauftragende LF der zu sperrenden Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nZukünftiger bestätigter Lieferbeginn liegt gegenüber anderem Lieferanten bereits vor.\nDie Ausführungsfrist der 6 WT ab dem frühestmöglichen Sperrtermin berührt das bestätigte Lieferbeginndatum gegenüber anderem Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin an allen Messlokationen, welche der Marktlokation zugeordnet sind, der identische MSB zugeordnet, wie an der zu sperrenden Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nAn mindestens einer Messlokation ist ein anderer MSB zugeordnet als an der Marktlokation.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt die zu sperrende Marktlokation in der Niederspannung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation ist nicht in der Niederspannung.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Sind weitere Marktlokationen von der Sperrung betroffen, für die dieser Sperrauftrag keine Wirkung entfalten darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='65'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='65', description='Handelt es sich bei der bzw. den weiteren Marktlokationen ausschließlich um erzeugende Marktlokation(en)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMindestens eine weitere verbrauchende Marktlokation ist von der Sperrung betroffen.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt im gesamten Ausführungszeitraum ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nIm Ausführungszeitraum liegt bereits ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist der Sperrauftrag termingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt der übermittelte Sperrtermin mindestens 12 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristverletzung bei einem termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Liegt der übermittelte frühestmögliche Sperrtermin mindestens 6 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nFristverletzung bei einem nicht termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Kann der Sperrauftrag pauschal über das elektronische Preisblatt abgebildet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nSperrung wird über das elektronische Preisblatt abgebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nDie individuellen Sperrkosten werden in der Nachricht ausgetauscht.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0472]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0472', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0472 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='War eine Sperrung aus rechtlichen Gründen nicht möglich (z.\xa0B. wenn eine Einstweilige Verfügung vorlag)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein rechtlicher Grund vor Ort erkannt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde der Anschlussnutzer angetroffen?\nHinweis: Es gab keine Anzeichen dafür, dass der Anschlussnutzer anwesend war.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: gescheitert\nDer Anschlussnutzer wurde nicht angetroffen. Es gab keine Anzeichen dafür, dass dieser anwesend war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='War eine Sperrung aus dem Grund „aktive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „aktive Zutrittsverweigerung“ ist zu verstehen, dass der Anschlussnutzer angetroffen wurde und dieser den Zugang z.B. durch Drohungen, physische Angriffe, versperren des Zugangs zur Trennstelle unterbunden hat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine aktive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='War eine Sperrung aus dem Grund „passive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „passiver Zutrittsverweigerung“ ist zu verstehen, dass eine Anwesenheit des Anschlussnutzers festgestellt wurde, dieser jedoch seine Anwesenheit verleugnet. (z.B. Anschlussnutzer wurden in der Wohnung gesichtet, öffnet aber die Tür nicht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine passive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='War eine Sperrung wegen eines Verhinderungsgrundes nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein Verhinderungsgrund vorlag.\nHinweis: Im Freitext muss der Verhinderungsgrund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='War eine Sperrung aus einem tatsächlichen Grund nicht möglich?\nUnter tatsächliche Gründe fallen z. B.\nMarktlokation vor Ort nicht identifizierbar\nZugang zur Marktlokation nicht möglich\nKundenwechsel an der Marktlokation festgestellt', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein tatsächlicher Grund vorlag.\nHinweis: Im Freitext muss der tatsächliche Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='War eine Sperrung aus einem technischen Grund nicht möglich (z. B. eine weitere Marktlokation wäre von der Sperrung betroffen gewesen)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein technischer Grund vorlag.\nHinweis: Im Freitext muss der technische Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: erfolgreich\nMarktlokation wurde gesperrt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0487]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0487', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0487 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Marktlokation ist entsperrt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Bilaterale Klärung.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0488]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0488', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0488 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Hat der MSB die generelle Zustimmung zur Durchführung einer Entsperrung/Sperrung dem NB erteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nGenerelle Zustimmung des MSB für die Sperrung/Entsperrung liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegen dem MSB technische Gründe für eine Ablehnung der Sperrung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs liegt ein technischer Ablehnungsgrund vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine Mitwirkung des MSB bei Entsperrung/Sperrung vor Ort gewünscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung unter Mitwirkung des MSB zugestimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung durch NB zugestimmt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0497]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0497', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0497 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde die Sperrung durch den UC "Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF" ausgelöst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation wurde nicht über den UC (Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF) gesperrt. \nHinweis: Die Entsperrung muss auf konventionellem Weg erfolgen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wäre eine Wiederinbetriebnahme aufgrund eines technischen Verhinderungsrundes (z.B. entspricht nicht den geltenden Rechtsvorschriften, behördlichen Verfügungen, den anerkannten Regeln der Technik, DIN VDE Normen, Technischen Anschlussbedingungen (TAB) oder den sonstigen besonderen Vorschriften des NB) nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nWiederinbetriebnahme wäre technisch nicht möglich\nHinweis:\nDie Marktlokation bzw. die dazugehörigen elektrischen Anlagen kann gemäß NAV und TAB nicht wieder in Betrieb genommen werden. Sie entspricht nicht der geltenden Rechtsvorschriften und behördlichen Verfügungen sowie den anerkannten Regeln der Technik, insbesondere DIN VDE Normen, den Technischen Anschlussbedingungen (TAB) und den sonstigen besonderen Vorschriften des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist zum Zeitpunkt des Nachrichteneingangs die Marktlokation bereits entsperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt bereits ein Entsperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEntsperrauftrag für die Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0499]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0499', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0499 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: erfolgreich\nMarktlokation ist entsperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation ist weiterhin gesperrt.\nHinweis: Die Gründe des Scheiterns sind zu übermitteln.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0501]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0501', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0501 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Teilt der NB (ggf. nach erfolgtem Clearing mit dem MSB) die Ansicht des MSB, dass keine Sperrung erfolgen darf/kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer Antwortgrund des MSB aus „E_0488_Anfrage prüfen“ muss dem LF mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Sperrauftrag durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0503]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0503', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0503 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nRechnung entspricht nicht §14 UstG.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt ein Rechenfehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von Blindarbeit oder Unterbrechung / Wiederherstellung der Anschlussnutzung.')], use_cases=None), EbdTableRow(step_number='10', description='Werden die Positionen mit dem korrekten Steuersatz abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nMindestens eine der Positionen ist mit dem falschen Steuersatz abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um eine Rechnung von „Unterbrechung/Wiederherstellung der Anschlussnutzung“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von „Blindarbeit“.')], use_cases=None), EbdTableRow(step_number='12', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Hat der Lieferant einen Sperrauftrag mit der in der Rechnung vorhandenen Auftragsnummer des Sperrauftrags bestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDer abzurechnende Sperrauftrag ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Wurde der Sperrauftrag bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde diese Rechnung zum Sperrauftrag wieder storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Sperrauftrag wurde bereits abgerechnet (doppelte Rechnung).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Ist der identifizierte Sperrauftrag storniert und die Stornierung bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note='Hinweis: Der Sperrauftrag wurde nicht storniert oder die Stornierung erfolgte zu spät und wurde daher abgelehnt.')], use_cases=None), EbdTableRow(step_number='17', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-004] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung bis zum Vortag der Sperrung) oder Artikel-ID \n[2-01-7-005] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung am Tag der Sperrung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für einen stornierten Auftrag zur Unterbrechung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis „Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung“ des Preisblatts bzw. Artikel-ID ist im Preisblatt nicht genannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='War die Sperrung aus dem Sperrauftrag erfolgreich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note='Hinweis: Sperrung war nicht erfolgreich.')], use_cases=None), EbdTableRow(step_number='20', description='Wurde von dem Lieferanten bereits die Wiederherstellung der Anschlussnutzung für die aus diesem Auftrag umgesetzte Unterbrechung der Anschlussnutzung beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Wurde die Entsperrung vom Lieferanten mit der Option „Entsperrung auch außerhalb der regulären Arbeitszeit“ beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Werden in der Rechnung die beiden Artikel-IDs \n[2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird in der Rechnung die Artikel-ID [2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und zusätzlich genau eine der beiden Artikel-ID \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) oder \n[2-01-7-006] (Wiederherstellung der Anschlussnutzung außerhalb der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Entsprechen die Preise in der Rechnung den Preisen aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMindestens ein Preis in der Rechnung passt nicht zum Preis für eine Unterbrechung und Wiederherstellung der Anschlussnutzung auf dem Preisblatt bzw. mindestens eine Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-003] (Erfolglose Unterbrechung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für eine erfolglose Unterbrechung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für eine erfolglose Unterbrechung auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die Verzugskosten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Liegt dem Lieferanten die Rechnung vor, auf die sich die Verzugskostenrechnung bezieht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nDie Rechnung, auf die sich die Verzugskostenrechnung bezieht, ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='29'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='29', description='Wird in der Rechnung die Artikel-ID \n[2-02-0-001] (Verzugskosten pauschal) oder Artikel-ID \n[2-02-0-002] (Verzugskosten variabel) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für Verzugskosten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Sind die Verzugskosten gerechtfertigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDie Verzugskosten sind nicht gerechtfertigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Werden die Verzugskosten pauschal mit der \nArtikel-ID [2-02-0-001] (Verzugskosten pauschal) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='33'), result_code=None, note='Hinweis:\nDie Verzugskosten werden variabel mit der \nArtikel-ID [2-02-0-002] abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='32'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='32', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Verzugskosten auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='33', description='Entsprechen die geltend gemachten Verzugskosten den gesetzlichen Regelungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nPreis ist in der Höhe nicht angemessen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Abrechnung der Blindarbeit zwischen Lieferanten und Netzbetreiber für diese Lokation für den abgerechneten Zeitraum vereinbart?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A24', note='Cluster: Ablehnung\nDie Abrechnung der Blindarbeit ist nicht mit dem Lieferanten vereinbart'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='35'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='35', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Blindarbeit“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die freiwillige Abrechnung sonstiger Leistungen vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='36'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='36', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Lokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung\nDer LF lehnt die Zahlung der Blindarbeitsrechnung ab. Der LF ist der Lokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Lokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nDer LF lehnt die Zahlung der Blindarbeitsrechnung ab. Eine Ablehnung der Zahlung wird durch den LF begründet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='38'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='38', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A33', note='Cluster: Ablehnung \nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='39'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='39', description='Ist in dem Rechnungszeitraum ein bereits abgerechnetes Zeitintervall enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A27', note='Cluster: Ablehnung\nDie Rechnung enthält einen bereits abgerechneten Zeitraum'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegen dem Lieferanten die relevanten Messwerte vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A28', note='Cluster: Ablehnung\nDie relevanten Messwerte zur Rechnungsprüfung liegen nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='41'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='41', description='Wurde die vertraglich vereinbarte Menge Blindarbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A29', note='Cluster: Ablehnung\nMenge der Blindarbeit ist nicht korrekt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='42'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='42', description='Wird in der Rechnung eine der folgenden Artikel-IDs abgerechnet?\n[3-01-0-001] (Blindarbeit)\n[3-02-0-001] (Blindarbeit 1)\n[3-02-0-002] (Blindarbeit 2)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht keiner Artikel-ID für Blindarbeit'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Blindarbeit auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='44', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Zahlungsavis versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0504]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0504', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0504 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Unterbrechung der Anschlussnutzung (Sperren)“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note='Hinweis: Es handelt sich um ein Nicht-Zahlungsavis der Kategorie „Blindarbeit“')], use_cases=None), EbdTableRow(step_number='3', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Ein gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des an ihm versandten, für die Rechnung gültigen Preisblatts.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der Lieferant wegen unbekanntem Sperrauftrag abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt ein bestätigter Sperrauftrag mit der angegebenen Referenz auf den Sperrauftrag des Lieferanten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Gültiger Sperrauftrag ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='7', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Hat der LF den Sperrauftrag storniert und wurde diese Stornierung vom NB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Wurde die korrekte Artikel-ID entsprechend eines stornierten Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Korrekte Artikel-ID für die Abrechnung eines stornierten Sperrauftrags wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus der Stornierung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='10', description='Wurde die korrekte Artikel-ID entsprechend des Ergebnisses des Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Korrekte Artikel-ID wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus dem Ergebnis des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='11', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein, zum Preisblatt abweichender Preis angegeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Wurde in der Rechnung der im Preisblatt angegebene Preis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Korrekter Preis zum gültigen Preisblatt wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='13', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='14', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='16', description='Hat der Lieferant wegen unbekannter Rechnung, auf die sich die Verzugskostenrechnung bezieht, abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, dem Lieferanten zugestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='18', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Gültige Rechnung ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung der Rechnung, auf die sich die Verzugskostenrechnung bezieht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='19', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde genau eine der beiden Artikel-ID für Verzugskosten in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Es wurde für die Verzugskosten eine der beiden Artikel-ID verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='21', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein zum Preisblatt abweichender Preis angeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Wurde in der Rechnung die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='24'), result_code=None, note='Hinweis: Es wurde die Artikel-ID 2-02-0-002 (Verzugskosten variabel) angegeben')], use_cases=None), EbdTableRow(step_number='23', description='Ist der angegeben Preis in der Rechnung identisch mit dem Preis für die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Korrekter Preis wurde in der Rechnung abgerechnet\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='24', description='Ist der Preis, der in der Rechnung für die Artikel-ID 2-02-0-002 (Verzugskosten variabel) in Rechnung gestellt wurde für die der Verzugsrechnung zugrundeliegende, nicht bezahlte Rechnung angemessen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='25', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='26', description='Hat der Lieferant wegen fehlendem Preisblatt „Blindarbeit“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Wurde dem Lieferanten ein, für die Rechnung gültiges, Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Gültiges Preisblatt für Blindarbeit wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='28', description='Hat der Lieferant die Rechnung wegen einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='29'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='29', description='Wurde die korrekte Artikel-ID für Blindarbeit in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Korrekte Artikel-ID wurde in der Rechnung angegeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='30', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0505]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0505', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0505 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der Rechnungssteller den Einwand des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Rechnungsempfänger ist nach erneuter Prüfung immer noch der Ansicht, dass das Nichtzahlungsavis gerechtfertigt ist. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegen weitere Fehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Rechnung wird aufgrund noch nicht gemeldeter Fehler weiterhin abgelehnt.\nHinweis: Die Fehler sind in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Rechnung zustimmen und im Zahlungsavis berücksichtigen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0506]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0506', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0506 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0510]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0510', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0510 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ging innerhalb der Antwortfrist eine Ablehnung des Lieferanten ein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAblehnung der Abmeldung durch den Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nBestätigung der Anmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0511]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0511', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0511 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0512]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0512', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0512 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0513]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0513', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0513 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='E_0514_Beendigung der Zuordnung prüfen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0514]
  EbdTableMetaData(ebd_code='E_0514', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0515]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0515', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0515 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein gültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0516]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0516', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0516 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0517]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0517', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0517 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0518]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0518', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0518 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0519]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0519', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0519 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0520]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0520', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0520 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0521]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0521', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0521 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die abzurechnende Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der abzurechnenden Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0522]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0522', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0522 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0523]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0523', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0523 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um eine kostenpflichtige Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nKostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt sich um eine Bestellung einer Konfiguration einer Änderung des Bilanzierungsverfahrens (Prognosegrundlage)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung einer Konfiguration einer Zählzeitdefinition', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note='Hinweis: Es handelt sich um eine Bestellung einer anderen Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“ oder um eine Marktlokation, bei der alle Messlokationen mit einem Zähler des Typs Lastgangzähler ausgestattet sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMarktlokation befindet sich nicht in der messtechnischen Einordnung „iMS“ oder es handelt sich nicht um eine Marktlokation, bei der alle Messlokationen mit einem Zähler des Typs Lastgangzähler ausgestattet sind.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entspricht der geplante Termin zur Änderung der Prognosegrundlage den Prozessfristvorgaben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nErzeugende Marktlokationen mit iMS oder kME/ RLM werden immer auf der Prognosegrundlage auf Basis von Werten bilanziert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt eine Zuordnungsermächtigung für den sich aus der gewünschten Prognosegrundlage ergebenden ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nZuordnungsermächtigung liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die gewünschte Prognosegrundlage auf Basis von Profilen angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Werten liegt vor.')], use_cases=None), EbdTableRow(step_number='90', description='Befindet sich die Marktlokation in einem Lokationsbündel, in welchem ebenfalls eine erzeugende Marktlokation vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Entspricht die erzeugte Energiemenge der Marktlokation der gemessenen Energiemenge in der Flussrichtung Erzeugung an der Messlokation der Netzübergabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Volleinspeisung, keine Prognosegrundlage auf Basis von Profilen möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Besteht für die Marktlokation ein Wahlrecht zur Änderung der Prognosegrundlage durch den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nKein Wahlrecht der Prognosegrundlage für die Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die gewünschte Prognosegrundlage zum gewünschten Termin bereits umgesetzt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nÄnderung zum gewünschten Termin bereits umgesetzt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei der Marktlokation um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nBestellungen sind nur für verbrauchende Marktlokationen möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei der Bestellung um eine Rückkehr auf eine Eintariflogik?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die gewünschte Zählzeit zum Anwendungszeitpunkt Bestandteil der Übersicht der Zählzeitdefinition, welche zuvor vom NB übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung \nZählzeitdefinition zum Anwendungszeitpunkt nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Ist die in der Bestellung genannte Zählzeit in der Übersicht der Zählzeitdefinition des NB als eine bestellbare Zählzeit gekennzeichnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung \nZählzeit ist nicht bestallbar'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Liegt zum Anwendungszeitpunkt die ausgerollte Zählzeit zur Zählzeitdefinition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung \nAusgerollte Zählzeit zur Zählzeitdefinition liegt zum Anwendungszeitpunkt nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='Ist der bestellte Zustand bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nBestellter Zustand bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist die gewünschte Konfiguration grundsätzlich möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung \nKonfiguration technisch nicht möglich\nHinweis: z.\xa0B. Zählzeit bestellt und Eintarifzähler verbaut')], use_cases=None), EbdTableRow(step_number='210', description='Wurde die Vorlauffristen zu der geplanten Änderung der Gerätekonfiguration eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung \nFristüberschreitung')], use_cases=None), EbdTableRow(step_number='220', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Zustimmung\nBestellung wird an den MSB der Marktlokation weitergeleitet')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0524]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0524', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0524 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Die bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Konfiguration, welche im Preisblatt A des MSB aufgeführt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Nicht kostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Anfragenden an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Sind die in der Anfrage enthaltenen Artikel auch im Preisblatt des MSB zum angefragten Zeitpunkt gültig', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Es ist mindestens ein Artikel in der Anfrage, welcher vom MSB nicht angeboten wird'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der MSB bei allen betroffenen Lokationen aktiver MSB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Der MSB ist nicht an allen Lokationen der zugeordnete MSB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note='Angebot erstellen')], use_cases=None), EbdTableRow(step_number='70', description='Ist die bestellte Konfiguration an der betroffenen Lokation möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Konfiguration ist an der betroffenen Lokation nicht möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Wurden die Vorlauffristen eingehalten?\n\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Die Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0525]
  EbdTableMetaData(ebd_code='E_0525', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0526]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0526', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0526 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Bestellung einer kostenfreien Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note='Hinweis: \nEs handelt sich um eine kostenpflichtige Konfiguration')], use_cases=None), EbdTableRow(step_number='25', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Besteller an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Angebot noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nAngebot ist nicht mehr gültig\n(z.B. Angebot ist zu alt, Preise haben sich in der Zwischenzeit geändert)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um die Konfiguration einer Zählzeitdefinition, Schaltzeitdefinition oder Leistungskurvendefinition, welche dem MSB zum bestellten Zeitpunkt nicht bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nBestellte Konfiguration ist dem MSB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0527]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0527', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0527 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die Bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0528]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0528', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0528 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0529]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0529', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0529 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0530]
  EbdTableMetaData(ebd_code='E_0530', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0531]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0531', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0531 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Konfiguration, welche im Preisblatt A des MSB aufgeführt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nNicht kostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Anfragenden an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Sind die in der Anfrage enthaltenen Artikel auch im Preisblatt des MSB zum angefragten Zeitpunkt gültig', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEs ist mindestens ein Artikel in der Anfrage, welcher vom MSB nicht angeboten wird'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der MSB bei allen betroffenen Lokationen aktiver MSB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDer MSB ist nicht an allen Lokationen der zugeordnete MSB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note='Angebot erstellen')], use_cases=None), EbdTableRow(step_number='70', description='Ist die bestellte Konfiguration an der betroffenen Lokation möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKonfiguration ist an der betroffenen Lokation nicht möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Wurden die Vorlauffristen eingehalten?\n\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0532]
  EbdTableMetaData(ebd_code='E_0532', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0533]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0533', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0533 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Bestellung einer kostenfreien Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note='Hinweis: \nEs handelt sich um eine kostenpflichtige Konfiguration')], use_cases=None), EbdTableRow(step_number='25', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine Konfiguration vom Besteller an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in der Anfrage zum Angebot die Referenz der Bestellung der bestehenden Konfiguration enthalten?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Anfrage ist die Referenz der bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Angebot noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nAngebot ist nicht mehr gültig\n(z.B. Angebot ist zu alt, Preise haben sich in der Zwischenzeit geändert)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um die Konfiguration einer Zählzeitdefinition, Schaltzeitdefinition oder Leistungskurvendefinition, welche dem MSB zum bestellten Zeitpunkt nicht bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nBestellte Konfiguration ist dem MSB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0534]
  EbdTableMetaData(ebd_code='E_0534', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0527 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0535]
  EbdTableMetaData(ebd_code='E_0535', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0528 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0536]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0536', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0536 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0537]
  EbdTableMetaData(ebd_code='E_0537', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0538]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0538', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0538 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0539]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0539', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0539 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0540]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0540', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0540 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0541]
  EbdTableMetaData(ebd_code='E_0541', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0542]
  EbdTableMetaData(ebd_code='E_0542', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0543]
  EbdTableMetaData(ebd_code='E_0543', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0544]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0544', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0544 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\n\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrigierte Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0545]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0545', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0545 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\n\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrigierte Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0546]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0546', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0546 Dummy Name', remark=None), rows=[EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Absender eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0547]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0547', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0547 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0548]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0548', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0548 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeitdefinition bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der LF das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den LF versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der LF eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der LF das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den LF versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der LF eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0549]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0549', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0549 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeitdefinition bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der MSB eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0550]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0550', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0550 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Reklamiert der Absender das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0551]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0551', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0551 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet \nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeitdefinition bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Zählzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der Anfragende eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Schaltzeitdefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die ausgerollte Leistungskurvendefinition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0552]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0552', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0552 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration.')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note='.')], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden. \nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0553]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0553', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0553 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden.\nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0554]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0554', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0554 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden.\nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0562]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0562', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0562 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist eine Verarbeitung im Backend des MSB grundsätzlich möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Backend des MSB ist überlastet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist eine Kommunikationsverbindung zur Steuerbox möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kommunikationsverbindung zur Steuerbox ist gestört.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist es prozessual möglich den Steuerbefehl umzusetzen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Prozessual ist es derzeit nicht möglich die Anforderung umzusetzen (z.B. aufgrund von Wartungsarbeiten).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Der Steuerbefehl kann grundsätzlich umgesetzt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0563]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0563', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0563 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='War eine Verarbeitung im Backend des MSB möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Backend des MSB ist überlastet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='War eine Kommunikationsverbindung zur Steuerbox möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kommunikationsverbindung zur Steuerbox ist gestört.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='War es prozessual möglich den Steuerbefehl umzusetzen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Prozessual ist es derzeit nicht möglich die Anforderung umzusetzen (z.B. aufgrund von Wartungsarbeiten).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Der Steuerbefehl kann grundsätzlich umgesetzt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0564]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0564', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0564 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist eine Verarbeitung im Backend des MSB grundsätzlich möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Backend des MSB ist überlastet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist eine Kommunikationsverbindung zur Steuerbox möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kommunikationsverbindung zur Steuerbox ist gestört.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist es prozessual möglich den Steuerbefehl umzusetzen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Prozessual ist es derzeit nicht möglich die Anforderung umzusetzen (z.B. aufgrund von Wartungsarbeiten).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Der Steuerbefehl kann grundsätzlich umgesetzt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0565]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0565', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0565 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='War eine Verarbeitung im Backend des MSB möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Backend des MSB ist überlastet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='War eine Kommunikationsverbindung zur Steuerbox möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kommunikationsverbindung zur Steuerbox ist gestört.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='War es prozessual möglich den Steuerbefehl umzusetzen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Prozessual ist es derzeit nicht möglich die Anforderung umzusetzen (z.B. aufgrund von Wartungsarbeiten).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Der Steuerbefehl kann grundsätzlich umgesetzt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0566]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0566', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0566 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Der NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den NB begründet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2024 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE6', note='Cluster: Ablehnung auf Kopfebene\nDer Beginn des Abrechnungszeitraums ist < 01.01.2024 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='77'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='77', description='Ist im gesamten Abrechnungszeitraum an mindestens einer Messlokation der Marktlokation ein iMS eingebaut?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE8', note='Cluster: Ablehnung auf Kopfebene\nIm gesamten Abrechnungszeitraum ist an keiner Messlokation der Marktlokation ein iMS eingebaut.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem NB liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='115', description='Ist der MSB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE9', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Ist der MSB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AF0', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen NB und MSB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben?\nHinweis: Die Abrechnung für diesen Zeitraum ist dann vorgegeben, wenn für jeden Zeitpunkt dieses Zeitraums mindestens eine Artikel-ID in den Stammdaten ausgetauscht wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem NB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='301'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='301', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='302'), result_code='AF1', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen. \nHinweis: Der Netzbetreiber gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='302'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='302', description='Darf aus Sicht des NB die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des NB für diese Marktlokation nicht passt?\nHinweis: Ggf. ist zu prüfen: \nder Mittelwert des Jahresstromverbrauchs der vorherigen drei Kalenderjahre\ndie Jahresverbrauchsprognose für die Marktlokation\ndie installierte Leistung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='303'), result_code='AF2', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='301'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='501'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='501', description='Fehlen noch Positionen, die über die ausgetauschten Artikel-ID vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='AE7', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht in der Rechnung enthaltenen ausgetauschten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='501', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0567]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0567', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0567 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0568]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0568', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0568 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC1', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Der NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den NB begründet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2024 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE6', note='Cluster: Ablehnung auf Kopfebene\nDer Beginn des Abrechnungszeitraums ist < 01.01.2024 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='77'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='77', description='Ist im gesamten Abrechnungszeitraum an mindestens einer Messlokation der Marktlokation ein iMS eingebaut?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE8', note='Cluster: Ablehnung auf Kopfebene\nIm gesamten Abrechnungszeitraum ist an keiner Messlokation der Marktlokation ein iMS eingebaut.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem NB liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='115', description='Ist der MSB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE9', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Ist der MSB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AF0', note='Cluster: Ablehnung auf Kopfebene \nDer MSB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen NB und MSB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben?\nHinweis: Die Abrechnung für diesen Zeitraum ist dann vorgegeben, wenn für jeden Zeitpunkt dieses Zeitraums mindestens eine Artikel-ID in den Stammdaten ausgetauscht wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem NB für diese Marktlokation für den abgerechneten Zeitraum vorgegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='301'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='301', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='302'), result_code='AF1', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen. \nHinweis: Der Netzbetreiber gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='302'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='302', description='Darf aus Sicht des NB die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des NB für diese Marktlokation nicht passt?\nHinweis: Ggf. ist zu prüfen: \nder Mittelwert des Jahresstromverbrauchs der vorherigen drei Kalenderjahre\ndie Jahresverbrauchsprognose für die Marktlokation\ndie installierte Leistung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='303'), result_code='AF2', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der NB gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='301'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='501'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='501', description='Fehlen noch Positionen, die über die ausgetauschten Artikel-ID vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='AE7', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht in der Rechnung enthaltenen ausgetauschten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannte Besteuerungsgrundlage passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='301', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='501', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0569]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0569', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0569 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0571]
  EbdTableMetaData(ebd_code='E_0571', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0572]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0572', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0572 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0573]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0573', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0573 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0574]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0574', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0574 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um einen Verwendungszeitraum mit der Qualität „keine Daten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Absender der Nachricht für diesen Verwendungszeitraum dem bisher im System des Empfängers zugeordneten Netzbetreiber?\nHinweis: Liegt keine bisherige Zuordnung vor, ist die Frage mit "ja" zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A17', note='Der Absender der Nachricht entspricht für diesen Verwendungszeitraum nicht dem bisherigen Netzbetreiber. Es wurde damit ein Netzbetreiberwechsel durchgeführt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Bilanzierungsgebiet zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code='A03', note='Bilanzierungsgebiet nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der angegebene Netzbetreiber dem Bilanzierungsgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code='A14', note='Angegebener NB entspricht nicht dem zugeordneten NB des Bilanzierungsgebiets.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der Messstellenbetreiber zum Zeitpunkt der Prüfung in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code='A15', note='Messstellenbetreiber nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Lieferant zum Zeitpunkt der Prüfung in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code='A04', note='Lieferant nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der Bilanzkreis zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code='A05', note='Bilanzkreis nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Passt die Prognosegrundlage zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code='A16', note='Prognosegrundlage passt nicht zum ZRT.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Passt die aus der Transaktionsgrundergänzung sich ableitende Lieferrichtung zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code='A07', note='Lieferrichtung nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A99', note='Sonstige Qualitätsrückmeldung\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Hat keine vorangegangene Prüfung zu einer Antwort geführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A13', note='Stammdaten wurden für den angegebenen Verwendungszeitraum widerspruchsfrei übernommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code='A**', note='Stammdaten wurden übernommen \nHinweis A**: Es werden alle gemerkten Antwortcodes der vorhergehenden Prüfschritte für jeden fehlerhaft identifizierten Verwendungszeitraum der Daten unter Angabe der Zeitraum-ID übermittelt.')], use_cases=None), EbdTableRow(step_number='130', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='10', instruction_text='Alle festgestellten Antworten sind anzugeben, soweit im Format möglich (maximal 8 Antwortcodes)*.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0576]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0576', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0576 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0577]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0577', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0577 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0578]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0578', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0578 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0579]
  EbdTableMetaData(ebd_code='E_0579', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0583]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0583', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0583 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0584]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0584', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0584 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0585]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0585', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0585 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0586]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0586', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0586 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0587]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0587', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0587 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0588]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0588', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0588 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0589]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0589', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0589 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0590]
  EbdTableMetaData(ebd_code='E_0590', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0594]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0594', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0594 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist das Identifikationskriterium „Marktlokations-ID“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Identifikationskriterium „Tranchen-ID“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die „Marktlokation-ID“ oder „Tranchen ID“ dem NB bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster Ablehnung\nDie „Marktlokation-ID“ oder „Tranchen ID“ ist dem NB nicht bekannt.')], use_cases=None), EbdTableRow(step_number='100', description='Ist das Identifikationskriterium „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='[Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer)\nHinweis:\nDas Weglassen der Hausnummer, trägt dem Umstand Rechnung, dass einige NB eher die Adresse des Geräts und nicht die Lieferadresse hinterlegt haben. Wenn der Zähler im Doppelhaus nebenan zu finden ist, weiß der Kunde das ggf. nicht. Das Weglassen des Ortes minimiert die Problematik von Tippfehlern, Ortsteilen und Ortszusätzen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='110'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis eines Kriteriums')], use_cases=None), EbdTableRow(step_number='110', description='Sind die folgenden Identifikationskriterien in der Anfrage vorhanden:\nVorname und/oder Nachname \noder\nFirmenname?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='115', description='[Namensprüfung] (Nachname oder Firmenname)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='120'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis eines Kriteriums')], use_cases=None), EbdTableRow(step_number='120', description='Ist das Identifikationskriterium „Gerätenummer“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='125'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='[Gerätenummernprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='130'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis eines Kriteriums')], use_cases=None), EbdTableRow(step_number='130', description='Ist das Identifikationskriterium „MeLo-ID“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='[MeLo-ID-Prüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='140'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis eines Kriteriums')], use_cases=None), EbdTableRow(step_number='140', description='Ist das Identifikationskriterium „Kundennummer“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='[Kundennummer-Prüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='160'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis eines Kriteriums')], use_cases=None), EbdTableRow(step_number='160', description='Gibt es in der Trefferliste auf Basis eines Kriteriums 1..n Treffer mit einem Identifikationskriterium?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMit einem Identifikationskriterium war keine Marktlokation ermittelbar.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note='Trefferliste auf Basis eines Kriteriums mit 1..n Treffern aus den vorangegangenen Prüfungen liegt vor')], use_cases=None), EbdTableRow(step_number='205', description='Sind die Identifikationskriterien „Adresse“ und „Vorname und/oder Nachname oder Firmenname“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Kombination aus [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer) und [Namensprüfung] (Nachname oder Firmenname)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='215'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='215', description='Sind die Identifikationskriterien „Vorname und/oder Nachname oder Firmenname“ und „Gerätenummer“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Kombination aus [Namensprüfung] (Nachname oder Firmenname) und [Gerätenummernprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='225'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='225', description='Sind die Identifikationskriterien „Gerätenummer“ und „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='235'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Kombination aus [Gerätenummernprüfung] und [Adressprüfung] (PLZ oder geographische Koordinaten oder Flurstücknummer)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='235'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='235', description='Sind die Identifikationskriterien „MeLo-ID“ und „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='245'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='240', description='Kombination aus [MeLo-ID-Prüfung] und [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='245'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='245', description='Sind die Identifikationskriterien „MeLo-ID“ und „Vorname und/oder Nachname oder Firmenname“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='250'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='261'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='250', description='Kombination aus [MeLo-ID-Prüfung] und [Namensprüfung] (Nachname oder Firmenname)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='261'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='261', description='Sind die Identifikationskriterien „Kundennummer“ und „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='262'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='263'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='262', description='Kombination aus [Kundennummer-Prüfung] und [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='263'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='263', description='Sind die Identifikationskriterien „Kundennummer“ und „Vorname und/oder Nachname \noder\nFirmenname“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='264'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='265'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='264', description='Kombination aus [Kundennummer-Prüfung] und [Namensprüfung] (Nachname oder Firmenname)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='265'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von zwei Kriterien')], use_cases=None), EbdTableRow(step_number='265', description='Gibt es in der Trefferliste auf Basis der Kombinationen aus zwei Kriterien 1..n Treffer mit einer Kombination der Identifikationskriterien?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='270'), result_code=None, note='Hier wird die Möglichkeit geboten, allein anhand einer Adresse eine MaLo-ID zu identifizieren'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code=None, note='Trefferliste auf Basis von zwei Kriterien mit 1..n Treffern aus den vorangegangenen Prüfungen liegt vor')], use_cases=None), EbdTableRow(step_number='270', description='Ist das Identifikationskriterium „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='275'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='280'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='275', description='Vollständige [Adressprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='280'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis der alleinigen Adressprüfung')], use_cases=None), EbdTableRow(step_number='280', description='Gibt es in der Trefferliste auf Basis der alleinigen Adressprüfung genau einen Treffer mit dem Identifikationskriterium „Adresse“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nIn der Kombination von zwei Identifikationskriterien war keine Marktlokation ermittelbar\nHinweis: Hier erfolgt die Ablehnung, wenn \nes keine Marktlokation gibt, bei der mindestens eine Kombination aus zwei Identifikationskriterien zutrifft\nmit der Adresse allein auch keine eindeutige Identifikation möglich ist'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden')], use_cases=None), EbdTableRow(step_number='305', description='Sind die Identifikationskriterien „Adresse“, „Vorname und/oder Nachname oder Firmenname“ und „Gerätenummer“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Kombination aus [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer), [Namensprüfung] (Nachname oder Firmenname) und [Gerätenummernprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='315'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von drei Kriterien')], use_cases=None), EbdTableRow(step_number='315', description='Sind die Identifikationskriterien „Adresse“, „Vorname und/oder Nachname oder Firmenname“ und „MeLo-ID“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='343'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Kombination aus [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer), [Namensprüfung] (Nachname oder Firmenname) und [MeLo-ID-Prüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='343'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von drei Kriterien')], use_cases=None), EbdTableRow(step_number='343', description='Sind die Identifikationskriterien „Kundennummer“, „Vorname und/oder Nachname oder Firmenname“ und „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='344'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='344', description='Kombination aus [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer), [Namensprüfung] (Nachname oder Firmenname) und [Kundennummer-Prüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='345'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von drei Kriterien')], use_cases=None), EbdTableRow(step_number='345', description='Gibt es in der Trefferliste auf Basis von drei Kriterien Treffer mit drei Identifikationskriterien?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code=None, note='Es gibt keinen Treffer mit drei Identifikationskriterien'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note='Es gibt 1..n Treffer aus den Kombinationen\nvon jeweils drei Identifikationskriterien')], use_cases=None), EbdTableRow(step_number='350', description='Gibt es in der Trefferliste auf Basis von zwei Kriterien genau einen Treffer mit zwei Identifikationskriterien?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note='Es gibt 2..n Treffer aus den Kombinationen\nvon jeweils zwei Identifikationskriterien')], use_cases=None), EbdTableRow(step_number='355', description='Ist das Identifikationskriterium „Adresse“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Vollständige [Adressprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='365'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis der vollständigen Adressprüfung')], use_cases=None), EbdTableRow(step_number='365', description='Gibt es in der Trefferliste auf Basis der vollständigen Adressprüfung genau einen Treffer mit dem Identifikationskriterium „Adresse“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='385'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist das Identifikationskriterium „Vorname und/oder Nachname oder Firmenname“ in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='375'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='385'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='375', description='Vollständige [Namensprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='380'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis der vollständigen Namensprüfung')], use_cases=None), EbdTableRow(step_number='380', description='Gibt es in der Trefferliste auf Basis der vollständigen Namensprüfung genau einen Treffer mit dem Identifikationskriterium „Vorname und/oder Nachname oder Firmenname“', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='385'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='385', description='Liegen 1..n MaLo aus der Trefferliste auf Basis von zwei Kriterien zum Anfragedatum im Netzgebiet des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='390'), result_code=None, note='1..n der ermittelten MaLo liegen zum Anfragedatum im Netzgebiet des NB'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code=None, note='Keine der ermittelten MaLo liegt zum Anfragedatum im Netzgebiet des NB')], use_cases=None), EbdTableRow(step_number='390', description='Nimmt nur eine der ermittelten Marktlokation zum Anfragedatum an der Marktkommunikation teil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation nicht eindeutig bzw. nimmt nicht an der Marktkommunikation teil'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist nur eine MaLo in einem innerhalb der vergangenen drei Jahre abgegebenen Netzgebiet ermittelbar?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nErmittelte Marktlokation liegt in einem in den letzten drei Jahren abgegebenen Netzgebiet.\nHinweis: Angabe der MP-ID des NB, an den das Netzgebiet abgegeben wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nIn der Kombination von zwei Identifikationskriterien war keine Marktlokation ermittelbar')], use_cases=None), EbdTableRow(step_number='400', description='Gibt es in der Trefferliste auf Basis von drei Kriterien genau einen Treffer, bei dem eine Kombination aus drei Identifikationskriterien zutrifft?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note='Es gibt 2..n Treffer aus den Kombinationen\nvon jeweils drei Identifikationskriterien')], use_cases=None), EbdTableRow(step_number='405', description='Sind alle fünf Identifikationskriterien in der Anfrage enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='410', description='Kombination aus [Adressprüfung] (Straße und PLZ oder geographische Koordinaten oder Flurstücknummer), [Namensprüfung] (Nachname oder Firmenname), [Gerätenummernprüfung] und [MeLo-ID-Prüfung], [Kundennummer-Prüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='415'), result_code=None, note='Aufnahme von 0..n Treffern in die neue Trefferliste auf Basis von vier Kriterien')], use_cases=None), EbdTableRow(step_number='415', description='Gibt es in der Trefferliste auf Basis von drei Kriterien genau einen Treffer mit vier oder mehr Identifikationskriterien?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note='Es gibt 2..n Treffer aus vier Identifikationskriterien')], use_cases=None), EbdTableRow(step_number='420', description='Vollständige [Adressprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='425'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis der vollständigen Adressprüfung')], use_cases=None), EbdTableRow(step_number='425', description='Gibt es in der Trefferliste auf Basis der vollständigen Adressprüfung genau einen Treffer mit dem Identifikationskriterium „Adresse“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Vollständige [Namensprüfung]', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=None, subsequent_step_number='435'), result_code=None, note='Aufnahme von 0..n Treffern in die Trefferliste auf Basis der vollständigen Namensprüfung')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es in der Trefferliste auf Basis der vollständigen Namensprüfung genau einen Treffer mit dem Identifikationskriterium „Vorname und/oder Nachname oder Firmenname“', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='705'), result_code=None, note='Es konnte genau eine Marktlokation ermittelt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Liegen 1..n MaLo aus der Trefferliste auf Basis von drei Kriterien zum Anfragedatum im Netzgebiet des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note='1..n der ermittelten MaLo liegen zum Anfragedatum im Netzgebiet des NB'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note='Keine der ermittelten MaLo liegt zum Anfragedatum im Netzgebiet des NB')], use_cases=None), EbdTableRow(step_number='445', description='Ist nur eine der ermittelten Marktlokationen zum Anfragedatum nicht stillgelegt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nMarktlokation nicht eindeutig bzw. nimmt nicht an der Marktkommunikation teil'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist nur eine MaLo in einem innerhalb der vergangenen drei Jahre abgegebenen Netzgebiet ermittelbar?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nErmittelte Marktlokation liegt in einem in den letzten drei Jahren abgegebenen Netzgebiet.\nHinweis: Angabe der MP-ID des NB, an den das Netzgebiet abgegeben wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nIn der Kombination von drei Identifikationskriterien war keine Marktlokation ermittelbar')], use_cases=None), EbdTableRow(step_number='705', description='Liegt die ermittelte Marktlokation zum Anfragedatum im Netzgebiet des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nErmittelte Marktlokation liegt in einem in den letzten drei Jahren abgegebenen Netzgebiet.\nHinweis: Angabe der MP-ID des NB, an den das Netzgebiet abgegeben wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note='Marktlokation liegt im Netzgebiet')], use_cases=None), EbdTableRow(step_number='710', description='Handelt es sich bei der identifizierten Marktlokation um eine stillgelegte Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nIdentifizierte Marktlokation ist stillgelegt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Wurde für die Identifizierung eine Vollmacht des Anfragenden vom Angefragten angefordert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nÜbergabe der MaLo-ID der identifizierten Marktlokation. Es werden in der Antwort die MaLo-ID und der vollständige Datensatz, wie dieser beim NB gespeichert ist, zurückgegeben.\nHinweis: Bei einer positiven Antwort wird kein Antwortcode übermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note='Hinweis:\nDie Anforderung einer Vollmacht im begründeten Einzelfall ist auf bilateralem an den Anfragenden zu senden. Hierzu ist die E-Mailadresse aus dem SG4 NAD+Z13 Ansprechpartner Wechselprozesse des Kommunikationsdatenblatts des Anfragenden zu verwenden.\nDie Antwort des Angefragten wird an die E-Mailadresse aus dem SG4 NAD+Z13 Ansprechpartner Wechselprozesse des Kommunikationsdatenblatts des NB gesendet.')], use_cases=None), EbdTableRow(step_number='730', description='Ist die Vollmacht eingetroffen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='740'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Hinweis:\nSolange die Vollmacht beim NB nicht eingetroffen ist, wartet der Prozess an diesem Prüfschritt. Diese Prüfung ist regelmäßig erneut durchzuführen, bis die Vollmacht eingetroffen ist.')], use_cases=None), EbdTableRow(step_number='740', description='Hält der NB die Vollmacht für wirksam?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nÜbergabe der MaLo-ID der identifizierten Marktlokation. Es werden in der Antwort die MaLo-ID und der vollständige Datensatz, wie dieser beim NB gespeichert ist, zurückgegeben.\nHinweis: Bei einer positiven Antwort wird kein Antwortcode übermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie vom Anfragenden eingereichte Vollmacht wird als nicht wirksam betrachtet.\nHinweis: Der NB begründet die Ablehnung der fehlenden Wirksamkeit der Vollmacht')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='100', instruction_text='Die nachfolgenden Prüfungen erfolgen auf Basis der Identifikationskriterien aus der Anfrage und dem gesamten Datenbestand im System.'), MultiStepInstruction(first_step_number_affected='205', instruction_text='Die nachfolgenden Prüfungen erfolgen auf Basis der Identifikationskriterien aus der Anfrage und der Trefferliste auf Basis eines Kriteriums aus den vorhergehenden Prüfungen. In der Trefferliste befinden sich Marktlokationen, bei denen mindestens eines der Identifikationskriterien mit einem Identifikationskriterium der Anfrage übereinstimmt.'), MultiStepInstruction(first_step_number_affected='305', instruction_text='Die nachfolgenden Prüfungen erfolgen auf Basis der Identifikationskriterien aus der Anfrage und der Trefferliste auf Basis von zwei Kriterien aus den vorhergehenden Prüfungen. In der Trefferliste befinden sich Marktlokationen, bei denen mindestens eine Kombination aus zwei Identifikationskriterien mit der Anfrage übereinstimmt.'), MultiStepInstruction(first_step_number_affected='400', instruction_text='Die nachfolgenden Prüfungen erfolgen auf Basis der Identifikationskriterien aus der Anfrage und der Trefferliste auf Basis von drei Kriterien aus den vorhergehenden Prüfungen. In der Trefferliste befinden sich Marktlokationen, bei denen mindestens eine Kombination aus drei Identifikationskriterien mit der Anfrage übereinstimmt.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0595]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0595', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0595 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich bei dem Anwendungsfall um eine Bestellung mittels ORDERS?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note='Hinweis: Bestellung von Stammdaten mittels ORDERS'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note='Hinweis: Bestellung des Stammdaten -Clearing mittels UTILMD')], use_cases=None), EbdTableRow(step_number='15', description='Handelt es sich um eine Bestellung Änderung Netzentgelte aufgrund netzorientierter Steuerungsmöglichkeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Wurde die Vorlauffrist von\xa0mindestens 2 WT vor dem Änderungszeitpunkt eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: keine Änderung der Daten\nDie Frist zur Änderung wurde nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Handelt es sich um eine Bestellung Änderung Bilanzkreis bzw. Jahresverbrauchsprognose?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Wurde die Vorlauffrist von mindestens 7 WT vor dem Änderungszeitpunkt eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: keine Änderung der Daten\nDie Frist zur Änderung von Bilanzkreis oder Jahresverbrauchsprognose wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Konnte die Bestellung umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A20', note='Cluster: Änderung der Daten\nDer Bestellung der Stammdaten konnte zugestimmt werden.\nHinweis: NB versendet neue Stammdaten'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Cluster: keine Änderung der Daten\nDer Bestellung der Stammdaten konnte nicht zugestimmt werden.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen')], use_cases=None), EbdTableRow(step_number='210', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='240', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='250'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='250', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vornehmen\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0603]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0603', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0603 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0604]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0604', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0604 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0605]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0605', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0605 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0606]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0606', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0606 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0607]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0607', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0607 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde im Geschäftsvorfall angegeben, dass es sich um eine verbrauchende Marktlokation oder ruhende Marktlokation handelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Abmeldung einer Marktlokation, welche aus einer Kundenanlage herausgelöst werden soll?\nHinweis: \nIn der Transaktionsgrundergänzung ist „ruhende Marktlokation“ angegeben', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich bei der im Anwendungsfall genannten Marktlokation um eine „ruhende Marktlokation“ einer Kundenanlage (§ 20 Abs. 1d EnWG oder § 10c EEG)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBei der in der Abmeldung genannten Marktlokation handelt es sich nicht um eine Kundenanlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde die Vorlauffrist eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVorlauffrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt der Transaktionsgrund \nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden\nAufhebung einer zukünftigen Zuordnung wegen Stilllegung\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN')], use_cases=None), EbdTableRow(step_number='70', description='Liegt der Transaktionsgrund \nEnde der ESV ohne Folgelieferung\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden\nAufhebung einer zukünftigen Zuordnung wegen Stilllegung\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN')], use_cases=None), EbdTableRow(step_number='80', description='Gab es an dieser Marktlokation eine bestätigte Anmeldung zur Ersatz- /Grundversorgung mit einem Lieferbeginnzeitpunkt, welcher innerhalb 3 Monaten vom Endezeitpunkt der Belieferung aus dieser Abmeldung begonnen hat?\nHinweis: \nEine Lieferende mit dem Grund „Ende der ESV ohne Folgelieferung“ kann nur in dem Fall vorliegen, wenn diese Marktlokation innerhalb der letzten 3 Monate auch über den Use-Case „Beginn der Ersatz-/Grundversorgung“ vom NB beim LF angemeldet wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie Marklokation wurde nicht innerhalb der letzten 3 Monate zur Ersatz-/ Grundversorgung angemeldet. Somit kann es sich nicht um eine Beendigung einer ESV handeln.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Erfolgt die Aufhebung einer zukünftigen Zuordnung zu demselben Zeitpunkt, welcher dem Lieferanten im Lieferbeginn bestätigt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie Aufhebung einer zukünftigen Zuordnung muss zum selben Zeitpunkt angegeben werden, wie im Lieferbeginn bestätigt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Wurde die Zuordnung des anfragenden Lieferanten zur Marktlokation zum identischen Abmeldedatum bereits durch eine Bestätigung in den folgenden Prozessschritten beendet? Fall:\nSD: Lieferende von LF an NB, Prozessschritt 2 " Beendigung der Zuordnung des LF zur Marktlokation bzw. Tranche "\nSD: Lieferende von NB an LF, Prozessschritt 2 " Antwort auf Ankündigung der Beendigung der Zuordnung des LF zur Marktlokation bzw. Tranche "\nSD: Lieferbeginn, Prozessschritt 4 " Antwort auf Anfrage zur Beendigung der Zuordnung des LFA zur Marktlokation bzw. Tranche " oder die Bestätigung erfolgt durch die Fristverstreichung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist der anfragende LF am Folgetag des Abmeldungsdatum der Marktlokation noch zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Liegt ein Transaktionsgrund vor, aus welchem hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Liegt in der bereits bestätigten Abmeldung ein Transaktionsgrund vor, aus welchem nicht hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis\nAbmeldung wg. fehl. Zuordnungsermächtigung\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None), EbdTableRow(step_number='500', description='Ist das angegebene Datum „Lieferende“ der 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDas Lieferende muss auf dem 1. eines Kalendermonats 00:00 Uhr liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Liegt die Abmeldung mindestens einen Monat vor Zuordnungsende vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nVorlauffrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Handelt es sich um eine Tranche?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='540'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Handelt es sich um eine direktvermarktungspflichtige Tranche?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Liegt zeitgleich eine Abmeldung der weiteren Tranchen vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='570'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note='Hinweis: Prüfung der 100% Zuordnung letzter WT zum Monatsende vor Zuordnungsbeginn')], use_cases=None), EbdTableRow(step_number='560', description='Liegt der Transaktionsgrund \nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='570'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung')], use_cases=None), EbdTableRow(step_number='570', description='Erfolgt die Aufhebung einer zukünftigen Zuordnung zu dem gleichen Datum (Zeitpunkt), welcher dem Lieferanten im Lieferbeginn bestätigt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nDie Aufhebung einer zukünftigen Zuordnung muss zum selben Zeitpunkt angegeben werden, wie im Lieferbeginn bestätigt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='580'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN')], use_cases=None), EbdTableRow(step_number='580', description='Wurde die Zuordnung des anfragenden Lieferanten zur Marktlokation zum identischen Abmeldedatum bereits durch eine Bestätigung in den folgenden Prozessschritten beendet? Fall:\nSD: Lieferende von LF an NB, Prozessschritt 2 " Beendigung der Zuordnung des LF zur Marktlokation bzw. Tranche "\nSD: Lieferende von NB an LF, Prozessschritt 2 " Antwort auf Ankündigung der Beendigung der Zuordnung des LF zur Marktlokation bzw. Tranche "\nSD: Lieferbeginn, Prozessschritt 4 " Antwort auf Anfrage zur Beendigung der Zuordnung des LFA zur Marktlokation bzw. Tranche " oder die Bestätigung erfolgt durch die Fristverstreichung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='590'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='590', description='Ist der anfragende LF am Folgetag des Abmeldungsdatum der Marktlokation noch zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='600'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Liegt ein Transaktionsgrund vor, aus welchem hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Liegt in der bereits bestätigten Abmeldung ein Transaktionsgrund vor, aus welchem nicht hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis\nAbmeldung wg. fehl. Zuordnungsermächtigung\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A27', note='Cluster: Zustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0608]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0608', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0608 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde der Anwendungsfall für eine verbrauchende Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Vorlauffrist eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nVorlauffrist wurde nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt genau eine Marktlokation ermittelt? \nHinweis: Der NB prüft unter Anwendung mindestens der normierten Identifikationsvorgaben (unter Berücksichtigung des Kapitels 6. der GPKE Teil 1 (s. insbesondere b) und c))), ob die Marktlokation eindeutig identifiziert werden kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil?\nHinweis: Marktlokationen, die nicht an der Marktkommunikation teilnehmen, sind Marktlokationen, die stillgelegt sind bzw. Marktlokationen, die dem "Modell 2 zur ladevorgangscharfen bilanziellen Energiemengenzuordnungsmöglichkeit" zugeordnet sind.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nIdentifizierte Marktlokation nimmt nicht an der Marktkommunikation teil. Weiterhin handelt es sich nicht um eine Neuanlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt mehr als eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Keine Marktlokation ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='55'), result_code=None, note='Mehr als eine Marktlokation ermittelt')], use_cases=None), EbdTableRow(step_number='55', description='Nimmt von den identifizierten Marktlokationen exakt eine Marktlokation an der Marktkommunikation teil?\nHinweis: Marktlokationen, die nicht an der Marktkommu-nikation teilnehmen, sind Marktlokationen, die stillgelegt sind bzw. Marktlokationen, die dem "Modell 2 zur lade-vorgangscharfen bilanziellen Energiemengenzuordnungs-möglichkeit" zugeordnet sind.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nKeine- oder Mehrfachidentifizierung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine erstmalige Inbetriebnahme?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Neuanlage, falscher Anwendungsfall'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist bereits ein LF zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFalscher Anwendungsfall, es ist bereits ein LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die Marktlokation zum Eingangsdatum der Meldung dem Netzbetreiber zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation befindet sich zum Eingangsdatum der Meldung nicht mehr im Netzgebiet des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Sind alle zwingend notwendigen Anforderungen des LF erfüllt?\nHinweis: Insbesondere die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) ist vorhanden', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAnforderungen können nicht erfüllt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist die Anmeldung (der Neuanlage) vor mehr als 60 WT eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nNeu angelegte Marktlokation konnten nicht identifiziert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung')], use_cases=None), EbdTableRow(step_number='500', description='Wurde die Vorlauffrist eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nVorlauffrist wurde nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt genau eine Marktlokation ermittelt? \nHinweis: Der NB prüft unter Anwendung mindestens der normierten Identifikationsvorgaben (unter Berücksichtigung des Kapitels 6. der GPKE Teil 1 (s. insbesondere b) und c))), ob die Marktlokation eindeutig identifiziert werden kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil?\nHinweis: Marktlokationen, die nicht an der Marktkommunikation teilnehmen, sind Marktlokationen, die stillgelegt sind bzw. Marktlokationen, die dem " Modell 2 zur ladevorgangscharfen bilanziellen Energiemengenzuordnungsmöglichkeit " zugeordnet sind.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nIdentifizierte Marktlokation nimmt nicht an der Marktkommunikation teil. Weiterhin handelt es sich nicht um eine Neuanlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt mehr als eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='590'), result_code=None, note='Keine Marktlokation ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code=None, note='Mehr als eine Marktlokation ermittelt')], use_cases=None), EbdTableRow(step_number='535', description='Nimmt von den identifizierten Marktlokationen exakt eine Marktlokation an der Marktkommunikation teil?\nEine Marktlokation, die an der Marktkommunikation teilnimmt, ist eine Marktlokation, welcher ein Bilanzkreis und ein Lieferant zugeordnet ist bzw. werden kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nKeine- oder Mehrfachidentifizierung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Handelt es sich um eine erstmalige Inbetriebnahme?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nKeine Neuanlage, falscher Anwendungsfall'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='545'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='545', description='Erfolgt die Bilanzierung auf Basis von Werten?\nHinweis: In viertelstündlicher Auflösung (verpflichtend lt. EEG)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nBilanzierung erfolgt nicht auf Basis von Werten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist bereits ein LF zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nFalscher Anwendungsfall, es ist bereits ein LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist die Marktlokation zum Eingangsdatum der Meldung dem Netzbetreiber zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nMarktlokation befindet sich zum Eingangsdatum der Meldung nicht mehr im Netzgebiet des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='570'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='570', description='Sind alle zwingend notwendigen Anforderungen des LF erfüllt?\nHinweis: Insbesondere die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) ist vorhanden', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nAnforderungen können nicht erfüllt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='590', description='Ist die Anmeldung (der Neuanlage) vor mehr als 60 WT eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nNeu angelegte Marktlokation konnten nicht identifiziert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Zustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0609]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0609', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0609 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde im Geschäftsvorfall angegeben, dass es sich um eine verbrauchende Marktlokation oder ruhende Marktlokation handelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Abmeldung einer Marktlokation, welche aus einer Kundenanlage herausgelöst werden soll?\nHinweis: \nIn der Transaktionsgrundergänzung ist „ruhende Marktlokation“ angegeben.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Handelt es sich bei der im Anwendungsfall genannten Marktlokation um eine „ruhende Marktlokation“ einer Kundenanlage (§ 20 Abs. 1d EnWG oder § 10 c EEG)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBei der in der Abmeldung genannten Marktlokation handelt es sich nicht um eine „ruhende Marktlokation“ einer Kundenanlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Ist die in der Abmeldung als genannte „ruhende Marktlokation“ definierte Marktlokation der in der Abmeldung genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDie in der Abmeldung genannte „ruhende Marktlokation“ ist nicht der Marktlokation aus der Abmeldung zugeordnet und kann somit dort nicht herausgelöst werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde bereits zum identischen Abmeldedatum für die in diesem Geschäftsvorfall genannte Marktlokation die Lieferende-Meldung positiv bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nLieferende zum Abmeldedatum wurde bereits bestätigt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Vorlauffrist eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung:\nVorlauffrist wurde nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt der Transaktionsgrund\nAuszug wegen Stilllegung\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nAbmeldung wg. fehl. Zuordnungsermächtigung aufgrund Deaktivierung vom BKV beim NB\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT')], use_cases=None), EbdTableRow(step_number='60', description='Liegen dem LF Informationen darüber vor, dass die Marktlokation nicht stillgelegt wird/wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDem LF liegen Informationen vor, dass die Marktlokation nicht stillgelegt wird/wurde.\nHinweis: Die Informationen sind in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist das angegebene Datum „Lieferende“ der nächste 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Lieferende muss auf dem 1. eines Kalendermonats 00:00 Uhr liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt der Transaktionsgrund Abmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Es liegt der Transaktionsgrund „Abmeldung wg. fehl. Zuordnungsermächtigung“ aufgrund Deaktivierung vom BKV beim NB vor.')], use_cases=None), EbdTableRow(step_number='90', description='Wurde der Zeitreihentyp an der betreffenden Marktlokation auf einen ZRT geändert, für welchen keine Zuordnungsermächtigung besteht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nEs liegt keine Änderung auf einen Zeitreihentyp vor, für welchen keine Zuordnungsermächtigung besteht. (Zuordnungsermächtigung liegt vor)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Hat der BKV die Deaktivierung der Zuordnungsermächtigung für den ZRT, welcher der genannten Marktlokation zugeordnet ist, zum übermittelten Lieferende vorgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDeaktivierung der Zuordnungsermächtigung für den der Marktlokation zugeordneten ZRT hat nicht stattgefunden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Hat die dem Lieferende zugrundeliegende Deaktivierung der Zuordnungsermächtigung ihre Gültigkeit weiter als einen Monat in die Zukunft?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung \nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Liegt das Eingangsdatum der Abmeldung nach dem 5. WT des Monats, in dem die Zuordnungsermächtigung endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung \nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None), EbdTableRow(step_number='510', description='Wurde bereits zum identischen Abmeldedatum für die in diesem Geschäftsvorfall genannte Marktlokation bzw. Tranche die Lieferende-Meldung positiv bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nLieferende zum Abmeldedatum wurde bereits bestätigt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Wurde die Vorlauffrist eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nVorlauffrist wurde nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Liegt der Transaktionsgrund Stilllegung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='540'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nAbmeldung wg. fehl. Zuordnungsermächtigung aufgrund Deaktivierung vom BKV beim NB\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT')], use_cases=None), EbdTableRow(step_number='540', description='Liegen dem LF Informationen darüber vor, dass die Marktlokation bzw. Tranche nicht stillgelegt wird/wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nDem LF liegen Informationen vor, dass die Marktlokation bzw. Tranche nicht stillgelegt wird/wurde.\nHinweis: Die Informationen sind in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist das angegebene Datum „Lieferende“ der 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A24', note='Cluster: Ablehnung\nDas Lieferende muss auf dem 1. eines Kalendermonats 00:00 Uhr liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Liegt der Transaktionsgrund Abmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='570'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='580'), result_code=None, note='Hinweis: Es liegt der Transaktionsgrund „Abmeldung wg. fehl. Zuordnungsermächtigung“ aufgrund Deaktivierung vom BKV beim NB vor.')], use_cases=None), EbdTableRow(step_number='570', description='Wurde der Zeitreihentyp an der betreffenden Marktlokation bzw. Tranche auf einen ZRT geändert, für welchen keine Zuordnungsermächtigung besteht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Zustimmung\nEs liegt keine Änderung auf einen Zeitreihentyp vor, für welchen keine Zuordnungsermächtigung besteht. (Zuordnungsermächtigung liegt vor)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='580', description='Hat der BKV die Deaktivierung der Zuordnungsermächtigung für den ZRT, welcher der genannten Marktlokation bzw. Tranche zugeordnet ist, zum übermittelten Lieferende vorgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A26', note='Cluster: Zustimmung\nDeaktivierung der Zuordnungsermächtigung für den der Marktlokation bzw. Tranche zugeordneten ZRT hat nicht stattgefunden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='590'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='590', description='Hat die dem Lieferende zugrundeliegende Deaktivierung der Zuordnungsermächtigung ihre Gültigkeit weiter als einen Monat in die Zukunft?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A27', note='Cluster: Ablehnung \nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Liegt das Eingangsdatum der Abmeldung nach dem 5. WT des Monats, in dem die Zuordnungsermächtigung endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A28', note='Cluster: Ablehnung \nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A29', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0610]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0610', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0610 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0611]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0611', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0611 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0612]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0612', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0612 Dummy Name', remark=None), rows=[EbdTableRow(step_number='30', description='Handelt es sich um einen Verwendungszeitraum mit der Qualität „keine Daten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Entspricht der Absender der Nachricht für diesen Verwendungszeitraum dem bisher im System des Empfängers zugeordneten Netzbetreiber?\nHinweis: Liegt keine bisherige Zuordnung vor, ist die Frage mit "ja" zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code='A17', note='Der Absender der Nachricht entspricht für diesen Verwendungszeitraum nicht dem bisherigen Netzbetreiber. Es wurde damit ein Netzbetreiberwechsel durchgeführt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Bilanzierungsgebiet zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code='A05', note='Bilanzierungsgebiet nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der angegebene Netzbetreiber dem Bilanzierungsgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code='A06', note='Angegebener NB entspricht nicht dem zugeordneten NB des Bilanzierungsgebiets.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wird die Marktlokation auf Grundlage von Werten bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist der Messstellenbetreiber zum Zeitpunkt der Prüfung in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code='A07', note='Messstellenbetreiber nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Ist der Lieferant zum Zeitpunkt der Prüfung in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code='A08', note='Lieferant nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist der Bilanzkreis zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code='A09', note='Bilanzkreis nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Passt die Prognosegrundlage zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code='A10', note='Prognosegrundlage passt nicht zum ZRT.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Passt die aus der Transaktionsgrundergänzung sich ableitende Lieferrichtung zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code='A11', note='Lieferrichtung nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Zeitreihentyp (ZRT) den gültigen ZRT zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code='A12', note='ZRT nicht passend.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='160'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt für das Bilanzierungsgebiet Bestandteil der Profildefinitionsliste des Netzbetreibers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='170'), result_code='A13', note='Normiertes Profil liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt ein Profil aus der Gruppe SLP mit synthetischen Verfahren?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code='A14', note='Normiertes Profil - nicht SLP mit synthetischem Verfahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die Prognosegrundlage der Marktlokation eine, für die der ÜNB die Aggregation durchführen darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code='A15', note='Unpassende Prognosegrundlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code='A99', note='Sonstige Qualitätsrückmeldung\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Hat keine vorangegangene Prüfung zu einer Antwort geführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A16', note='Stammdaten wurden für den angegebenen Verwendungszeitraum widerspruchsfrei übernommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code='A**', note='Stammdaten wurden übernommen \nHinweis A**: Es werden alle gemerkten Antwortcodes der vorhergehenden Prüfschritte für jeden fehlerhaft identifizierten Verwendungszeitraum der Daten unter Angabe der Zeitraum-ID übermittelt.')], use_cases=None), EbdTableRow(step_number='210', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='30', instruction_text='Alle festgestellten Antworten sind anzugeben, soweit im Format möglich (maximal 8 Antwortcodes)*.')])
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0613]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0613', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0613 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Stimmen alle Stammdaten für Verwendungszeiträume, welche mit „Im System vorhandene Daten“ gekennzeichnet sind, sowie Verwendungszeiträume welche mit „Im System keine Daten vorhanden“ gekennzeichnet sind, mit dem beim Verantwortlichen vorliegenden Stammdaten überein?\nHinweis:\nDies ist für jeden in der Anfrage vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind in der Bestellung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird nicht versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden vorgenommen. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird nicht versendet.')], use_cases=None), EbdTableRow(step_number='40', description='Sind in der Bestellung der Stammdatenänderung der Stammdatenänderung Verwendungszeiträume der Daten mit dem Code „Erwartete Daten“ und / oder „Keine Daten erwartet“ enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein. \n- Es wurden keine Stammdaten zur Änderung angegeben. \nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kommt der Verantwortliche zu dem Ergebnis, dass er Änderungen an seinen Stammdaten vornimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungstand der Stammdaten mit:\n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden vorgenommen.\nEine Stammdatenänderung wird versendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt in dem Bearbeitungsstand der Stammdaten mit: \n- Die beim Berechtigten vorliegenden Daten stimmen mit den Daten des Verantwortlichen nicht überein.\n- Änderungen an den Stammdaten werden nicht vorgenommen.\nEine Stammdatenänderung wird versendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0614]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0614', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0614 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde im Geschäftsvorfall angegeben, dass es sich um eine verbrauchende Marktlokation handelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt der übermittelte Kündigungstermin vor dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde der Vertrag bereits zu dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nVertrag wurde bereits zum angefragten Kündigungstermin gekündigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde der Vertrag bereits zu einem Datum vor dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZum Kündigungstermin besteht kein Vertrags-verhältnis mehr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine Kündigung, welche zu einem fixen Termin ausgesprochen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Vertrag zum übermittelten Kündigungstermin unter Einhaltung der Kündigungsfrist unter Berücksichtigung des Eingangsdatums der Kündigung kündbar?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde der Vertrag bereits zu einem späteren Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVertragsbindung bei bereits in der Zukunft beendetem Vertrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nVertragsbindung')], use_cases=None), EbdTableRow(step_number='90', description='Wurde für die Kündigung eine Vollmacht von dem LFA angefordert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note='Hinweis:\nDie Anforderung einer Vollmacht im begründeten Einzelfall ist auf bilateralem Weg an den LFA zu senden. Hierzu ist die E-Mailadresse aus dem „SG4 NAD+Z12 Ansprechpartner Kündigungsprozess“ des Kommunikationsdatenblattes des LFN zu verwenden. \nDie Antwort des LFN wird an die E-Mailadresse aus dem „SG4 NAD+Z12 Ansprechpartner Kündigungsprozess“ des Kommunikationsdatenblattes des LFA gesendet.')], use_cases=None), EbdTableRow(step_number='100', description='Ist die Vollmacht beim LFA eingetroffen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis:\nSolange die Vollmacht beim LFA nicht eingetroffen ist, wartet der Prozess an diesem Prüfschritt. Diese Prüfung ist regelmäßig erneut durchzuführen, bis die Vollmacht eingetroffen ist.')], use_cases=None), EbdTableRow(step_number='110', description='Hält der LFA die Vollmacht für wirksam?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie vom LFN eingereichte Vollmacht wird als nicht wirksam vom LFA betrachtet. \nHinweis: Der LFA begründet die Ablehnung der fehlenden Wirksamkeit der Vollmacht')], use_cases=None), EbdTableRow(step_number='120', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\n\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nZustimmung')], use_cases=None), EbdTableRow(step_number='500', description='Liegt zu dem genannten Objekt ein Vertrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nZu dem genannten Objekt liegt kein Vertrag vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Liegt der übermittelte Kündigungstermin vor dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Wurde der Vertrag bereits zu dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nVertrag wurde bereits zum angefragten Kündigungstermin gekündigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Wurde der Vertrag bereits zu einem Datum vor dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nZum Kündigungstermin besteht kein Vertrags-verhältnis mehr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='570'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='570', description='Handelt es sich um eine Kündigung, welche zu einem fixen Termin ausgesprochen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='580'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='590'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='580', description='Ist der Vertrag zum übermittelten Kündigungstermin unter Einhaltung der Kündigungsfrist unter Berücksichtigung des Eingangsdatums der Kündigung kündbar?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='600'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='590'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='590', description='Wurde der Vertrag bereits zu einem späteren Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nVertragsbindung bei bereits in der Zukunft beendetem Vertrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nVertragsbindung')], use_cases=None), EbdTableRow(step_number='600', description='Wurde für die Kündigung eine Vollmacht von dem LFA angefordert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note='Hinweis:\nDie Anforderung einer Vollmacht im begründeten Einzelfall ist auf bilateralem Weg an den LFA zu senden. Hierzu ist die E-Mailadresse aus dem „SG4 NAD+Z12 Ansprechpartner Kündigungsprozess“ des Kommunikationsdatenblattes des LFN zu verwenden. \nDie Antwort des LFN wird an die E-Mailadresse aus dem „SG4 NAD+Z12 Ansprechpartner Kündigungsprozess“ des Kommunikationsdatenblattes des LFA gesendet.')], use_cases=None), EbdTableRow(step_number='610', description='Ist die Vollmacht beim LFA eingetroffen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='620'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='610'), result_code=None, note='Hinweis:\nSolange die Vollmacht beim LFA nicht eingetroffen ist, wartet der Prozess an diesem Prüfschritt. Diese Prüfung ist regelmäßig erneut durchzuführen, bis die Vollmacht eingetroffen ist.')], use_cases=None), EbdTableRow(step_number='620', description='Hält der LFA die Vollmacht für wirksam?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDie vom LFN eingereichte Vollmacht wird als nicht wirksam vom LFA betrachtet. \nHinweis: Der LFA begründet die Ablehnung der fehlenden Wirksamkeit der Vollmacht')], use_cases=None), EbdTableRow(step_number='630', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Zustimmung\nZustimmung\nHinweis: Wenn mit der MaLo-ID der Marktlokation gekündigt wurde und nur eine Tranche betroffen ist, muss der LFA beides in der Antwort auf die Kündigung mitgeben: ID der Marktlokation; ID der Tranche(n) + Prozentsatz')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0615]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0615', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0615 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Befindet sich die Marktlokation im Grundversorgungsgebiet des Empfängers oder besteht für die Marktlokation eine vertragliche Vereinbarung zur Ersatzbelieferung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine Zuständigkeit'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde der angefragte Geschäftsvorfall dem Anfragenden bereits zum gleichen Zeitpunkt mit einer früheren Meldung bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDoppelmeldung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Besteht eine gesetzliche oder vertragliche Pflicht zur Grund- oder Ersatzversorgung bzw. zur Ersatzbelieferung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung \nkein Grund-/Ersatzversorgungsfall bzw. Ersatzbelieferung\nDer Absender lehnt die weitere Bearbeitung der Transaktion ab, da es sich um keinen Ersatzversorgungsfall handelt und daher die Fristen und Prozessschritte der normalen Regelprozesse eingehalten werden müssen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0616]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0616', chapter='Dummy Chapter', section='Dummy Section', role='', ebd_name='E_0616 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, das eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0618]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0618', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0618 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0619]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0619', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0619 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0620]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0620', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0620 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0621]
  EbdTableMetaData(ebd_code='E_0621', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0622]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0622', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0622 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde der Anwendungsfall für eine verbrauchende Marktlokation oder ruhende Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde die Vorlauffrist eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nVorlauffrist wurde nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Ist in dem Anwendungsfall in der Ergänzung zum Transaktionsgrund „Ruhende Marktlokation“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Ist die „ruhende Marktlokation“ (SG5 LOC+Z22) messtechnisch mittels iMS erfasst? (Messtechnische Einordung der Marktlokation = iMS)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A36', note='Cluster: Ablehnung\nDie genannte Marktlokation entspricht nicht den Anforderungen, da messtechnische Einordung nicht iMS.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Handelt es sich bei der „ruhenden Marktlokation“ (SG5 LOC+Z22) im System des Empfängers um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBei der angemeldeten ruhenden Marktlokation handelt es sich nicht um eine verbrauchende Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Soll die angegebene Marktlokation zu einer Neubildung einer Kundenanlage führen (Produktcode: 9991 00000 276 9, Code der Produkteigenschaft: 9991 00000 293 3)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note='Hinweis: In diesem Fall beabsichtigt der LF eine Neubildung einer Kundenanlage, in der die angegebene Marktlokation integriert werden soll.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note='Hinweis: In diesem Fall beabsichtigt der LF eine Integration einer Marktlokation in eine bestehende Marktlokation „Abbildung von § 20 Abs. 1d EnWG bzw. § 10c EEG“')], use_cases=None), EbdTableRow(step_number='25', description='Handelt es sich bei der im Anwendungsfall genannten Marktlokation (im SG5 LOC+Z16) um eine Marktlokation „Kundenanlage“ (§ 20 Abs. 1d EnWG bzw. § 10 c EEG)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nBei der in der Anmeldung genannten Marktlokation (im SG5 LOC+Z16) handelt es sich nicht um eine „Kundenanlage“. Somit kann die zu integrierende Marktlokation (im SG5 LOC+Z22) nicht der Marktlokation „Kundenanlage“ (im SG5 LOC+Z16) zugeordnet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Befindet sich die „ruhende Marktlokation (SG5 LOC+Z22) hinter der (den) gleichen Netzlokation(en) wie die Marktlokation der Kundenanlage (SG5 LOC+Z16)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A37', note='Cluster Ablehnung\nDie zu integrierende Marktlokation befindet sich nicht hinter der /den gleichen Netzlokation(en) liegen, wie die Marktlokation der „Kundenanlage“ („Abbildung von § 20 Abs. 1d EnWG bzw. § 10c EEG“).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil?\nHinweis: Marktlokationen, die nicht an der Marktkommunikation teilnehmen, sind Marktlokationen, die stillgelegt sind bzw. Marktlokationen, die dem " Modell 2 zur ladevorgangscharfen bilanziellen Energiemengenzuordnungsmöglichkeit " zugeordnet sind.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMarktlokation, die über Marktlokations-ID identifiziert wurde, nimmt nicht an der Marktkommunikation teil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Handelt es sich um eine Anmeldung für eine Neuanlage?\nHinweis: Dies sind Marktlokationen, bei denen der NB den Identifikator schon vergeben hat, deren Inbetriebnahme aber noch in der Zukunft liegt. (somit ein Lieferbeginn noch nicht feststeht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFalscher Prozess'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Sind alle zwingend notwendigen Anforderungen des LF erfüllt?\nHinweis: \nInsbesondere die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) ist vorhanden', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung:\nAnforderungen können nicht erfüllt werden\nHinweis: die Abweichungen sind zu benennen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt für diese Marktlokation bereits eine gerade in Arbeit befindliche und noch nicht beantwortete Anmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAndere Anmeldung in Bearbeitung.\nHinweis:\nDer Zuordnungsbeginn der derzeit in Bearbeitung befindlichen Anmeldung und der Zeitpunkt, ab welchem der NB wieder Anmeldungen für diese Marktlokation entgegennimmt werden übermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich')], use_cases=None), EbdTableRow(step_number='220', description='Handelt es sich um einen „Einzug in Neuanlage“?\nHinweis: Dies sind Marktlokationen, bei denen der NB den Identifikator schon vergeben hat, deren Inbetriebnahme aber noch in der Zukunft liegt (somit ein Lieferbeginn noch nicht feststeht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nFalscher Prozess'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='250', description='Erfolgt die Bilanzierung auf Basis von Werten?\nHinweis: In viertelstündlicher Auflösung (verpflichtend lt. EEG)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A24', note='Cluster: Ablehnung\nBilanzierung erfolgt nicht auf Basis von Werten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='260'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='260', description='Sind alle zwingend notwendigen Anforderungen des LF erfüllt?\nHinweis: Insbesondere die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) ist vorhanden', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung:\nAnforderungen können nicht erfüllt werden\nHinweis: die Abweichungen sind zu benennen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='270'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='270', description='Liegt für diese Marktlokation bereits eine gerade in Arbeit befindliche und noch nicht beantwortete Anmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A45', note='Cluster: Ablehnung\nAndere Anmeldung in Bearbeitung.\nHinweis:\nDer Zuordnungsbeginn der derzeit in Bearbeitung befindlichen Anmeldung und der Zeitpunkt, ab welchem der NB wieder Anmeldungen für diese Marktlokation entgegennimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Handelt es sich um Geschäftsvorfall 1?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Handelt es sich um Geschäftsvorfall 2?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='600'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Verändert sich die im Geschäftsvorfall angegebene Veräußerungsform zum Tag des gewünschten Zuordnungsbeginns (Veräußerungsformwechsel)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich um eine „Nicht-EEG-/- KWKG“-Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='406'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='410'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='406', description='Ist der Übertragungstag spätestens der Tag vor dem letzten WT vor dem Zuordnungsbeginn?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A34', note='Cluster: Ablehnung\nDie Vorlauffrist für eine „Nicht-EEG-/ - KWKG“- Marktlokation wurde nicht eingehalten.')], use_cases=None), EbdTableRow(step_number='410', description='Ist das angegebene Datum „Lieferbeginn“ der 1. eines Kalendermonats, 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A27', note='Cluster: Ablehnung\nVorgaben EEG nicht eingehalten.')], use_cases=None), EbdTableRow(step_number='420', description='Handelt es sich um einen verkürzten Wechsel?\nHinweis: Vorgabe nach EEG: 5 WT vor Zuordnungsbeginn', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist die Vorlauffrist von einem Monat eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A28', note='Cluster: Ablehnung \nDie Vorlauffrist für EEG-/KWKG-Marktlokationen im Geschäftsvorfall 1 wurden nicht eingehalten (Fristüberschreitung).')], use_cases=None), EbdTableRow(step_number='440', description='Ist die Vorlauffrist eingehalten?\n(Eingang spätestens 5 WT vor Zuordnungsbeginn)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A29', note='Cluster: Ablehnung\nDie verkürzte Vorlauffrist für EEG-/KWKG- Marktlokationen im Geschäftsvorfall 1 wurden nicht eingehalten (Fristüberschreitung).')], use_cases=None), EbdTableRow(step_number='600', description='Verändert sich die im Geschäftsvorfall angegebene Veräußerungsform zum Tag des gewünschten Zuordnungsbeginns (Veräußerungsformwechsel)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='620'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich um eine „Nicht-EEG-/-KWKG“-Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist der Übertragungstag spätestens der Tag vor dem letzten WT vor dem Zuordnungsbeginn?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung \nDie Vorlauffrist für eine „Nicht-EEG-/-KWKG“- Marktlokation im Geschäftsvorfall 2 wurde nicht eingehalten (Fristüberschreitung).')], use_cases=None), EbdTableRow(step_number='620', description='Ist das angegebene Datum „Lieferbeginn“ der 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Ablehnung\nDas Lieferbeginn darf nur der 1. eines Kalendermonats 00:00 Uhr sein'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Ist die Vorlauffrist von einem Monat eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nDie Vorlauffrist für EEG-/KWKG-Marktlokationen im Geschäftsvorfall 2 wurden nicht eingehalten (Fristüberschreitung).')], use_cases=None), EbdTableRow(step_number='800', description='Ist das angegebene Datum „Lieferbeginn“ der 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='810'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='805', description='Handelt es sich um eine „Nicht-EEG-/-KWKG“-Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='806'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='810'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='806', description='Ist der Übertragungstag spätestens der Tag vor dem letzten WT vor dem Zuordnungsbeginn?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A35', note='Cluster: Ablehnung\nDie Vorlauffrist für eine „Nicht-EEG-/-KWKG“- Marktlokation wurde nicht eingehalten.')], use_cases=None), EbdTableRow(step_number='810', description='Ist die Vorlauffrist von einem Monat eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A44', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Ist der angegebene Prozentsatz an der Marktlokation noch frei?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich\nHinweis: Anfrage zur Beendigung der Zuordnung muss zwingend an alle LFA und an den Anmeldenden versendet werden!'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0621_Prüfen, ob Anfrage zur Beendigung der Zuordnung erforderlich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0623]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0623', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0623 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde der Anwendungsfall für eine verbrauchende Marktlokation oder ruhende Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='400'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde eine Anfrage zur Beendigung der Zuordnung gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Hat der LFA fristgerecht geantwortet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Hat der LFA der Anfrage zur Beendigung der Zuordnung widersprochen?\nHinweis: Im Fall der Zustimmung ist dem LFA, dem die Anfrage zur Beendigung der Zuordnung zugestellt wurde in jedem Fall eine "Beendigung der Zuordnung des LFA zur Marktlokation bzw. Tranche" zuzusenden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde in der Beantwortung der Anfrage zur Beendigung der Zuordnung der Code A30 „Ablehnung: Die Belieferung wurde zu dem angefragten Termin aus der Anfrage zur Beendigung der Zuordnung bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.“ verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A50', note='Cluster: Ablehnung\nDer LFA hat der Anfrage zur Beendigung der Zuordnung widersprochen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A51', note='Cluster: Zustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr')], use_cases=None), EbdTableRow(step_number='400', description='Handelt es sich um Geschäftsvorfall 3?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='410'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='410', description='Wurde eine Anfrage zur Beendigung der Zuordnung gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Hat der LFA fristgerecht geantwortet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Hat der LFA der Anfrage zur Beendigung der Zuordnung widersprochen?\nHinweis: Im Fall der Zustimmung ist dem LFA, dem die Anfrage zur Beendigung der Zuordnung zugestellt wurde in jedem Fall eine "Beendigung der Zuordnung des LFA zur Marktlokation bzw. Tranche" zuzusenden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Wurde in der Beantwortung der Anfrage zur Beendigung der Zuordnung der Code A41 „Ablehnung: Die Belieferung wurde zu dem angefragten Termin aus der Anfrage zur Beendigung der Zuordnung bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.“ verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A57', note='Cluster: Ablehnung\nDer LFA hat der Anfrage zur Beendigung der Zuordnung widersprochen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurden Anfragen zur Beendigung der Zuordnung an die zugeordneten Lieferanten der Tranchen, an der Marktlokation gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde mindestens einer Anfrage zur Beendigung der Zuordnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A53', note='Cluster: Ablehnung\nDer gewünschte Prozentsatz an der Marktlokation ist nicht frei')], use_cases=None), EbdTableRow(step_number='520', description='Ist ein ausreichend großer Prozentsatz an der Marktlokation frei geworden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A54', note='Cluster: Ablehnung\nDer gewünschte Prozentsatz an der Marktlokation ist nicht frei')], use_cases=None), EbdTableRow(step_number='530', description='Verbleibt ein Anteil im Bilanzkreis des Netzbetreibers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='540'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Handelt es sich um eine direktvermarktungspflichtige Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A55', note='Cluster: Zustimmung\nUnter Bildung einer neuen Tranche sowie Info über fehlende Anteile an der Marktlokation in der Bilanzierung\nHinweis: Trigger für Prozess: Herstellung einer 100% LF-Zuordnung zu einer Marktlokation beim NB'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A56', note='Cluster: Zustimmung\nUnter Bildung einer neuen Tranche'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0624]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0624', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0624 Dummy Name', remark=None), rows=[EbdTableRow(step_number='5', description='Ist die Anfrage ausgehend vom ÜT der Lieferanmeldung bis 07:00 Uhr des nächsten Werktages eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A43', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Wurde der Anwendungsfall für eine verbrauchende Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Besteht zum Folgetag des in der Anfrage zur Beendigung der Zuordnung genannten Termins eine Zuordnung für diese Marktlokation?\nHinweis: Ist der Kunde in der E/G, ist diese Frage ebenfalls mit ja zu beantworten', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt dem LFA bereits eine bestätigtes Zuordnungsende vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDie Belieferung wurde zu dem angefragten Ter-min aus der Anfrage zur Beendigung der Zuordnung bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Zustimmung\nZustimmung der Anfrage zur Beendigung der Zuordnung zum in der bereits versendeten Abmeldung (welche noch nicht beantwortet wurde) genannten Termin.')], use_cases=None), EbdTableRow(step_number='40', description='Liegt in der Anfrage zur Beendigung der Zuordnung der Transaktionsgrund Ein-/ Auszug (Umzug) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Kunde aus der Anfrage zur Beendigung der Zuordnung identisch mit dem Kunden beim LFA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nEs handelt sich nicht um einen Einzug, da der Kunde aus der Anfrage zur Beendigung der Zuordnung identisch mit dem Kunden beim LFA ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Hat der LFA Informationen darüber, dass sein Kunde nicht ausgezogen ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A33', note='Cluster: Ablehnung\nDer LFA hat die Information, dass der Kunde nicht ausgezogen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A34', note='Cluster: Zustimmung \nDer LFA beendet die Belieferung und teilt sein Lieferendedatum in der Antwort mit.')], use_cases=None), EbdTableRow(step_number='70', description='Ist der LFA ein Lieferant der auch Grundversorger ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Befindet sich die Marktlokation zum Folgetag des Enddatums aus der Anfrage zur Beendigung der Zuordnung in der Ersatz-versorgung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A38', note='Cluster: Zustimmung\nErsatzversorgung wurde zum angefragten Termin beendet.')], use_cases=None), EbdTableRow(step_number='90', description='Bleibt das Vertragsverhältnis des LFA mit dem Kunden an dieser Marktlokation / Tranchen zum Tag nach dem Enddatum aus der Anfrage zur Beendigung der Zuordnung bestehen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A35', note='Cluster: Ablehnung\nEs besteht eine Vertragsbindung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A36', note='Cluster: Zustimmung\nVertragsverhältnis wurde zum angefragten oder davor liegenden Termin beendet.')], use_cases=None), EbdTableRow(step_number='200', description='Besteht zum Folgetag des in der Anfrage zur Beendigung der Zuordnung genannten Termins eine Zuordnung für diese Marktlokation / Tranche?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Liegt dem LFA bereits eine bestätigtes Zuordnungsende vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A41', note='Cluster: Ablehnung\nDie Belieferung wurde zu dem angefragten Ter-min aus der Anfrage zur Beendigung der Zuordnung bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A42', note='Cluster: Zustimmung\nZustimmung der Anfrage zur Beendigung der Zuordnung zum in der bereits versendeten Abmeldung (welche noch nicht beantwortet wurde) genannten Termin.')], use_cases=None), EbdTableRow(step_number='220', description='Bleibt das Vertragsverhältnis des LFA mit dem Kunden an dieser Marktlokation / Tranche zum Tag nach dem Enddatum aus der Anfrage zur Beendigung der Zuordnung bestehen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A39', note='Cluster: Ablehnung\nEs besteht eine Vertragsbindung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A40', note='Cluster: Zustimmung\nVertragsverhältnis wurde zum angefragten oder davor liegenden Termin beendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0626]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0626', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0626 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0627]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0627', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0627 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0628]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0628', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0628 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jede in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0629]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0629', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0629 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0630]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0630', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0630 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0631]
  EbdTableMetaData(ebd_code='E_0631', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0632]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0632', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0632 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0633]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0633', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0633 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0634]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0634', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0634 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0635]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0635', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0635 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der Berechtigte in der Qualitätsrückmeldung mitgeteilt, dass er die Stammdaten ohne Anmerkung übernommen hat?\nHinweis:\nDies ist für jeden in der Rückmeldung vorhandenen Verwendungszeitraum jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Leitet der Verantwortliche aufgrund der Qualitätsrückmeldung des Berechtigten ab, dass eine Anpassung seiner Stammdaten notwendig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Änderung der Daten\nDer Verantwortliche teilt dem Berechtigten mit, dass er einen erneuten Versand der Stammdaten vornehmen wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Keine Änderung der Daten\nDer Verantwortliche teilt mit, dass er seine Stammdaten für korrekt hält und keine Anpassung vornehmen wird.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0639]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0639', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0639 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt sich aus der Prüfung, dass der Empfänger in der Qualitätsrückmeldung seine Sicht der Stammdaten mitteilen möchte?\nHinweis:\nDies ist für jeden in der Änderung vorhandenen Verwendungszeitraum der Daten jeweils für den gesamten Zeitraum zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code='A01', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt in der Qualitätsrückmeldung mit, dass er die Stammdaten ohne Anmerkung übernommen hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code='A02', note='Der Empfänger übernimmt die Stammdaten.\nEr teilt mit der Qualitätsrückmeldung mit, dass diese Stammdaten aus seiner Sicht nicht korrekt sind. Er gibt die aus seiner Sicht korrekten Stammdaten als Qualitätsrückmeldung zurück.')], use_cases=None), EbdTableRow(step_number='30', description='Sind noch weitere Verwendungszeiträume zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0800]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0800', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0800 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegen zwischen dem Eingangsdatum der Nachricht und dem Monatsletzten des Monats, in dem der angefragte Bilanzierungszeitraum endet, mindestens 30 Werktage?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt die Aggregationsverantwortung im angefragten Zeitraum komplett beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Aggregationsverantwortung liegt nicht oder nur zeitweise beim ÜNB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Marktlokation im angefragten Zeitraum komplett auf Basis von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Marktlokation wird nicht auf Basis von Profilen bilanziert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bilanzierte Menge versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0801]
  EbdTableMetaData(ebd_code='E_0801', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='GS_002_MehrMinderMengen-Rechnung prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0802]
  EbdTableMetaData(ebd_code='E_0802', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='G_0080_aggregierte Menge und Abrechnungszeitraum prüfen')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0803]
  EbdTableMetaData(ebd_code='E_0803', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='G_0001_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0804]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0804', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0804 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: \n\nDas identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0806]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0806', chapter='Dummy Chapter', section='Dummy Section', role='MGV', ebd_name='E_0806 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: \n\nDas identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0900]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0900', chapter='Dummy Chapter', section='Dummy Section', role='BTR', ebd_name='E_0900 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entsprechen die Energiemengen der Ausfallarbeitszeitreihe den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Zustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übermittlung Gegenvorschlag')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0901]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0901', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0901 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die Ausfallarbeitszeitreihe bereits eine Zustimmung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAusfallarbeitszeitreihe wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Gegenvorschlag zur Ausfallarbeitszeitreihe innerhalb der vorgegebenen Frist eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt bereits ein Gegenvorschlag zur Ausfallarbeitszeitreihe vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nGegenvorschlag liegt bereits vor\nHinweis: Ein weiterer Gegenvorschlag kann nicht eingereicht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Können die Energiemengen des Gegenvorschlages zur Ausfallarbeitszeitreihe akzeptiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0902]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0902', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0902 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entsprechen die Energiemengen der Ausfallarbeitszeitreihe bzw. der Fahrplananteilzeitreihe den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Kann ein Gegenvorschlag erstellt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel\nÜbermittlung Gegenvorschlag\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel inkl. Korrekturanforderung\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0903]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0903', chapter='Dummy Chapter', section='Dummy Section', role='BTR', ebd_name='E_0903 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die Ausfallarbeitszeitreihe bereits eine Zustimmung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAusfallarbeitszeitreihe wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Gegenvorschlag zur Ausfallarbeitszeitreihe innerhalb der vorgegebenen Frist eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt bereits ein Gegenvorschlag zur Ausfallarbeitszeitreihe vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nGegenvorschlag liegt bereits vor\nHinweis: Ein weiterer Gegenvorschlag kann nicht eingereicht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Können die Energiemengen des Gegenvorschlages zur Ausfallarbeitszeitreihe akzeptiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_0904]
  EbdTableMetaData(ebd_code='E_0904', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1000]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1000', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1000 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist bereits gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt für die Marktlokation im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin bereits ein Sperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nSperrauftrag für Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist im gesamten Ausführungszeitraum des Sperrauftrags \n(= frühestmöglicher Sperrtermin bis frühestmöglicher Sperrtermin + 6 WT) der die Sperrung beauftragende LF der zu sperrenden Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nZukünftiger bestätigter Lieferbeginn liegt gegenüber anderem Lieferanten bereits vor.\nDie Ausführungsfrist der 6 WT ab dem frühestmöglichen Sperrtermin berührt das bestätigte Lieferbeginndatum gegenüber anderem Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt an der zu sperrenden Marktlokation eine 1:1-Beziehung zwischen Marktlokation und Messlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine 1:1-Beziehung zwischen Marktlokation und Messlokation.\nHinweis: Gasspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wird die zu sperrende Marktlokation auf Basis von Grund- und Arbeitspreis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation wird nicht auf Basis von Grund- und Arbeitspreis abgerechnet.\nHinweis: Gasspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Sind weitere Marktlokationen von der Sperrung betroffen, für die dieser Sperrauftrag keine Wirkung entfalten darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMindestens eine weitere Marktlokation ist von der Sperrung betroffen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt im gesamten Ausführungszeitraum ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nIm Ausführungszeitraum liegt bereits ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist der Sperrauftrag termingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt der übermittelte Sperrtermin mindestens 12 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristverletzung bei einem termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Liegt der übermittelte frühestmögliche Sperrtermin mindestens 6 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nFristverletzung bei einem nicht termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Kann der Sperrauftrag pauschal über das elektronische Preisblatt abgebildet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nSperrung wird über das elektronische Preisblatt abgebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nDie individuellen Sperrkosten werden in der Nachricht ausgetauscht.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1001]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1001', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_1001 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der MSB die generelle Zustimmung zur Durchführung einer Entsperrung/Sperrung dem NB erteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nGenerelle Zustimmung des MSB für die Sperrung/Entsperrung liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegen dem MSB technische Gründe für eine Ablehnung der Sperrung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs liegt ein technischer Ablehnungsgrund vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist eine Mitwirkung des MSB bei Entsperrung/Sperrung vor Ort gewünscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung unter Mitwirkung des MSB zugestimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung durch NB zugestimmt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1002]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1002', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1002 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Teilt der NB (ggf. nach erfolgtem Clearing mit dem MSB) die Ansicht des MSB, dass keine Sperrung erfolgen darf/kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer Antwortgrund des MSB aus „E_1001_Anfrage prüfen“ muss dem LF mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Sperrauftrag durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1003]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1003', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1003 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='War eine Sperrung aus rechtlichen Gründen nicht möglich (z.\xa0B., wenn eine Einstweilige Verfügung vorlag)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein rechtlicher Grund vor Ort erkannt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde der Anschlussnutzer angetroffen?\nHinweis: Es gab keine Anzeichen dafür, dass der Anschlussnutzer anwesend war.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: gescheitert\nDer Anschlussnutzer wurde nicht angetroffen. Es gab keine Anzeichen dafür, dass dieser anwesend war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='War eine Sperrung aus dem Grund „aktive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „aktive Zutrittsverweigerung“ ist zu verstehen, dass der Anschlussnutzer angetroffen wurde und dieser den Zugang z.\xa0B. durch Drohungen, physische Angriffe, versperren des Zugangs zur Trennstelle unterbunden hat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine aktive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='War eine Sperrung aus dem Grund „passive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „passiver Zutrittsverweigerung“ ist zu verstehen, dass eine Anwesenheit des Anschlussnutzers festgestellt wurde, dieser jedoch seine Anwesenheit verleugnet. (z.B. Anschlussnutzer wurden in der Wohnung gesichtet, öffnet aber die Tür nicht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine passive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='War eine Sperrung wegen eines Verhinderungsgrundes nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein Verhinderungsgrund vorlag.\nHinweis: Im Freitext muss der Verhinderungsgrund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='War eine Sperrung aus einem tatsächlichen Grund nicht möglich?\nUnter tatsächliche Gründe fallen z. B.\nMarktlokation vor Ort nicht identifizierbar\nZugang zur Marktlokation nicht möglich\nKundenwechsel an der Marktlokation festgestellt', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein tatsächlicher Grund vorlag.\nHinweis: Im Freitext muss der tatsächliche Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='War eine Sperrung aus einem technischen Grund nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein technischer Grund vorlag.\nHinweis: Im Freitext muss der technische Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: erfolgreich\nMarktlokation wurde gesperrt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1004]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1004', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1004 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde die Sperrung durch den UC "Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF" ausgelöst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation wurde nicht über den UC (Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF) gesperrt. \nHinweis: Die Entsperrung muss auf konventionellem Weg erfolgen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wäre eine Wiederinbetriebnahme aufgrund eines technischen Verhinderungsgrundes (z.B. entspricht nicht den geltenden Rechtsvorschriften, behördlichen Verfügungen, den anerkannten Regeln der Technik, DVGW Technischen Anschlussbedingungen (TAB) oder den sonstigen besonderen Vorschriften des NB) nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nWiederinbetriebnahme wäre technisch nicht möglich\nHinweis:\nDie Marktlokation bzw. die dazugehörigen elektrischen Anlagen kann gemäß NAV und TAB nicht wieder in Betrieb genommen werden. Sie entspricht nicht der geltenden Rechtsvorschriften und behördlichen Verfügungen sowie den anerkannten Regeln der Technik, DVGW, den Technischen Anschlussbedingungen (TAB) und den sonstigen besonderen Vorschriften des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist zum Zeitpunkt des Nachrichteneingangs die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt bereits ein Entsperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEntsperrauftrag für die Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1005]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1005', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1005 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: erfolgreich\nMarktlokation ist entsperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation ist weiterhin gesperrt.\nHinweis: Die Gründe des Scheiterns sind zu übermitteln.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1006]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1006', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1006 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde der Sperr- / Entsperrauftrag bereits durch den NB abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAuftrag wurde bereits abgelehnt und kann nicht mehr storniert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Stornierung eines Entsperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note='Hinweis: Es handelt sich um eine Stornierung eines Sperrauftrags.')], use_cases=None), EbdTableRow(step_number='30', description='Ist die Stornierung vor der Durchführung der Entsperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nEntsperrauftrag ist storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nStornierung des Entsperrauftrags nicht mehr möglich.')], use_cases=None), EbdTableRow(step_number='40', description='Ist der Nachrichteneingang der Stornierung spätestens am Tag vor dem vom NB geplanten Ausführungstermin bzw. fixen Sperrtermin aus dem Sperrauftrag eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nSperrauftrag ist bis zum Vortag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist die Stornierung vor der Durchführung der Sperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nSperrauftrag ist am Tag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nStornierung des Sperrauftrags nicht mehr möglich.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1007]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1007', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1007 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nRechnung entspricht nicht §14 UstG.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt ein Rechenfehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='270'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von Unterbrechung / Wiederherstellung der Anschlussnutzung.')], use_cases=None), EbdTableRow(step_number='100', description='Werden die Positionen mit dem korrekten Steuersatz abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nMindestens eine der Positionen ist mit dem falschen Steuersatz abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Hat der Lieferant einen Sperrauftrag mit der in der Rechnung vorhandenen Auftragsnummer des Sperrauftrags bestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDer abzurechnende Sperrauftrag ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Wurde der Sperrauftrag bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde diese Rechnung zum Sperrauftrag wieder storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Sperrauftrag wurde bereits abgerechnet (doppelte Rechnung).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist der identifizierte Sperrauftrag storniert und die Stornierung bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note='Hinweis: Der Sperrauftrag wurde nicht storniert oder die Stornierung erfolgte zu spät und wurde daher abgelehnt.')], use_cases=None), EbdTableRow(step_number='170', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-004] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung bis zum Vortag der Sperrung) oder Artikel-ID \n[2-01-7-005] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung am Tag der Sperrung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für einen stornierten Auftrag zur Unterbrechung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis „Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung“ des Preisblatts bzw. Artikel-ID ist im Preisblatt nicht genannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='War die Sperrung aus dem Sperrauftrag erfolgreich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note='Hinweis: Sperrung war nicht erfolgreich.')], use_cases=None), EbdTableRow(step_number='200', description='Wurde von dem Lieferanten bereits die Wiederherstellung der Anschlussnutzung für die aus diesem Auftrag umgesetzte Unterbrechung der Anschlussnutzung beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Wurde die Entsperrung vom Lieferanten mit der Option „Entsperrung auch außerhalb der regulären Arbeitszeit“ beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Werden in der Rechnung die beiden Artikel-IDs \n[2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Wird in der Rechnung die Artikel-ID [2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und zusätzlich genau eine der beiden Artikel-ID \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) oder \n[2-01-7-006] (Wiederherstellung der Anschlussnutzung außerhalb der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der abzurechnenden Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='240', description='Entsprechen die Preise in der Rechnung den Preisen aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMindestens ein Preis in der Rechnung passt nicht zum Preis für eine Unterbrechung und Wiederherstellung der Anschlussnutzung auf dem Preisblatt bzw. mindestens eine Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='250', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-003] (Erfolglose Unterbrechung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für eine erfolglose Unterbrechung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='260'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='260', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für eine erfolglose Unterbrechung auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='270', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die Verzugskosten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='280'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='280', description='Liegt dem Lieferanten die Rechnung vor, auf die sich die Verzugskostenrechnung bezieht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nDie Rechnung, auf die sich die Verzugskostenrechnung bezieht, ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='290'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='290', description='Wird in der Rechnung die Artikel-ID \n[2-02-0-001] (Verzugskosten pauschal) oder Artikel-ID \n[2-02-0-002] (Verzugskosten variabel) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der abzurechnenden Leistung für Verzugskosten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Sind die Verzugskosten gerechtfertigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDie Verzugskosten sind nicht gerechtfertigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Werden die Verzugskosten pauschal mit der \nArtikel-ID [2-02-0-001] (Verzugskosten pauschal) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note='Hinweis:\nDie Verzugskosten werden variabel mit der \nArtikel-ID [2-02-0-002] abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Verzugskosten auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die geltend gemachten Verzugskosten den gesetzlichen Regelungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nPreis ist in der Höhe nicht angemessen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Zahlungsavis versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1008]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1008', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1008 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Unterbrechung der Anschlussnutzung (Sperren)“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Abrechnung „Blindarbeit“ für Sparte Gas nicht relevant.')], use_cases=None), EbdTableRow(step_number='30', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Ein gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des an ihm versandten, für die Rechnung gültigen Preisblatts.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='50', description='Hat der Lieferant wegen unbekanntem Sperrauftrag abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt ein bestätigter Sperrauftrag mit der angegebenen Referenz auf den Sperrauftrag des Lieferanten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Gültiger Sperrauftrag ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='70', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Hat der LF den Sperrauftrag storniert und wurde diese Stornierung vom NB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die korrekte Artikel-ID entsprechend eines stornierten Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Korrekte Artikel-ID für die Abrechnung eines stornierten Sperrauftrags wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus der Stornierung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='100', description='Wurde die korrekte Artikel-ID entsprechend dem Ergebnis des Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Korrekte Artikel-ID wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus dem Ergebnis des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='110', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein, zum Preisblatt abweichender Preis angegeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wurde in der Rechnung der im Preisblatt angegebene Preis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Korrekter Preis zum gültigen Preisblatt wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='130', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='140', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='160', description='Hat der Lieferant wegen unbekannter Rechnung, auf die sich die Verzugskostenrechnung bezieht, abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, dem Lieferanten zugestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='180', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Gültige Rechnung ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung der Rechnung, auf die sich die Verzugskostenrechnung bezieht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='190', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Wurde genau eine der beiden Artikel-ID für Verzugskosten in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Es wurde für die Verzugskosten eine der beiden Artikel-ID verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='210', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein zum Preisblatt abweichender Preis angeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Wurde in der Rechnung die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='240'), result_code=None, note='Hinweis: Es wurde die Artikel-ID 2-02-0-002 (Verzugskosten variabel) angegeben')], use_cases=None), EbdTableRow(step_number='230', description='Ist der angegeben Preis in der Rechnung identisch mit dem Preis für die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Korrekter Preis wurde in der Rechnung abgerechnet\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='240', description='Ist der Preis, der in der Rechnung für die Artikel-ID 2-02-0-002 (Verzugskosten variabel) in Rechnung gestellt wurde für die der Verzugsrechnung zugrundeliegende, nicht bezahlte Rechnung angemessen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='250', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1009]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1009', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1009 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte der Rechnungssteller den Einwand des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Rechnungsempfänger ist nach erneuter Prüfung immer noch der Ansicht, dass das Nichtzahlungsavis gerechtfertigt ist. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegen weitere Fehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Rechnung wird aufgrund noch nicht gemeldeter Fehler weiterhin abgelehnt.\nHinweis: Die Fehler sind in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Rechnung zustimmen und im Zahlungsavis berücksichtigen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1010]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1010', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1010 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Rechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2026 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[08.10.2024 v3.5 / FV2504][E_1020]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1020', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1020 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Marktlokation ist entsperrt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Bilaterale Klärung.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0003]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0003', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0003 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Bestellung fristgerecht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Bestellung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0004]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0004', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0004 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-CL Abonnement vor? Entspricht die Versionsangabe in der BG-CL der Versionsangabe der BG-SZR (Kategorie B), zu der eine BG-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe einer vorliegenden LF-SZR (Kategorie B)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0005]
  EbdTableMetaData(ebd_code='E_0005', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird und ausschließlich die Liste versandt wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0007]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0007', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0007 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-SZR (Kategorie A) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0008]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0008', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0008 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang einer Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 1 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0009]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0009', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0009 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0010]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0010', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0010 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die ID bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0011]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0011', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0011 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Erfolgt die Aktivierung des MaBiS-ZP auf Ebene des Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Regelzone, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Regelzone, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vor-handen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der Bilanzkreis zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung \nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0012]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0012', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0012 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0013]
  EbdTableMetaData(ebd_code='E_0013', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0014]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0014', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0014 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe der LF-SZR (Kategorie B), zu der eine LF-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0015]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0015', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0015 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der ÜNB zum Aktivierungsbeginn für das Bilanzierungsgebiet zuständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Spannungsebene und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0016]
  EbdTableMetaData(ebd_code='E_0016', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0017]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0017', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0017 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der BG-CL der Versionsangabe der BG-SZR (Kategorie B), zu der eine BG-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der BG-CL nicht ent-halten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung \nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der BG-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zu-geordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der BG-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB (über LF) und ÜNB ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB (über LF) und ÜNB ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB (über LF) und ÜNB ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0018]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0018', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0018 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0019]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0019', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0019 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0020]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0020', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0020 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die ID bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist genau eines der angegebenen Bilanzierungsgebiete das Bilanzierungsgebiet des Empfängers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet des benachbarten NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Empfänger zum Aktivierungsbeginn für eines der zwei angegebenen Bilanzierungsgebiete zuständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet des verantwortlichen NB, Bilanzierungsgebiet des benachbarten NB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0021]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0021', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0021 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0022]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0022', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0022 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Abbestellung fristgerecht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Abbestellung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0023]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0023', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0023 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Hat der BKV für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0024]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0024', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0024 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet des verantwortlichen NB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet des verantwortlichen NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet des benachbarten NB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet des benachbarten NB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für eines der zwei angegebenen Bilanzierungsgebiete?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet des verantwortlichen NB, Bilanzierungsgebiet des benachbarten NB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0025]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0025', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0025 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Hat der BKV dem BIKO für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Falsche Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV dem BIKO für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Falsche Aggregationsebene RZ'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0026]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0026', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0026 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='6', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code='A03', note='Datenstatus „Abgerechnete Daten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='7', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus „Abgerechnete Daten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='1', instruction_text='Je höchster Version der BK-SZR mit dem Datenstatus „Abrechnungsdaten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat erfolgen nachfolgende Prüfungen:'), MultiStepInstruction(first_step_number_affected='7', instruction_text='Die folgenden Aktionen sind je zugehörigem MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0027]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0027', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0027 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Existiert bereits ein abweichendes Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Regelzone und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits für das genannte Tupel aus Aggregationsverantwortlicher, Bilanzierungsgebiet, Regelzone und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vor-handen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der ÜNB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung \nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0028]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0028', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0028 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0029]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0029', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0029 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Eingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0030]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0030', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0030 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Eingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0031]
  EbdTableMetaData(ebd_code='E_0031', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0032]
  EbdTableMetaData(ebd_code='E_0032', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0033]
  EbdTableMetaData(ebd_code='E_0033', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0034]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0034', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0034 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für das angegebene Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungsgebiet, Bilanzkreis und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet, Bilanzkreis und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der Bilanzkreis zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nOBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0035]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0035', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0035 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Aktivierungsende in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der MaBiS-ZP zum Aktivierungsende bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind für den MaBiS-ZP Zeitreihen nach dem Deaktivierungszeitpunkt bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0036]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0036', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0036 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang einer Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0038]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0038', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0038 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0039]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0039', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0039 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in dem angefragten Gebiet (Bilanzierungsgebiet oder Regelzone) für diesen Bilanzkreis LF-SZR zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0040]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0040', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0040 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der NZR den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0041]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0041', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0041 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0042]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0042', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0042 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='6', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code='A01', note='Datenstatus „Abrechnungsdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A02', note='Datenstatus „Prüfdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='7', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus Abrechnungsdaten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='7', instruction_text='Die folgenden Aktionen sind je zugehörigem MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0043]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0043', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0043 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Befindet sich der MaBiS-ZP auf der Aggregationsebene RZ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der BKV für den BK dieses MaBiS-ZP in diesem Bilanzierungsmonat die Aggregationsebene RZ abbestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der BKV für diesen Bilanzierungsmonat bereits mit-geteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Hat der BKV für diesen Bilanzierungsmonat bereits mitgeteilt, dass die weiteren Prüfungen auf Ebene des BG stattfinden müssen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note='Setzen des Datenstatus für die Version des MaBiS-ZP auf der Aggregationsebene RZ')], use_cases=None), EbdTableRow(step_number='9', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code='A01', note='Datenstatus „Abrechnungsdaten“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“\nSetzen des Datenstatus für die der Version des MaBiS-ZP auf der Aggregationsebene RZ zugehörigen Version des MaBiS-ZP auf der Aggregationsebene BG')], use_cases=None), EbdTableRow(step_number='12', description='Hat die zugehörige Version auf der Aggregationsebene RZ den Datenstatus Abrechnungsdaten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='12', instruction_text='Die folgenden Aktionen sind je zugehörigen MaBiS-ZP auf der Aggregationsebene BG zu durchlaufen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0045]
  EbdTableMetaData(ebd_code='E_0045', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0046]
  EbdTableMetaData(ebd_code='E_0046', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0047]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0047', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0047 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe der LF-SZR (Kategorie A), zu der eine LF-CL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz bzw. ergänzte Markt-lokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die veranschlagte Prognosemenge (JVP, spezifische Arbeit, usw.) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachstehenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0048]
  EbdTableMetaData(ebd_code='E_0048', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird und ausschließlich die Liste versandt wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0049]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0049', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0049 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-CL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-CL der Versionsangabe einer vorliegenden LF-SZR (Kategorie A)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und LF ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP, spezifische Arbeit, usw.) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachstehenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0051]
  EbdTableMetaData(ebd_code='E_0051', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0052]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0052', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0052 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges BG-CL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nAbonnement wurde nicht bestellt (bedeutet auch, dass ein Abonnement für diesen Zeitraum bereits beendet wurde).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der BG-CL der Versionsangabe einer vorliegenden BG-SZR (Kategorie B)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der BG-CL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der BG-CL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zu-geordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der BG-CL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht das normierte Profil dem zwischen NB (über LF) und ÜNB ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB (über LF) und ÜNB ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis der Summe der 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Entspricht der Zeitreihentyp dem zwischen NB (über LF) und ÜNB ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0053]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0053', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0053 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der BG-SZR mit dem Daten-status „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der BG-SZR mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0054]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0054', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0054 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0055]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0055', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0055 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Aktueller Datenstatus\nHinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0056]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0056', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0056 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der BK-SZR mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version (der BK-SZR mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0057]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0057', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0057 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0058]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0058', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0058 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0059]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0059', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0059 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version des DZÜ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version des DZÜ mit dem Daten-status „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0061]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0061', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0061 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung innerhalb der Clearingphase für DZÜ der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0062]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0062', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0062 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BG-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0063]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0063', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0063 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BK-SZR (Kategorie A) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0064]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0064', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0064 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der BK-SZR (Kategorie B) den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0065]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0065', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0065 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist für die Version der Zeitreihe des DZÜ für den Bilanzierungsmonat eine DZÜ-Liste mit identischer Version und identischem Bilanzierungsmonat zu diesem MaBiS-ZP vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDZÜ-Liste nicht vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entsprechen die Energiemengen des DZÜ den auf Basis des Prüfergebnisses der DZÜ-Liste ermittelten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0066]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0066', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0066 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der NZR mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungs-monat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus "Abgerechnete Daten KBKA" für die höchste Version der NZR mit dem Datenstatus "Abgerechnete Daten" oder "Abrechnungsdaten KBKA" in diesem Bilanzierungsmonat')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0067]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0067', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0067 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für die Clearingphase BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0068]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0068', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0068 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in dem angefragten Gebiet (Bilanzierungsgebiet oder Regelzone) für diesen Bilanzkreis LF-SZR zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0069]
  EbdTableMetaData(ebd_code='E_0069', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0070]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0070', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0070 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der DZÜ-Liste innerhalb der Clearingphase für DZÜ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nEingang liegt nicht innerhalb der Clearingphase DZÜ'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die Marktlokation bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation ist nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht das Bilanzierungsgebiet dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Entspricht der Bilanzkreis dem zwischen NB (über LF) und ÜNB ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entspricht der Bilanzierungsbeginn der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsende der Erwartung des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das normierte Profil dem zwischen NB und LF ausgetauschten normierten Profil?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht die Versionsangabe des Profils der zwischen NB und ÜNB für SLS ausgetauschten Version des Profils?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht die veranschlagte Prognosemenge (JVP) der zwischen NB und LF ausgetauschten Prognosemenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die tatsächlich bilanzierte Menge der erwarteten bilanzierten Menge (monatlich gemessene Menge auf Basis von 1/4-h-Werten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Entspricht der Zeitreihentyp dem zwischen NB und LF ausgetauschten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der Übertrag der Energiemenge der Marktlokation aus der ÜNB-DZR in die NB-DZR berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen \nIst mit Werten des NB zu allen Stammdaten gefüllt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='2', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0071]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0071', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0071 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Redispatch-Bilanzkreis des ANB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für den angegebenen Redispatch-Bilanzkreis des NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungs-gebiet, Redispatch-Bilanzkreis des ANB, Bilanzkreis des LF und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungs-gebiet, Redispatch-Bilanzkreis des ANB, Bilanzkreis des LF und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Bilanzkreis des LF zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nBilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Passt die Angabe des Mediums zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMedium nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0072]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0072', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0072 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Redispatch-Bilanzkreis des ANB zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0073]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0073', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0073 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0074]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0074', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0074 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0075]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0075', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0075 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der AAÜZ mit dem Daten-status „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0076]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0076', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0076 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0077]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0077', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0077 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0078]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0078', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0078 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Aktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Aktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRegelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist das Bilanzierungsgebiet zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der Redispatch-Bilanzkreis des ANB zum Aktivierungsbeginn in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist der Sender zum Aktivierungsbeginn der verantwortliche NB für den angegebenen Redispatch-Bilanzkreis des ANB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Existiert bereits ein abweichendes Tupel aus Bilanzierungsgebiet, Redispatch-Bilanzkreis des ANB, Redispatch-Bilanzkreis des anfNB und ZRT unter der ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nAbweichender MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Existiert bereits für das genannte Tupel aus Bilanzierungsgebiet, Redispatch-Bilanzkreis des ANB, Redispatch-Bilanzkreis des anfNB und ZRT eine abweichende ID des MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nAbweichende ID zum MaBiS-ZP bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Redispatch-Bilanzkreis des anfNB zum Aktivierungsbeginn gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des anfNB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB zur Aktivierung des ZRT berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nZRT Aktivierung nicht berechtigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Passt die Angabe des Mediums zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nMedium nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der MaBiS-ZP zum Zeitpunkt der Aktivierung bereits aktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nMaBiS-ZP bereits aktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Zustimmung\nAktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0079]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0079', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0079 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt die Deaktivierung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Erfolgt die Deaktivierung zum Monatsersten 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nGewählter Zeitpunkt nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Bilanzierungsgebiet zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Redispatch-Bilanzkreis des ANB zum Zeitpunkt der Deaktivierung in der Regelzone des BIKO gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRedispatch-Bilanzkreis des ANB nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist der MaBiS-ZP zum Zeitpunkt der Deaktivierung bereits deaktiviert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMaBiS-ZP bereits deaktiviert'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind für den MaBiS-ZP Zeitreihen nach dem Zeitpunkt der Deaktivierung bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDeaktivierung, Zeitreihen vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung \nDeaktivierung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0080]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0080', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0080 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Gewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Frist von 2 WT vor dem erforderlichen Versand der Zeitreihe nach der Aktivierung eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Zeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Version nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0081]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0081', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0081 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Prüfmitteilung nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Fristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0082]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0082', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0082 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die BKA (ohne KBKA) erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Datenstatus „Abgerechnete Daten“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“ in diesem Bilanzierungsmonat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Datenstatus „Abgerechnete Daten KBKA“ für die höchste Version der AAÜZ mit dem Datenstatus „Abrechnungsdaten“, „Abgerechnete Daten“ oder „Abrechnungsdaten KBKA“ in diesem Bilanzierungsmonat.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0083]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0083', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0083 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe vor Ablauf der Frist für den Erstaufschlag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Datenstatus „Prüfdaten“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0084]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0084', chapter='Dummy Chapter', section='Dummy Section', role='BIKO', ebd_name='E_0084 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die eingegangene Prüfmitteilung positiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA02\tDatenstatus „Prüfdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Datenstatus „Prüfdaten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Hinweis: A** wird durch richtigen Code aus dem System des BIKO ersetzt. Mögliche Codes sind:\nA01\tDatenstatus „Abrechnungsdaten“\nA03\tDatenstatus „Abgerechnete Daten“\nA04\tDatenstatus „Abrechnungsdaten KBKA“'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt der Eingang der Prüfmitteilung vor Ablauf der Frist für die Clearingphase der BKA (ohne KBKA)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Datenstatus „Abrechnungsdaten“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Datenstatus „Abrechnungsdaten KBKA“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0093]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0093', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0093 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Erfolgt der Eingang der Zeitreihe nach Ablauf der Clearingfrist für die KBKA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MaBiS-ZP zum betrachteten Bilanzierungsmonat aktiv?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Abweisung\nGewählter Zeitraum nicht zulässig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat und MaBiS-ZP bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die Version der Zeitreihe des MaBiS-ZP höher als die bisher höchste verarbeitete Version der Zeitreihe für diesen Bilanzierungsmonat und diesen MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Abweisung\nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Energiemengen der LF-AASZR den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0094]
  EbdTableMetaData(ebd_code='E_0094', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird und ausschließlich die Liste versandt wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0095]
  EbdTableMetaData(ebd_code='E_0095', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0096]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0096', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0096 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für diesen MaBiS-ZP ein gültiges LF-AACL Abonnement vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Versionsangabe in der LF-AACL der Versionsangabe einer vorliegenden LF-AASZR?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist eine erwartete Marktlokation in der LF-AACL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in der LF-AACL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die in der LF-AACL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Bilanzkreis dem zwischen NB und LF aus-getauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht die tatsächliche Ausfallarbeitsmenge der er-warteten Ausfallarbeitsmenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='3', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0097]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0097', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0097 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Gültigkeit (Monat) dem angefragten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung der gesamten Liste\nZeitraum nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht der MaBiS-ZP dem angefragten MaBiS-ZP?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung der gesamten Liste \nMaBiS-ZP entspricht nicht dem angefragten MaBiS-ZP'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht die Versionsangabe in der LF-AACL der Versionsangabe der LF-AASZR, zu der eine LF-AACL angefordert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung der gesamten Liste \nVersion nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine erwartete Marktlokation in der LF-AACL nicht enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Korrekturliste wegen Ablehnung\nZusätzlicher Datensatz / ergänzte Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist in der LF-AACL eine Marktlokation enthalten, die im Bilanzierungsmonat dem LF zur Bilanzierung nicht zugeordnet ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Korrekturliste wegen Ablehnung\nMarktlokation falschem LF zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die in der LF-AACL enthaltene Marktlokation dem MaBiS-ZP zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Korrekturliste wegen Ablehnung\nZu viele Marktlokationen enthalten / entfallene Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht das Bilanzierungsgebiet dem zwischen NB und LF ausgetauschten Bilanzierungsgebiet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Entspricht der Bilanzkreis dem zwischen NB und LF ausgetauschten Bilanzkreis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Entspricht die tatsächliche Ausfallarbeitsmenge der er-warteten Ausfallarbeitsmenge?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Korrekturliste wegen Ablehnung\nBilanzierungsrel. Daten nicht korrekt / fehlen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Je Marktlokation erfolgen die nachfolgenden Prüfungen:')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0098]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0098', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0098 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der AAÜZ den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0099]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0099', chapter='Dummy Chapter', section='Dummy Section', role='BKV', ebd_name='E_0099 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt die Version der Zeitreihe des MaBiS-ZP für diesen Bilanzierungsmonat bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Abweisung\nZeitreihe bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entsprechen die Energiemengen der AAÜZ den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemenge falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZeitreihe akzeptiert')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0100]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0100', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0100 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Gehört das empfangene Profil bzw. die Profilschar zu einer zuvor abonnierten Profilgruppe aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Profil bzw. Profilschar gehört nicht zu einer zuvor abonnierten Profilgruppe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde eine Profilschar empfangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note='Hinweis: Es wurde ein Profil empfangen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die übermittelte Version des Profils für den übermittelten Zeitraum höher als die bisher höchste verarbeitete Version des Profils des gleichen Zeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Version des Profils nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die übermittelte Version der Profilschar für den übermittelten Beginnzeitpunkt höher als die bisher höchste verarbeitete Version der Profilschar zu diesem Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Version der Profilschar nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Stimmt die angegebene Maßeinheit der verwendeten OBIS-Kennzahl mit der Maßeinheit des Normierungsfaktors aus der Liste der Profildefinitionen überein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Maßeinheit weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Entspricht die niedrigste Temperaturmaßzahl der Profilschar der Begrenzungskonstante aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Niedrigste Temperaturmaßzahl weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht die Anzahl der Temperaturmaßzahlen der Profilschar der erwarteten Anzahl der Temperaturmaßzahlen gemäß der Bezugstemperatur und der Begrenzungskonstante aus der Liste der Profildefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Anzahl der Temperaturmaßzahlen weicht von Liste der Profildefinitionen ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0101]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0101', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0101 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Gehört das empfangene Profil zu einer zuvor abonnierten Profilgruppe aus der Liste der Profildefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Empfangenes Profil gehört nicht zu einer zuvor abonnierten Profilgruppe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die übermittelte Version des Profils für den übermittelten Zeitraum höher als die bisher höchste verarbeitete Version des Profils des gleichen Zeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Version des Profils nicht zugelassen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0102]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0102', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0102 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wird die ID der Netzgangzeitreihe bereits für die Identifikation eines Nicht-MaBiS-ZP verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nID bereits außerhalb MaBiS verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Zuordnung der Netzgangzeitreihe zur Netzzeitreihe der Vereinbarung zur messtechnischen Abgrenzung der beiden benachbarten NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nZuordnung passt nicht zur Vereinbarung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Absender zum Zuordnungsbeginn an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Berechtigung für die Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger zum Zuordnungsbeginn an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKeine Beteiligung an der Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Existiert zum Zuordnungsbeginn bereits eine Zuordnung der angegebenen Netzgangzeitreihe zu einer Netzzeitreihe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nZuordnung bereits vorhanden\nHinweis: In der Antwort ist die zugeordnete Netzzeitreihe anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist ein nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nZuordnung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0103]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0103', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0103 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entspricht die Beendigung der Zuordnung der Netzgangzeitreihe zur Netzzeitreihe der Vereinbarung zur messtechnischen Abgrenzung der beiden benachbarten NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBeendigung der Zuordnung passt nicht zur Vereinbarung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Absender zum Zuordnungsende an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine Berechtigung für die Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Empfänger zum Zuordnungsende an der Netzzeitreihe beteiligt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Beteiligung an der Netzzeitreihe'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Existiert zum Zuordnungsende eine Zuordnung der angegebenen Netzgangzeitreihe zu der angegebenen Netzzeitreihe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZuordnung nicht vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.\nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nBeendigung der Zuordnung durchgeführt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0104]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0104', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0104 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in der Liste LF-SZR enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0105]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0105', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0105 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind in der Liste LF-SZR enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein Lieferant zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0200]
  EbdTableMetaData(ebd_code='E_0200', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0090_Bestätigung Kündigung MSBS\nS_0054_Ablehnung Kündigung MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0201]
  EbdTableMetaData(ebd_code='E_0201', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0055_Bestätigung Anmeldung MSB\nS_0056_Ablehnung Anmeldung MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0202]
  EbdTableMetaData(ebd_code='E_0202', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0059_Bestätigung Ende MSB\nS_0060_Ablehnung Ende MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0203]
  EbdTableMetaData(ebd_code='E_0203', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0061_ORDRSP Fortführungsbestätigung MSBA\nS_0062_ORDRSP Ablehnung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0204]
  EbdTableMetaData(ebd_code='E_0204', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0065_Ankündigung zum Eigenausbau\nS_0066_Mitteilung, kein Eigenausbau MSBA')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0205]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0205', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0205 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt ein gültiger Vertrag zwischen MSB und LF vor, der die Rechnungsabwicklung des Messstellenbetriebs an den LF regelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein gültiger Vertrag'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Sind alle Messlokationen der angefragten Marktlokationen mit kME ausgestattet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausschließlich mit kME ausgestattet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Lässt das Vertragsverhältnis mit dem Kunden die Abrechnung des Messstellenbetriebs zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Vertragsverhältnis mit Dritten lässt Abrechnung des Messstellenbetriebs nicht zu'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Lässt das Vertragsverhältnis mit dem Kunden das im Angebot benannte Beginndatum zum Messstellenbetrieb zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Vertragsverhältnis mit Dritten lässt das Beginn-datum nicht zu'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Handelt es sich um ein Angebot auf Basis eines Preisblattes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt dem LF ein gültiges Preisblatt mit allen im Angebot an-gegebenen Preisschlüsselstämmen bzw. mit allen im Angebot angegebenen Artikel-ID vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Kein Preisblatt vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entsprechen die angebotenen Positionen dem Vertragsverhältnis mit dem Kunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Angebotspositionen abweichend zum Vertrags-verhältnis'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bestellung versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0206]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0206', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0206 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht ein Vertragsverhältnis über die Rechnungsabwicklung über den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nKeine Vereinbarung über die Abrechnung MSB über den LF'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0207]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0207', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0207 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt ein gültiger Vertrag zwischen MSB und LF vor, der die Rechnungsabwicklung des Messstellenbetriebs an den LF regelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Kein gültiger Vertrag'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der angefragte Beginn der Übernahme der Abrechnung des Messstellenbetriebs im Zeitraum einer vom MSB bereits bestätigten Vereinbarung mit dem anfragenden LF zur Abwicklung des Messentgeltes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Abwicklung des Messentgelts schon vollzogen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Sind alle Messlokationen der angefragten Marktlokation mit kME ausgestattet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausschließlich mit kME ausgestattet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Besteht ein Vertrag mit dem Anschlussnehmer gemäß MsbG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Vertragsverhältnis mit Anschlussnehmer lässt das nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Besteht ein nicht konkludent geschlossener Vertrag für den Messstellenbetrieb mit dem Anschlussnutzer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist eine Abrechnung über den LF durch den Vertrag ausgeschlossen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Vertragsverhältnis mit dem Dritten lässt das nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wird das Entgelt bereits über die erzeugende Marktlokation entrichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Entgelt wird über die erzeugende Marktlokation entrichtet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wird das Entgelt über den Lieferanten einer anderen Marktlokation entrichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Entgelt wird den Lieferanten einer anderen Marktlokation entrichtet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Möchte der MSB zum angefragten Termin kein Angebot erstellen und verzichtet auf die Erstellung und Versendung des Angebots?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt bereits eine mit dem LF vereinbarte Rechnungsabwicklung für diese Marktlokation zu einem späteren Zeitpunkt vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Die vereinbarte Rechnungsabwicklung für diese Marktlokation bleibt erhalten. \nFür das Zeitintervall zwischen angefragtem Termin und vereinbarter Rechnungsabwicklung wird kein Messentgelt in Rechnung gestellt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Der MSB erstellt zum angefragten Termin kein Angebot.\nHinweis: Möchte der MSB die Abrechnung zu einem späteren Zeitpunkt starten, so wird er gemäß Use-Case „Angebot zur Rechnungsabwicklung des Messstellenbetriebes über den LF durch den MSB“ ein Angebot zusenden.')], use_cases=None), EbdTableRow(step_number='11', description='Liegt der angefragte Beginn der Übernahme der Abrechnung des Messstellenbetriebs in einem bereits vom MSB abgerechneten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Angebot versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Hat der LF zum nächstmöglichen Termin angefragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Beginndatum liegt im bereits abgerechneten Zeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0208]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0208', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0208 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Lässt das Vertragsverhältnis mit dem Kunden das im Angebot benannte Beginndatum zum Messstellenbetrieb zu?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Vertragsverhältnis mit Dritten lässt das Beginn-datum nicht zu.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um ein Angebot auf Basis eines Preisblattes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt dem LF ein gültiges Preisblatt mit allen im Angebot angegebenen Preisschlüsselstämmen bzw. mit allen im Angebot angegebenen Artikel-ID vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Kein Preisblatt vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die angebotenen Positionen dem Vertrags-verhältnis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Angebotspositionen abweichend zum Vertrags-verhältnis'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bestellung versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0209]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0209', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0209 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht ein Vertragsverhältnis über die Rechnungsabwicklung über den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLF ist nicht Zahler des Messstellenbetriebs'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Beendigungsdatum nach dem Stichtag, der wie folgt berechnet wird: Eingangsdatum der Nachricht - (6 Wochen + 5 WT)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0210]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0210', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0210 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum kleiner gleich dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt das Rechnungsdatum vor dem Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer LF lehnt die Zahlung des Messstellenbetriebs ab. Der LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer LF lehnt die Zahlung des Messstellenbetriebs ab. Eine Ablehnung der Zahlung wird durch den LF begründet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält einen bereits abgerechnetes Zeitintervall.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='95'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='95', description='Wurde das in der Rechnung genannte Angebot auf Basis eines Preisblatts gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis: In dem Angebot des MSB an den LF wurde ein individuelles Angebot angegeben.')], use_cases=None), EbdTableRow(step_number='100', description='Liegt für jeden Zeitpunkt des abgerechneten Zeitraums ein gültiges Preisblatt „Preisblatt Messstellenbetrieb“ vor?\nHinweis: Es können mehrere aufeinanderfolgende Preisblätter für einen Abrechnungszeitraum vorliegen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDem Lieferanten liegt kein gültiges Preisblatt Messstellenbetrieb vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde das in der Rechnung genannte Angebot des MSB zur Übernahme der Rechnungsabwicklung des Messstellenbetriebs für diese Marktlokation angenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem Lieferanten für diese Marktlokation vereinbart.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist das in der Rechnung genannte Angebot das jüngste bestätigte Angebot, das genau zu diesem Zeitpunkt beginnt?\nHinweis: Das jüngste bestätigte Angebot richtet sich nach dem Nachrichtendatum (Segment DTM+137) der QUOTES vom MSB.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nDie Referenz erfolgt nicht auf das jüngste Angebot zu diesem Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die Abrechnung des Messstellenbetriebs zwischen Lieferanten und MSB für diese Marktlokation für den abgerechneten Zeitraum vereinbart?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDie Abrechnung des Messstellenbetriebs ist nicht mit dem Lieferanten für diese Marktlokation für den abgerechneten Zeitraum vereinbart.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Liegt im Abrechnungszeitraum mindestens ein weiteres bestätigtes Angebot vor, welches zu einem Zeitpunkt beginnt, der innerhalb des Abrechnungszeitraumes liegt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung auf Kopfebene\nEs dürfen nicht mehrere bestätigte Angebote in einer Rechnung abgerechnet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde das Angebot auf Basis eines Preisblatts gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='303'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='309'), result_code=None, note='Hinweis: In dem Angebot des MSB an den LF wurde ein individuelles Angebot angegeben.')], use_cases=None), EbdTableRow(step_number='303', description='Ist der Zeitraum der Rechnungsposition vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nDer Zeitraum der Rechnungsposition ist nicht vollständig im Gültigkeitszeitraum eines oder mehrerer Preisblätter enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='304'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='304', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt oder den Preisblättern, die im Zeitraum der Rechnungsposition gültig sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt bzw. den Preisblättern des MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='309', description='Entspricht der Preis aus der Rechnungsposition dem Preis des individuellen Angebots?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='310'), result_code='A29', note='Cluster: Ablehnung auf Positionsebene\nDer Preis aus der Rechnungsposition entspricht nicht dem vereinbarten Preis aus dem individuellen Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Liegt das Enddatum der Rechnungsposition nach dem Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition liegt nach dem Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegt das Beginndatum der Rechnungsposition vor dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A18', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der erwartete Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nUnerwarteter Abrechnungszeitraum wird abgerechnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0211]
  EbdTableMetaData(ebd_code='E_0211', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0217]
  EbdTableMetaData(ebd_code='E_0217', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Diese Codeliste befindet sich noch im Datenformat.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0218]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0218', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0218 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Lieferrichtung der Marktlokation korrekt angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLieferrichtung der Marktlokation ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist im Geschäftsvorfall der Status der Berechnungsformel für die Marktlokation mit „Berechnungsformel muss beim Absender angefragt werden“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nBerechnungsformel muss bilateral ausgetauscht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist im Geschäftsvorfall der Status der Berechnungsformel für die Marktlokation mit „Berechnungsformel besitzt keine Rechenoperation“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist in den zuvor ausgetauschten Stammdatenmeldungen (z.B.\xa0Anmeldebestätigung, Stammdatenänderung (inklusive Lokationsbündelstrukturänderung)) gemäß dem „Gültig-Ab“ Datum genau eine Messlokation dieser Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Marktlokation ist nicht genau eine Messlokation zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nEnergiemenge der Marktlokation ist mit der Energiemenge der Messlokation identisch')], use_cases=None), EbdTableRow(step_number='5', description='Liegt eine Änderung der Lokationsbündelstruktur durch den NB vor, die durch Stammdatenänderung übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist das „Gültig ab“-Datum der Berechnungsformel tagidentisch mit dem Datum der Strukturänderung des Lokationsbündels?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\n„Gültig ab“-Datum der Berechnungsformel unplausibel.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Anzahl der gemeldeten / vorliegenden Mess-lokationen aus den Stammdatenmeldungen (z. B. Anmeldebestätigung, Stammdatenänderung) gemäß dem „Gültig ab“-Datum kleiner als in der Berechnungsformel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEs sind zu viele Messlokationen in der Berechnungsformel vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die Anzahl gemäß der gemeldeten/vorliegenden Messlokationen aus den Stammdatenmeldungen (z.\xa0B. Anmeldebestätigung, Stammdatenänderung) gemäß dem „Gültig ab“-Datum größer als in der Berechnungsformel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEs fehlen Messlokationen in der Berechnungs-formel.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Sind alle ID der Messlokationen in der Berechnungsformel mit den zuvor in den Stammdatenmeldungen (z. B. Anmeldebestätigung, Stammdatenänderung) gemeldeten ID der Messlokationen identisch?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nID der Messlokationen stimmen nicht überein'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Existiert für jede Flussrichtung der in der Berechnungsformel vorhandenen Messlokationen mindestens eine zuvor in den Stammdatenmeldungen (z.\xa0B. Anmeldebestätigung, Stammdatenänderung) ausgetauschte OBIS-Kennzahl* mit identischer Flussrichtung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDie Flussrichtung mindestens einer Messlokation ist nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nZustimmung bei berechneter Marktlokation')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0219]
  EbdTableMetaData(ebd_code='E_0219', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0073_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0220]
  EbdTableMetaData(ebd_code='E_0220', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0221]
  EbdTableMetaData(ebd_code='E_0221', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0075_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0222]
  EbdTableMetaData(ebd_code='E_0222', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0225]
  EbdTableMetaData(ebd_code='E_0225', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0074_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0226]
  EbdTableMetaData(ebd_code='E_0226', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0076_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0227]
  EbdTableMetaData(ebd_code='E_0227', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0228]
  EbdTableMetaData(ebd_code='E_0228', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0078_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0229]
  EbdTableMetaData(ebd_code='E_0229', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0230]
  EbdTableMetaData(ebd_code='E_0230', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0079_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0231]
  EbdTableMetaData(ebd_code='E_0231', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0232]
  EbdTableMetaData(ebd_code='E_0232', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0057_Statusmeldung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0233]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0233', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0233 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die für den Rollout vorgesehene Messlokation ein Bestandsschutz gemäß §19 Abs. 5 MsbG vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wird auf den Bestandsschutz gemäß § 19 Abs. 5 MsbG für die Messlokation verzichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nBestandsschutz gemäß § 19 Abs. 5 MsbG für die Messlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Selbsteinbau eines iMS oder einer mME geplant?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nSelbsteinbau eines iMS oder einer mME geplant'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wird auf den Selbsteinbau eines iMS oder einer mME verzichtet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nAuf Selbsteinbau eines iMS oder einer mME wird verzichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nZum jetzigen Zeitpunkt noch keine Aussage hin-sichtlich Selbsteinbau möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0240]
  EbdTableMetaData(ebd_code='E_0240', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0063_Bestätigung Verpflichtungsanfrage\nS_0064_Ablehnung Verpflichtungsanfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0241]
  EbdTableMetaData(ebd_code='E_0241', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0243]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0243', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0243 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.')], use_cases=None), EbdTableRow(step_number='6', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0245]
  EbdTableMetaData(ebd_code='E_0245', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0246]
  EbdTableMetaData(ebd_code='E_0246', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0247]
  EbdTableMetaData(ebd_code='E_0247', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0067_ORDRSP Bestellbestätigung\nS_0068_ORDRSP Abl. der Bestellung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0248]
  EbdTableMetaData(ebd_code='E_0248', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Diese Codeliste befindet sich noch im Datenformat.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0249]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0249', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0249 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das gewünschte Änderungsdatum mindestens 20 WT nach dem Nachrichteneingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nÄnderung kann durchgeführt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0250]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0250', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0250 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das gewünschte Änderungsdatum mindestens 20 WT nach dem Nachrichteneingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFrist nicht eingehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nÄnderung kann durchgeführt werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0251]
  EbdTableMetaData(ebd_code='E_0251', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0077_ORDRSP Ablehnung der Reklamation')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0252]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0252', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0252 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wird die Übermittlung von Werten an die Marktrolle ESA grundsätzlich angeboten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer MSB bietet keine freiwillige Übermittlung von Werten an die Marktrolle ESA an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wird das vom ESA gewünschte Messprodukt entsprechend der Codeliste der Messprodukte angeboten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDas vom ESA gewünschte Messprodukt wird vom MSB nicht angeboten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt die vertragliche Grundlage zur Anfrage und Übermittlung der Werte und Abrechnung der erbrachten Dienstleistung vom MSB an den ESA beim MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nVertragliche Grundlage des ESA liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt dem MSB eine gültige datenschutzrechtliche Einwilligung (wie z. B. das BDEW-Muster „Einwilligungserklärung in die Verarbeitung personenbezogener Daten nach DS-GVO - \nAnfrage und Übermittlung von Messprodukten \ngemäß BNetzA-Festlegung BK6-20-160“) zur Anfrage und Übermittlung von Messprodukten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie unterzeichnete Einwilligung des Anschlussnutzers für die Lokation liegt nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Sind die Daten in der Einwilligung plausibel und vollständig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVorliegende Einwilligung ist nicht plausibel oder vollständig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ermöglicht die vorhandene Gerätetechnik die Übermittlung der angefragten Werte entsprechend dem Messprodukt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie Gerätetechnik misst die angeforderten Messwerte nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Handelt es sich um eine Anfrage von Werten auf Ebene der Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist der MSB an allen der Marktlokation zugeordneten Messlokationen auch der MSB der Messlokation(en)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDer MSB der Marktlokation ist nicht zeitgleich der allen Messlokation(en) zugeordnete MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note=None)], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0253]
  EbdTableMetaData(ebd_code='E_0253', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0254]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0254', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0254 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich bei der Bestellung um eine Bestellung für turnusmäßige/regelmäßige Übermittlung (Abo) von Werten an den ESA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nEs handelte sich bei der Bestellung um eine einmalige Übermittlung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist das gewünschte Beendigungsdatum größer als der Beginnzeitpunkt der turnusmäßigen/regelmäßigen Übermittlung (Abo)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDie Bestellung ist zu stornieren.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wurde die Übermittlung von Werten bereits zu einem früheren oder zu dem in der Beendigung genannten Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie Übermittlung wurde bereits zu einem früheren oder zu dem in der Beendigung genannten Zeitpunkt beendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt das gewünschte Beendigungsdatum vor dem Zeitpunkt, für den die jüngsten Daten geliefert wurden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung \nEs wurden bereits Daten nach dem gewünschten Beendigungsdatum übermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nBeendigung wird bestätigt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0256]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0256', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0256 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Bindungsfrist des Angebots abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Akzeptiert der MSB die Bestellung auch bei abgelaufener Bindungsfrist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Bindungsfrist des Angebots ist abgelaufen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Handelt es sich bei der Bestellung um ein Abo?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Bietet der MSB das gewünschte Messprodukt zum Zeitraum / Zeitpunkt der Messwertermittlung als Abo an?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDer MSB sieht für das gewünschte Messprodukt keine Übermittlung als Abo vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Bietet der MSB das gewünschte Messprodukt zum Zeitraum / Zeitpunkt der Messwertermittlung als einmalige Übermittlung an?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDer MSB sieht für das gewünschte Messprodukt keine einmalige Übermittlung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die vertragliche Grundlage zur Anfrage und Übermittlung der Werte und Abrechnung der erbrachten Dienstleistung vom MSB an den ESA beim MSB zum Zeitraum / Zeitpunkt der Messwertermittlung noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDie vertragliche Grundlage zwischen dem MSB und dem ESA ist nicht mehr gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der MSB für den im Angebot spezifizierten Zeitraum / Zeitpunkt der Messwertermittlung der entsprechenden Lokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDer MSB ist der Lokation für den im Angebot spezifizierten Zeitraum / Zeitpunkt der Messwertermittlung nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die dem MSB vorliegende datenschutzrechtliche Einwilligung (wie z. B. das BDEW-Muster „Einwilligungserklärung in die Verarbeitung personenbezogener Daten nach DS-GVO - \nAnfrage und Übermittlung von Messprodukten \ngemäß BNetzA-Festlegung BK6-20-160“) zur Anfrage und Übermittlung von Messprodukten zum Zeitraum / Zeitpunkt der Messwertermittlung weiterhin gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDer Anschlussnutzer hat gegenüber dem ESA seine Einwilligung widerrufen oder ihre Gültigkeit ist abgelaufen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ermöglicht die vorhandene Gerätetechnik zum Zeitraum / Zeitpunkt der Messwertermittlung die Übermittlung der angefragten Werte entsprechend dem Messprodukt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDie Gerätetechnik misst die angeforderten Messwerte nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Handelt es sich um eine Bestellung von Werten auf Ebene der Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestellung ist angenommen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der MSB zum Zeitraum / Zeitpunkt der Messwertermittlung an allen der Marktlokation zugeordneten Messlokationen auch der MSB der Messlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer MSB der Marktlokation ist nicht zeitgleich der allen Messlokationen zugeordnete MSB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nBestellung ist angenommen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0257]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0257', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0257 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde die Bestellung des ESA durch den MSB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Bestellung des ESA wurde durch den MSB nicht bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Handelte es sich bei der Bestellung um ein turnusmäßige/regelmäßige Übermittlung (Abo)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note='Hinweis: Es handelte sich bei der Bestellung um eine einmalige Übermittlung.')], use_cases=None), EbdTableRow(step_number='3', description='Wurde die turnusmäßige/regelmäßige Übermittlung (Abo) von Werten bereits begonnen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMit der Übermittlung von Werten aus dem Abo wurde bereits begonnen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nStornierung wird bestätigt.')], use_cases=None), EbdTableRow(step_number='4', description='Ist die einmalige Übermittlung von Werten bereits erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie einmalige Übermittlung der Werte ist bereits erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nStornierung wird bestätigt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0258]
  EbdTableMetaData(ebd_code='E_0258', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0259]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0259', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0259 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum kleiner gleich dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt das Rechnungsdatum vor dem Ende des Abrechnungszeitraumes/Ausführungsdatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes/Ausführungsdatums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum/Ausführungsdatum der genannten Messlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer MSB ist der Messlokation nicht einen Tag des Abrechnungszeitraumes/Ausführungsdatums zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum/Ausführungsdatum der genannten Messlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer MSB lehnt die Zahlung ab. Eine Ablehnung der Zahlung wird durch den MSB begründet.\nHinweis: Der MSB gibt den erwarteten Abrechnungszeitraum/das erwartete Ausführungsdatum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist der Abrechnungszeitraum/ Ausführungsdatum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDie Rechnung enthält ein bereits abgerechnetes Zeitintervall/ einen bereits abgerechneten Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist die Frist der Fälligkeit unterschritten?\n(Zahlungsziel < 10 WT zum Rechnungseingangsdatum)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Handelt es sich um eine Geräteübernahme (Kauf/ Nutzungsüberlassung)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde das in der Rechnung genannte Angebot des MSB in der Bestellbestätigung im Prozess Geräteübernahme für diese Messlokation bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Angebot des MSB in der Bestellbestätigung im Prozess Geräteübernahme für diese Messlokation wurde nicht bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die in der Rechnung genannte Bestellung die jüngste bestätigte Bestellung, die genau zu diesem Zeitpunkt beginnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDie Referenz erfolgt nicht auf die jüngste Bestellung zu diesem Zeitpunkt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Handelt es sich um eine Geräteübernahme (Kauf/ Nutzungsüberlassung)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Entspricht die Rechnungsposition dem bestätigten Angebot?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDie Rechnungsposition entspricht nicht dem bestätigten Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Ist das Enddatum der Rechnungsposition gleich oder nach dem Enddatum des Abrechnungszeitraums / Ausführungsdatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum der Rechnungsposition ist gleich oder nach dem Enddatum des Abrechnungszeitraums/ Ausführungsdatums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Ist das Beginndatum der Rechnungsposition vor oder gleich dem Beginndatum des Abrechnungszeitraums?\nHinweis: Bei Nutzung des Ausführungsdatums in der Rechnung Prüfschritt mit ja beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum der Rechnungsposition liegt vor dem Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Wird mit der Rechnungsposition der richtige Abrechnungszeitraum abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nFalscher Abrechnungszeitraum wird abgerechnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Entspricht der Preis in der Position dem vereinbarten Preis?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A16', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition passt nicht zum vereinbarten Preis.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A17', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='380'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='380'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='380', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='390'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='390', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen vereinbarte Positionen in der Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A18', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden.\nHinweis: Fehlende Positionen sind im Freitextfeld zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A19', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A20', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0260]
  EbdTableMetaData(ebd_code='E_0260', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0261]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0261', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0261 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.')], use_cases=None), EbdTableRow(step_number='6', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0264]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0264', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0264 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Angebot, dass zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischen Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0265]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0265', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0265 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0266]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0266', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0266 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Angebot, dass zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Angebot.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='350'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischen Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0267]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0267', chapter='Dummy Chapter', section='Dummy Section', role='ESA', ebd_name='E_0267 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0300]
  EbdTableMetaData(ebd_code='E_0300', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0301]
  EbdTableMetaData(ebd_code='E_0301', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0047_Bestätigung Abmeldungsanfrage\nS_0048_Ablehnung Abmeldungsanfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0302]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0302', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0302 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde bereits zum identischen Abmeldedatum für die in diesem Geschäftsvorfall genannte Marktlokation der Geschäftsvorfall Lieferende positiv bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLieferende zum Abmeldedatum wurde bereits bestätigt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt der Transaktionsgrund Stilllegung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nAbmeldung wg. fehlender Zuordnungsermächtigung\nAbmeldung wegen fehlender Zuordnungsermächtigung aufgrund Änderung ZRT')], use_cases=None), EbdTableRow(step_number='3', description='Ist die Prognosegrundlage der Marktlokation auf Basis von Werten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Profilen')], use_cases=None), EbdTableRow(step_number='4', description='Liegt das Datum „Lieferende“ mindestens 1 WT nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEine Stilllegung einer Marktlokation mit Prognosegrundlage auf Basis von Werten kann nicht in die Vergangenheit gemeldet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBei Marktlokation mit Prognosegrundlage auf Basis von Werten muss Bilanzierungsende und Lieferende identisch sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt das Datum „Bilanzierungsende“ mindestens 3 WT nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nBilanzierungsfrist bei Marktlokationen mit Prognosegrundlage auf Basis von Profilen nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Liegt das Datum „Bilanzierungsende“ auf dem 1. eines Kalendermonates 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nBilanzierungsende liegt nicht auf dem Monatswechsel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Liegen dem LF Informationen darüber vor, dass die Marktlokation nicht stillgelegt wird/wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDem LF liegen Informationen vor, dass die Marktlokation nicht stillgelegt wird/wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nLieferende und Bilanzierungsende müssen bei Lieferende von NB an LF aufgrund entfallender oder fehlender Zuordnungsermächtigung synchron sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt das übermittelte Datum „Lieferende“ nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nLieferende bei Transaktionsgrund „Abmeldung wegen fehl. Zuordnungsermächtigung“ \noder\n„Abmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT“ muss immer in der Zukunft sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist das angegebene Datum „Lieferende“ der nächste 1.\xa0eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDas Lieferende bei Abmeldung wegen fehl. Zuordnungsermächtigung muss auf dem 1. eines Kalendermonats liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung Sonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.04.2024 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0303]
  EbdTableMetaData(ebd_code='E_0303', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0045_Bestätigung Kündigung\nS_0046_Ablehnung Kündigung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0304]
  EbdTableMetaData(ebd_code='E_0304', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0049_Bestätigung Anmeldung\nS_0050_Bestätigung Anmeldung Neuanl. u. LW m. Trbild. b. N-EE+N-KWKG\nS_0051_Ablehnung Anmeldung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0305]
  EbdTableMetaData(ebd_code='E_0305', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0051_Ablehnung Anmeldung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0306]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0306', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0306 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt das Abmeldedatum mindestens einen Tag nach dem Eingangsdatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung bei Aufhebung einer zu-künftigen Zuordnung wegen Auszug oder Still-legung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Eingangsdatum der Abmeldung mindestens 1 Monat vor dem Monatsletzten des gewünschten Abmeldedatums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung bei Transaktionsgründen für eine Abmeldung in der Zukunft.\nHinweis: Abmeldedatum kann ausschließlich ein Monatsletzter sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Erfolgt die Aufhebung einer zukünftigen Zuordnung zu dem gleichen Datum (Zeitpunkt), welcher dem Lieferanten im Lieferbeginn bestätigt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDie Aufhebung einer zukünftigen Zuordnung muss zum Datum (Zeitpunkt) angegeben werden, wie im Lieferbeginn bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt bereits eine bestätigte Abmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nLieferende wird zugestimmt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung Sonstiges \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0400]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0400', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0400 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt der übermittelte Kündigungstermin vor dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist in der Kündigung die Angabe der Identifikationslogik mit dem Wert „Marktlokations-ID“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wurde mit der in der Kündigung angegebenen ID der Marktlokation im IT-System des Empfängers eine Marktlokation identifiziert, welcher der Empfänger für mindestens einen Tag zugeordnet war bzw. ist bzw. sein wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Marktlokation ist nicht identifizierbar.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde mit allen zur Verfügung gestellten Informationen in der Kündigung ohne Berücksichtigung des Kundennamens unter Wahrung der gebotenen Sorgfalt genau eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entspricht der Kunde aus der Kündigung dem Vertragspartner beim Empfänger der Kündigung? (Identifizierung unter Wahrung der gebotenen Sorgfalt)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nAngefragter Kunde ist nicht der Vertragspartner beim LFA.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Wurde mit den zur Verfügung gestellten Informationen in der Kündigung mehr als eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Identifizierung einer Marktlokation.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht der Kunde aus der Kündigung bei exakt einer Marktlokation, dem Vertragspartner beim Empfänger der Kündigung, mit welchem der LFA zum Kündigungsdatum einen Vertrag hat? \n(Identifizierung unter Wahrung der gebotenen Sorgfalt)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMehrere Marktlokationen wurden identifiziert, Kunde war bei keiner bzw. mehreren Marktlokationen zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Handelt es sich bei dem identifizierten Objekt um einen Teil einer Kundenanlage, welches zum Kündigungsdatum + 1\xa0Tag nicht an der Marktkommunikation teilnimmt? \n(Teil einer Kundenanlage, welche dem NB nicht bekannt ist.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nTeil einer Kundenanlage, die derzeit nicht se-parat bilanziert wird.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt der in der Kündigung angefragte Termin vor dem Beginn des Vertrages zwischen dem Kunden und dem Empfänger?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEmpfänger ist zum angefragten Zeitpunkt nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Wurde der Vertrag bereits zu dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nVertrag wurde bereits zum angefragten Kündigungstermin gekündigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Wurde der Vertrag bereits zu einem Datum vor dem angefragten Kündigungstermin gekündigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nZum Kündigungstermin besteht kein Vertrags-verhältnis mehr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Handelt es sich um eine Kündigung, welche zu einem fixen Termin ausgesprochen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nZustimmung\nHinweis: Es wurde zum nächstmöglichen Termin gekündigt.')], use_cases=None), EbdTableRow(step_number='13', description='Ist der Vertrag zum übermittelten Kündigungstermin unter Einhaltung der Kündigungsfrist unter Berücksichtigung des Eingangsdatums der Kündigung kündbar?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Wurde der Vertrag bereits zu einem späteren Zeitpunkt beendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nVertragsbindung bei bereits in der Zukunft beendetem Vertrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nVertragsbindung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0401]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0401', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0401 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt ein Transaktionsgrund vor, der eine Abmeldung nur in die Zukunft zulässt?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung\nAufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden\nAufhebung einer zukünftigen Zuordnung wegen Stilllegung')], use_cases=None), EbdTableRow(step_number='20', description='Liegt ein Transaktionsgrund vor, welcher mitteilt, dass der Kunde vor Lieferbeginn ausgezogen ist, bzw. die Marktlokation vor Lieferbeginn stillgelegt wurde?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nAufhebung einer zukünftigen Zuordnung wegen Auszug des Kunden\nAufhebung einer zukünftigen Zuordnung wegen Stilllegung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung')], use_cases=None), EbdTableRow(step_number='30', description='Liegt das Abmeldedatum mindestens einen Tag nach dem Eingangsdatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFristüberschreitung bei Aufhebung einer zu-künftigen Zuordnung wegen Auszug oder Still-legung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt das Eingangsdatum mindestens 6 WT vor dem Abmeldedatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung bei Transaktionsgründen für eine Abmeldung in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt der Transaktionsgrund \nAufhebung einer zukünftigen Zuordnung wegen aufgehobenem Vertragsverhältnis\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung')], use_cases=None), EbdTableRow(step_number='60', description='Liegt der Transaktionsgrund \nEnde der ESV ohne Folgelieferung\nvor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor: \nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN')], use_cases=None), EbdTableRow(step_number='70', description='Gab es an dieser Marktlokation eine bestätigte Anmeldung zur Ersatz- Grundversorgung mit einem Lieferbeginnzeitpunkt, welcher innerhalb 3 Monaten vom Endezeitpunkt der Belieferung aus dieser Abmeldung begonnen hat?\nHinweis: \nEine Lieferende mit dem Grund „Ende der ESV ohne Folgelieferung“ kann nur in dem Fall vorliegen, wenn diese Marktlokation innerhalb der letzten 3 Monate auch über den Use-Case „Beginn der Ersatz-/Grundversorgung“ vom NB beim LF angemeldet wurde.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDie Marklokation wurde nicht innerhalb der letzten 3 Monate zur Ersatz-/ Grundversorgung angemeldet. Somit kann es sich nicht um eine Beendigung einer ESV handeln.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um eine Marktlokation, deren Mess-lokationen vollständig mit iMS ausgestattet sind oder/und deren Prognosegrundlage auf Basis von Werten erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Liegt das Abmeldedatum mindestens einen Tag nach dem Eingangsdatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEingangsfrist bei iMS/kME mit RLM nicht ein-gehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt das Eingangsdatum der Abmeldung mehr als sechs Wochen nach dem Abmeldedatum der Abmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nFristüberschreitung bei kME ohne RLM/mME/ Pauschalanlage.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Erfolgt die Aufhebung einer zukünftigen Zuordnung zu dem gleichen Datum (Zeitpunkt), welcher dem Lieferanten im Lieferbeginn bestätigt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDie Aufhebung einer zukünftigen Zuordnung muss zum Datum (Zeitpunkt) angegeben werden, wie im Lieferbeginn bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wurde die Zuordnung des anfragenden Lieferanten zur Marktlokation zum identischen Abmeldedatum bereits durch eine Bestätigung in den folgenden Prozessschritten beendet? Fall:\nSD: Lieferende von LF an NB, Prozessschritt 2 "Antwort auf Abmeldung"\nSD: Lieferende von NB an LF, Prozessschritt 2 "Antwort auf Abmeldung"\nSD: Lieferbeginn, Prozessschritt 4 "Beantwortung der Abmeldeanfrage" oder die Bestätigung erfolgt durch die Fristverstreichung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None), EbdTableRow(step_number='130', description='Ist der anfragende LF am Folgetag des Abmeldungsdatum der Marktlokation noch zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None), EbdTableRow(step_number='140', description='Liegt ein Transaktionsgrund vor, aus welchem hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEin-/Auszug (Umzug)\nAuszug wegen Stilllegung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Liegt in der bereits bestätigten Abmeldung ein Transaktionsgrund vor, aus welchem nicht hervorgeht, dass der Anschlussnutzer ausgezogen ist?\nDas ist bei den folgenden Transaktionsgründen der Fall:\nEnde wegen Kündigung durch LF\nEnde wegen Kündigung durch Kunde/LFN\nEnde der ESV ohne Folgelieferung\nAufhebung einer zukünftigen Zuordnung wegen\naufgehobenem Vertragsverhältnis\nAbmeldung wg. fehl. Zuordnungsermächtigung\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT\nLieferbeginn und Abmeldung aus der Ersatzversorgung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung \nLieferende zum Abmeldedatum wurde aus gleichem Grund bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nErneute Bestätigung der Abmeldung aufgrund der Information, dass der Anschlussnutzer nicht mehr an der Marktlokation vorhanden ist.\nHinweis: Das bisher bestätigte Bilanzierungsende bleibt unverändert bestehen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0402]
  EbdTableMetaData(ebd_code='E_0402', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird. Der Netzbetreiber muss prüfen, ob eine Abmeldeanfrage zu senden ist.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0403]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0403', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0403 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Besteht zum Folgetag des in der Abmeldeanfrage genannten Termins ein Vertragsverhältnis für diese Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt dem LFA bereits eine bestätigte Netzabmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDie Belieferung wurde zu dem angefragten Ter-min aus der Abmeldeanfrage bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Zustimmung\nZustimmung der Abmeldeanfrage zum in der bereits versendeten Abmeldung (welche noch nicht beantwortet wurde) genannten Termin.')], use_cases=None), EbdTableRow(step_number='3', description='Liegt in der Abmeldeanfrage der Transaktionsgrund Ein-/ Auszug (Umzug) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Kunde aus der Abmeldeanfrage identisch mit dem Kunden beim LFA?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nEs handelt sich nicht um einen Einzug, da der Kun-de aus der Abmeldeanfrage identisch mit dem Kunden beim LFA ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Hat der LFA Informationen darüber, dass sein Kunde nicht ausgezogen ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A33', note='Cluster: Ablehnung\nDer LFA hat die Information, dass der Kunde nicht ausgezogen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A34', note='Cluster: Zustimmung \nDer LFA beendet die Belieferung und teilt sein Lieferendedatum in der Antwort mit.')], use_cases=None), EbdTableRow(step_number='6', description='Liegt in der Abmeldeanfrage der Transaktionsgrund Wechsel vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Bleibt das Vertragsverhältnis des LFA mit dem Kunden an dieser Marktlokation zum Tag nach dem Endedatum aus der Abmeldeanfrage bestehen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A35', note='Cluster: Ablehnung\nEs besteht eine Vertragsbindung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A36', note='Cluster: Zustimmung\nVertragsverhältnis wurde zum angefragten oder davor liegenden Termin beendet.')], use_cases=None), EbdTableRow(step_number='8', description='Befindet sich die Marktlokation zum Folgetag des Endedatums aus der Abmeldeanfrage in der Ersatz-versorgung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A37', note='Cluster: Ablehnung\nDie Marktlokation befindet sich nicht in der Ersatzversorgung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A38', note='Cluster: Zustimmung\nErsatzversorgung wurde zum angefragten Termin beendet.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0404]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0404', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0404 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde eine Abmeldeanfrage gestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Hat der LFA fristgerecht geantwortet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Hat der LFA der Abmeldeanfrage widersprochen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde in der Beantwortung der Abmeldeanfrage der Code A30 „Ablehnung: Die Belieferung wurde zu dem angefragten Termin aus der Abmeldeanfrage bereits beendet und eine Abmeldung von dem LFA bereits versendet, die durch den NB bereits bestätigt wurde.“ verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A50', note='Cluster: Ablehnung\nDer LFA hat der Abmeldeanfrage widersprochen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Wurde die NN-Anmeldung des LFN bereits durch den NB beantwortet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Ende\nHinweis: Der vom LFN gestartete Lieferbeginn-prozess (Anmeldung), der beim NB zur Versen-dung der Abmeldeanfrage an den LFA führte, wurde bereits durch einen vom LFA gestarteten Lieferendeprozess, der vor dem Eingang der Antwort der Abmeldeanfrage abgeschlossen wurde, beendet. Das führte dazu, dass der NB die Anmeldung des LFN vor dem Eingang der Antwort der Abmeldeanfrage bestätigt hatte. Somit ist an den LFN keine weitere Antwort auf seine Anmeldung mehr zu senden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A52', note='Cluster: Ablehnung\nZuordnungsermächtigung fehlt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A51', note='Cluster: Zustimmung\nBestätigung der Anmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0405]
  EbdTableMetaData(ebd_code='E_0405', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0003_Bestätigung EOG Anmeldung\nS_0004_Ablehnung EOG Anmeldung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0406]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0406', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0406 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist dem gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist mit dem NB vereinbart, dass der Empfänger der Rechnung der Zahler der Rechnung ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger ist nicht Zahler der Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der NB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum beim LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nObwohl es sich um keine Abschlagsrechnung handelt, ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist die Frist der Fälligkeit eingehalten?\nHinweis: Fälligkeitsdatum muss ≥ 10 WT als das Rechnungsdatum sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC7', note='Cluster: Ablehnung auf Kopfebene\nDie Frist für die Abschlagsrechnung wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das Fälligkeitsdatum > das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC8', note='Cluster: Ablehnung auf Kopfebene\nDie Vorgabe, dass die Zahlung nachschüssig zu leisten ist, wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Erfüllt die Rechnung weitere Anforderungen gem. §14 Abs. 4 UStG nicht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG.\nHinweis: Die Ablehnung ist zu begründen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010 WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Handelt es sich bei der Rechnung um eine Sonderrechnung (SOR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='48'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist das Nachrichtendatum der Sonderrechnung ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A79', note='Cluster: Ablehnung auf Kopfebene\nDas Nachrichtendatum der Sonderrechnung ist ≤ 01.01.2023 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Wurde die der Sonderrechnung zugrundeliegende Rechnung bereits mit mindestens einer der in dieser Rechnung genannten Arten der Sonderrechnung korrigiert?\nHinweise: \nEs sind nur die nicht stornierten Sonderrechnungen relevant, die sich auf dieselbe Rechnung beziehen, wie die vorliegende Sonderrechnung.\nDie Arten der Sonderrechnung sind der INVOIC zu entnehmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A80', note='Cluster: Ablehnung auf Kopfebene\nDie Art der vorliegenden Abrechnung wurde bereits in einer vorherigen Sonderrechnung korrigiert.\nHinweis: Es sind alle betroffenen Sonderrechnungen anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='46'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='46', description='Ist die Sonderrechnung aus Sicht des Rechnungsempfängers in Ordnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A95', note='Cluster: Ablehnung auf Kopfebene\nDie Sonderrechnung ist aus Sicht des Rechnungsempfängers nicht in Ordnung.\nHinweis: Die Ablehnung ist zu begründen.')], use_cases=None), EbdTableRow(step_number='48', description='Handelt es sich bei dem Rechnungstyp um eine 13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='54'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='49'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='49', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Abschlussrechnung, Monatsrechnung oder Integrierte 13. Rechnung (13I)) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='52'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='52', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='54', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten integrierte 13. Rechnung (13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='AE1', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Referenziert die Rechnung auf einen erhaltenen Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt zur Rechnung kein Lieferschein vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='58'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='58', description='Referenziert die Rechnung auf einen nicht stornierten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='61'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='61', description='Referenziert die Rechnung auf einen fristgerecht abgelehnten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='64'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='62'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='62', description='Ist die Frist für die Rückmeldung auf den Lieferschein, auf den die Rechnung referenziert, bereits abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE0', note='Cluster: Ablehnung auf Kopfebene\nDer Netzbetreiber hat die Rechnung übermittelt, bevor die Frist für die Rückmeldung auf den Lieferschein abgelaufen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='64', description='Hat der NB der Ablehnung des Lieferscheines widersprochen und konnte er die Ablehnungsgründe des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde erfolgreich abgelehnt und wurde nicht vom NB widersprochen und entkräftet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='67', description='Ist der gesamte Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR, MVR, 13I, 13R) im referenzierten Lieferschein enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung auf Kopfebene\nIm referenzierten Lieferschein ist nicht der gesamte Abrechnungszeitraum der Rechnung enthalten. \nHinweis: Der LF gibt den Zeitraum an, welcher nicht im referenzierten Lieferschein enthalten ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Entspricht der Rechnungstyp (z. B. Abschlagsrechnung oder Monatsrechnung) der zu prüfenden Rechnung für den übermittelten Zeitraum der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/ Arbeitspreis bzw. Arbeits-/Leistungspreis)?\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Grund-/ Arbeitspreis möglich:\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nTurnusrechnung (JVR)\nZwischenabrechnung (ZVR)\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Leistungs-/ Arbeitspreis möglich:\nMVR Monatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung auf Kopfebene\nRechnungstyp passt nicht zu der vereinbarten Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='73'), result_code=None, note='Nutzungshinweis: Der Rechnungstyp (13. Rechnung) 13R kann für Zeiträume ≥ 01.01.2023 00:00 Uhr nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='73', description='Ist das Ende des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='76'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='76', description='Liegt ein elektronisches Preisblatt Netznutzung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt kein Preisblatt Netznutzung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='79'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='79', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR)\nZwischenrechnung (ZVR)\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='82'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung auf Kopfebene\nEs handelt sich um einen nicht zulässigen Rechnungstyp.\nNutzungshinweis: Der Rechnungstyp 13. Rechnung (13R) kann für Zeiträume, deren Beginndatum ≥ 01.01.2023 00:00 Uhr ist, nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='82', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler in den Kopfdaten.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Ab hier beginnt die Prüfung auf Positionsebene.')], use_cases=None), EbdTableRow(step_number='100', description='Ist in der Rechnungsposition das Enddatum des Positionszeitraumes ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note='Hinweis: \nDas vorliegende EBD E_0406_Netznutzungsrechnung prüfen wird für diese Position nicht weiter durchgeführt und es werden keine Codes dieses EBD genutzt. Die Prüfung dieser Rechnungsposition erfolgt für diesen Prüfschritt ausschließlich nach der Prüflogik vor der Nutzung des elektronischen Netznutzungspreisblatts mit den entsprechenden Codes aus der Codeliste S_0103. \nWerden bei der Anwendung der Codeliste S_0103 Fehler festgestellt, so sind sich diese zu merken. Nach Abschluss der Prüfung der Rechnungsposition gegen die Codeliste S_0103 ist mit dem EBD E_0406_Netznutzungsrechnung prüfen mit Prüfschritt 105 weiter fortzufahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden: \n• Turnusrechnung (JVR) \n• Abschlussrechnung (ABR) \n• Zwischenrechnung (ZVR) \n• Monatsrechnung (MVR) \n• Integrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note='Hinweis: Es handelt sich um eine Abschlagsrechnung (ABS).')], use_cases=None), EbdTableRow(step_number='115', description='Ist in der Rechnungsposition der Beginn des Positionszeitraumes < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nDie Aufteilung der Position in < und ≥ 01.01.2023 00:00 Uhr ist nicht erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wird eine Artikelnummer verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A22', note='Cluster: Ablehnung auf Positionsebene\nFür den Positionszeitraum und dem Rechnungstyp ist keine Artikelnummer erlaubt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A23', note='Cluster: Ablehnung auf Positionsebene\nEin Rechenfehler liegt vor.\nHinweis: Der Rechenfehler wird in der Ablehnung mitgeteilt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='135'), result_code='A24', note='Cluster: Ablehnung auf Positionsebene\nDer auf der Position enthaltene Umsatzsteuersatz ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum dieser Position > das Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='145'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='145', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR) \nAbschlussrechnung (ABR) \nZwischenrechnung (ZVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei dem Rechnungstyp um eine Monatsrechnung (MVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Integrierte 13. Rechnung (13I).')], use_cases=None), EbdTableRow(step_number='200', description='Ist die Abschlagshöhe plausibel zur mitgeteilten Jahresverbrauchsprognose (JVP)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='205'), result_code='A26', note='Cluster: Ablehnung auf Positionsebene\nDie Abschlagshöhe ist nicht plausibel.\nHinweis: Der LF teilt die erwartete Abschlagshöhe mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='205', description='Ist das Beginndatum des Positionszeitraums < dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A81', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Ist der Abrechnungszeitraum der Abschlagsrechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Monatsrechnung oder 13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='215'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='215', description='Überlappt der Abrechnungszeitraum der Abschlagsrechnung um mehr als 10 Tage mit einer vorhergehenden Abschlagsrechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code='A82', note='Cluster: Ablehnung auf Positionsebene\nZu große Überlappung von Abschlagszeitraum.\nHinweis: Es ist die Abschlagsrechnung anzugeben, mit dem die Überlappung des Abrechnungszeitraum besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Ist die Artikelnummer für eine Abschlagsrechnung gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDie in dieser Position verwendete Artikelnummer ist nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='225', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Ist das Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code='A83', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='305'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='305', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A84', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='315', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code='A85', note='Cluster: Ablehnung auf Positionsebene\nDas Stammdatum der Position ist aus Sicht des LF falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='325'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='325', description='Sind für die Artikel-ID die in den Stammdaten ausgetauschten Zu- und Abschläge fehlerfrei in der Position berücksichtigt?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='326'), result_code='A32', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='326'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='326', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='327'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='327', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='328'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='328', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='AE2', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins der Menge der abgerechneten Position der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='A33', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='335', description='Liegen alle zur Prüfung notwendigen plausiblen Energiemengen vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A34', note='Cluster: Ablehnung auf Positionsebene\nEs fehlt/fehlen die Energiemenge(n) und wurde(n) bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlende Energiemenge reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegen alle zur Prüfung notwendigen Werte vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code='A39', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A35', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='355', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='365'), result_code=None, note='Hinweis: Höchstsätze der Konzessionsabgabenverordnung werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A36', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='365', description='Ergibt sich der Preis zur Artikel-ID aus gesetzlich festgelegten Abgaben und Umlagen?\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A37', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A38', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='399'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='399'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='399', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='415'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A46', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note='Hinweis: Der NB rechnet die Konzessionsabgabe für Sondervertragskunden ab, obwohl für diese Marktlokation die Konzessionsabgabe für Tarifkunde vereinbart wurde. Diese Vorgehensweise ist erlaubt, da eine Änderung der Artikel-ID über eine Stammdatenänderung nicht möglich ist.')], use_cases=None), EbdTableRow(step_number='410', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AC9', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='415', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A43', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A42', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='422'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='422', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='425'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='425', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='427'), result_code='A44', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='427', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='491'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='435'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='445'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt.')], use_cases=None), EbdTableRow(step_number='440', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A87', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='445', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A88', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende ist < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Wird mit der Artikel-ID eine physikalische Arbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='455'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='455', description='Ist die Menge der Resultierenden negativ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Bei der hier gebildeten Resultierenden handelt es sich um Rücknahmepositionen und damit um das, was in der Prüfung 460 als korrespondierende Resultierende benötigt wird und darf damit nicht im Rechnungsprüfungsprozess als Resultierende genutzt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='458'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='458', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='460'), result_code=None, note='Hinweis: Zu der Resultierenden muss, um den Prüfschritt 460 durchführen zu können, auch die korrespondierende Resultierende gebildet werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note='Hinweis: Umfasst die Resultierende maximal einen Kalendermonat, kann es zur Resultierenden keine korrespondierende Resultierende geben.')], use_cases=None), EbdTableRow(step_number='460', description='Beginnt der Zeitraum der korrespondieren Resultierenden zum selben Zeitpunkt wie der Zeitraum dieser Resultierenden und enthält der Zeitraum der korrespondierenden Resultierenden keinen Zeitraum des Monats, in dem die Resultierende endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A89', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende passt nicht zur korrespondierenden Resultierenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='465'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='465', description='Wird durch die korrespondierende Resultierende alle Positionen der vorangegangenen Rechnungen (MVR) zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA1', note='Cluster: Ablehnung auf Positionsebene\nEs wurden nicht alle Positionen vorangegangener MVR Rechnungen zurückgenommen.\nHinweis: Es sind die Rechnungsnummern der MVR anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='470', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='471'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='471', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='472'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='472', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='473'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='473', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='AE3', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.')], use_cases=None), EbdTableRow(step_number='475', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='A45', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='480', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor? \nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='485'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='485', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='490'), result_code='AA2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert.\nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='490'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='490', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code='AA3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='491', description='Ist die in der Position angegebene Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='492'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='492', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code='AA8', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='495', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A47', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='502'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='502', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='513'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A48', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='513', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='515'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='515', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden?\nHinweis:\nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='525'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A60', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='525', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A50', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt.\nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code='A51', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='535'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='535', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='555'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='555', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA6', note='Cluster: Ablehnung auf Positionsebene\nDie Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Handelt es sich bei der in Artikel-ID der zu prüfenden Positionen um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='561'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='561', description='Wird in derselben Rechnung eine Konzessionsabgabe Position mit einer Artikel-ID, die nicht der Artikel-ID für Sondervertragskunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='563'), result_code='AD0', note='Cluster: Ablehnung auf Positionsebene\nIn derselben Rechnung wird die Konzessionsabgabe einmal für Tarifkunden und für Sondervertragskunden berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='563'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='563', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='565'), result_code=None, note='Hinweis: die Artikel-ID umfasst mehr als einen Abrechnungsmonat'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note='Hinweis: die Artikel-ID berücksichtigt maximal einen Kalendermonat')], use_cases=None), EbdTableRow(step_number='565', description='Wurden alle Positionen der Konzessionsabgabe für Tarifkunden aus den vorherigen MVR zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe für Tarifkunden wurde bereits in einer vorangegangenen MVR abgerechnet und wurde nicht zurückgenommen.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='595', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='599'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='599'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='599', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='607'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='607', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Tarifkunden-Konzessionsabgabe oder für die gemeindespezifische Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A77', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD1', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='615', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='A53', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A54', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='622'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='622', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='625'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='625', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='627'), result_code='A55', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='627', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='676'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='635'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='645'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='635', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='640'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt')], use_cases=None), EbdTableRow(step_number='640', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AA9', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='645'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='645', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB1', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='650'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='650', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='651'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='651', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='652'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='652', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='653'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='653', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='AE4', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='660', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='A56', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis Identifikation der Zeile/Position im Dokument: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='665', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='670'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='670', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='675'), result_code='AB2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='675'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='675', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code='AB3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='676', description='Ist die in der Position angegebene Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='677'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='677', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code='AC6', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='680', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='685'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='690'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='685', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A58', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='687'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='687', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='690', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='695'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='698'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.')], use_cases=None), EbdTableRow(step_number='695', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A59', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='698', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='700'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='700', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden:\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AC2', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='710', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A61', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='715', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code='A62', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='725'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='725', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='770'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='730', description='Ist die aus den Leistungs- und Arbeitswerten des Lieferscheins berechnete Benutzungsstundendauer (h/a) für den Zeitraum eines Anschlussnutzers und des Abrechnungszeitraumes ≥ 2.500 Stunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='735'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer ≥ 2.500 h/a in Rechnung stellen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='755'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer< 2.500 h/a in Rechnung stellen.')], use_cases=None), EbdTableRow(step_number='735', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='740'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='740', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB5', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='755', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='760'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='760', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB7', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='765', description='Erfolgt über die mit dieser Artikel-ID Resultierende eine vollständige Rücknahme dessen, was in allen zu dieser 13I gehörenden MVR bereist mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A63', note='Cluster: Ablehnung auf Positionsebene\nEs werden zu wenige bzw. zu viele Positionen aus den vorangegangenen MVR zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='770', description='Handelt es sich um eine Artikel-ID für die Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='775'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='772'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='772', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB8', note='Cluster: Ablehnung auf Positionsebene\nDie Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='775', description='Gibt es weitere Artikel-ID für eine Konzessionsabgabe, die von dieser Artikel-ID abweicht, mit der sich somit eine weitere Resultierende bilden lässt?\nHinweis: In den Prüfschritten 775 bis 791 wird zur Reduzierung der Anzahl der beschriebenen Prüfungen vom Standard abgewichen, immer nur die zur Prüfung stehende Resultierende zu betrachten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='781'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='780'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='780', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen MVR mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='791'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD6', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.')], use_cases=None), EbdTableRow(step_number='781', description='Ist mindestens eine der Resultierenden eine Rücknahmeposition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='782'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='786'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='782', description='Wird mit allen Resultierenden der Rücknahmepositionen alle bereits bezahlten Konzessionsbeträge mit der entsprechenden Artikel-ID vollständig zurückgenommen?\nHinweis: Die Rücknahmeposition (es können auch mehrere sein) kann auch mit einer anderen Resultierenden zur Konzessionsabgabe dieser Rechnung erfolgen als die zur Prüfung stehende Resultierende. Wichtig ist, dass die bereits gezahlten Konzessionsbeträge vollständig zurückgenommen wurden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='784'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='783'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='783', description='Ist die Resultierende der Rücknameposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD5', note='Cluster: Ablehnung auf Positionsebene\nMit den Rücknahmepositionen werden nicht alle bereits bezahlten Konzessionsbeträge vollständig zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='784', description='Wird mit der Resultierenden der Vorwärtsposition für das Kalenderjahr die richtige Konzessionsabgabe abgerechnet?\nHinweis: Die richtige Konzessionsabgabe ergibt sich aus der Prüfung der Leistungswerte und Energiemenge gegen die Kriterien der Sondervertragskunden -Konzessionsabgabe und der Nutzung des gesetzlichen Preisvorgaben bzw. den gemeindespezifischen Konzessionsabgabe des Netzbetreiber.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='785'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='785', description='Ist die Resultierende der Vorwärtsposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD3', note='Cluster: Ablehnung auf Positionsebene\nEs wird die falsche Konzessionsabgabe für das Kalenderjahr abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='786', description='Handelt es sich bei den Resultierenden um die Artikel-ID für Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder um die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='787'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wird falsch abgerechnet.')], use_cases=None), EbdTableRow(step_number='787', description='Wird in derselben Rechnung eine Konzessionsabgaben- Position mit einer Artikel-ID, die nicht der Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten) entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='788'), result_code='AD8', note='Cluster: Ablehnung auf Positionsebene\nKonzessionsabgabe wird doppelt abgerechnet.')], use_cases=None), EbdTableRow(step_number='788', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='789'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='789', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='790'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='790', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AE5', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='793', description='Ist die Energiemenge der Resultierenden plausibel zur Energiemenge des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD4', note='Cluster: Ablehnung auf Positionsebene\nDie Energiemenge der Resultierenden passt nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='794', description='Ist die saldierte Energiemenge der Konzessionsabgabe passend zum Lieferschein?\nHinweis: Die saldierte abgerechnete Energiemenge ergibt sich durch Addition aller Energiemengen (unter Berücksichtigung derer Vorzeichen) aller Resultierenden zur Konzessionsabgabe dieser Rechnung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD9', note='Cluster: Ablehnung auf Positionsebene\nDie saldierte Energiemenge der Resultierenden passen nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='795', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='799'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='799'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='799', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='800', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='805', description='Fehlen noch Artikel-ID für Rechnungspositionen ≥ 01.01.2023 00:00 Uhr, die vorher mit den Stammdaten ausgetauscht und somit in der Rechnung erwartet wurden?\nHinweis: Hat sich die tatsächlich abgerechnete Konzessionsabgabe gegenüber der in den Stammdaten ausgetauschten Konzessionsabgabe geändert, ist die Artikel-ID, welche zuvor in den Stammdaten ausgetauscht wurde, nicht als fehlende Artikel-ID zu übermitteln.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A78', note='Cluster: Ablehnung auf Summenebene\nErwartete Artikel-ID in der Rechnung nicht vorhanden.\nHinweis: Die erwarteten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='815'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='815', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='816'), result_code='A66', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='816'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='816', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='817'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='820'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='817', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='818'), result_code='AC3', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='818'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='818', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern der vorausbezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='AC4', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern der Rechnung entspricht nicht der Summe der Steuern der vorausbezahlten Rechnungen. \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='820', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='825'), result_code='A67', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='825'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='825', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern, die in den tatsächlich gezahlten Beträgen in den referenzierten Rechnungen mit diesem Steuersatz enthalten sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='A68', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern entspricht nicht der Summe der vorausbezahlten Steuern aus den referenzierten Rechnungen.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='835'), result_code='A69', note='Cluster: Ablehnung auf Summenebene\nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='835'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='835', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='900'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='900', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='905'), result_code='A70', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrags) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='905'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='905', description='Entspricht der fällige Betrag dieser Rechnung dem Rechnungsbetrag abzgl. der Summe aller vorausbezahlten Beträge, sofern diese vorhanden sind und abzgl. des Gemeinderabatt/Kommunalrabatt, sofern dieser vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='910'), result_code='A71', note='Cluster: Ablehnung auf Summenebene\nFälliger Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='910'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='910', description='Entspricht der Gemeinderabatt/Kommunalrabatt der Summe der Gemeinderabatt-/Kommunalrabattbeträge aus der Positionsebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='920'), result_code='A72', note='Cluster: Ablehnung auf Summenebene\nSumme des Gemeinderabatts ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='920'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='920', description='Handelt es sich bei dem Rechnungstyp um einen der folgenden:\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='921'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Turnusrechnung (JVR), Abschlussrechnung (ABR) oder Zwischenabrechnung (ZVR).')], use_cases=None), EbdTableRow(step_number='921', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='922'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='925'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='922', description='Ist der vorausbezahlte Betrag identisch mit der Summe aller zuvor bezahlten Abschlagsrechnungen, deren Abrechnungszeitraum im Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) liegen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='AC5', note='Cluster: Ablehnung auf Summenebene\nFür den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) sind nicht alle zuvor bezahlten Abschlagsrechnungen enthalten \nHinweise: Der LF gibt die Rechnungsnummern aller Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='925', description='Sind für den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) alle Referenzen der zugehörigen und zuvor bezahlten Abschlagsrechnungen enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='A74', note='Cluster: Ablehnung auf Summenebene\nReferenzen auf zuvor bezahlte Abschlagsrechnungen fehlen. \nHinweise: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat und die nicht in dieser Rechnung berücksichtigt wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='927'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='927', description='Entspricht die Angabe des vorausbezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='930'), result_code='A73', note='Cluster: Ablehnung auf Summenebene\nAusgewiesener vorausgezahlter Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='930'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='930', description='Sind alle in der Rechnung (JVR, ZVR, ABR) berücksichtigten Abschlagsrechnungen durch den Empfänger mit einem Zahlungsavis bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='935'), result_code='A76', note='Cluster: Ablehnung auf Summenebene\nMindestens eine Abschlagsrechnung, die in dieser Rechnung berücksichtig wurde, wurde vom LF abgelehnt oder nicht beantwortet. \nAngeforderte, aber nicht beglichene Abschlagsrechnungen sind vom NB zu stornieren.\nHinweis: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die nicht in der vorliegenden Rechnung hätten berücksichtigt werden dürfen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='935'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='935', description='Ist mindestens eine der referenzierten Abschlagsrechnungen bereits in einer anderen Rechnung verrechnet worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code='A75', note='Cluster: Ablehnung auf Summenebene\nMindestens eine referenzierte Abschlagsrechnung ist bereits verrechnet worden. \nHinweis: Der LF gibt in der Ablehnung die Abschlagsrechnung(en), welche bereits verrechnet wurden, sowie die Rechnung(en) (im RFF+AFL), in der der Abschlag/die Abschläge (im FTX+Z14) bereits berücksichtigt wurden, an.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='940', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='990'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiger Fehler in den Summenteil.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNetznutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='990'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='990', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='100', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='805', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Artikel-ID keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='815', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 815 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem NB als Ergebnis übermittelt.\nFolgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen; dies gilt für alle Rechnungstypen, ausgenommen der Sonderrechnung.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0407]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0407', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0407 Dummy Name', remark=None), rows=[EbdTableRow(step_number='0', description='Konnte der NB alle Einwände des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC1', note='Cluster: Ablehnung auf Kopfebene \nDer LF lehnt die Zahlung der Rechnung weiterhin ab, da der NB nicht alle Einwände des LF entkräften konnte.\nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='1'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='1', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nDer LF ist dem gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist mit dem NB vereinbart, dass der Empfänger der Rechnung der Zahler der Rechnung ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger ist nicht Zahler der Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der NB für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der NB für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nDer NB ist im gesamten Abrechnungszeitraum nicht der Marktlokation zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum beim LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nObwohl es sich um keine Abschlagsrechnung handelt, ist das Rechnungsdatum < das Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist die Frist der Fälligkeit eingehalten?\nHinweis: Fälligkeitsdatum muss ≥ 10 WT als das Rechnungsdatum sein.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC7', note='Cluster: Ablehnung auf Kopfebene\nDie Frist für die Abschlagsrechnung wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das Fälligkeitsdatum > das Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AC8', note='Cluster: Ablehnung auf Kopfebene\nDie Vorgabe, dass die Zahlung nachschüssig zu leisten ist, wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Erfüllt die Rechnung weitere Anforderungen gem. §14 Abs. 4 UStG nicht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG.\nHinweis: Die Ablehnung ist zu begründen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Handelt es sich bei der Rechnung um eine Sonderrechnung (SOR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='48'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist das Nachrichtendatum der Sonderrechnung ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A79', note='Cluster: Ablehnung auf Kopfebene\nDas Nachrichtendatum der Sonderrechnung ist ≤ 01.01.2023 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Wurde die der Sonderrechnung zugrundeliegende Rechnung bereits mit mindestens einer der in dieser Rechnung genannten Arten der Sonderrechnung korrigiert?\nHinweise: \nEs sind nur die nicht stornierten Sonderrechnungen relevant, die sich auf dieselbe Rechnung beziehen, wie die vorliegende Sonderrechnung.\nDie Arten der Sonderrechnung sind der INVOIC zu entnehmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A80', note='Cluster: Ablehnung auf Kopfebene\nDie Art der vorliegenden Abrechnung wurde bereits in einer vorherigen Sonderrechnung korrigiert.\nHinweis: Es sind alle betroffenen Sonderrechnungen anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='46'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='46', description='Ist die Sonderrechnung aus Sicht des Rechnungsempfängers in Ordnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Cluster: Zustimmung\nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A95', note='Cluster: Ablehnung auf Kopfebene\nDie Sonderrechnung ist aus Sicht des Rechnungsempfängers nicht in Ordnung.\nHinweis: Die Ablehnung ist zu begründen.')], use_cases=None), EbdTableRow(step_number='48', description='Handelt es sich bei dem Rechnungstyp um eine 13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='54'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='49'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='49', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Abschlussrechnung, Monatsrechnung oder Integrierte 13. Rechnung (13I)) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='52'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='52', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='54', description='Ist der Abrechnungszeitraum der Rechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten integrierte 13. Rechnung (13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='AE1', note='Cluster: Ablehnung auf Kopfebene\nAbrechnungszeitraum wird doppelt abgerechnet. \nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='55'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='55', description='Referenziert die Rechnung auf einen erhaltenen Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt zur Rechnung kein Lieferschein vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='58'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='58', description='Referenziert die Rechnung auf einen nicht stornierten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='61'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='61', description='Referenziert die Rechnung auf einen fristgerecht abgelehnten Lieferschein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='64'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='62'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='62', description='Ist die Frist für die Rückmeldung auf den Lieferschein, auf den die Rechnung referenziert, bereits abgelaufen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='AE0', note='Cluster: Ablehnung auf Kopfebene\nDer Netzbetreiber hat die Rechnung übermittelt, bevor die Frist für die Rückmeldung auf den Lieferschein abgelaufen ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='64', description='Hat der NB der Ablehnung des Lieferscheines widersprochen und konnte er die Ablehnungsgründe des LF entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung auf Kopfebene\nDer Lieferschein zur Rechnung wurde erfolgreich abgelehnt und wurde nicht vom NB widersprochen und entkräftet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='67'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='67', description='Ist der gesamte Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR, MVR, 13I, 13R) im referenzierten Lieferschein enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung auf Kopfebene\nIm referenzierten Lieferschein ist nicht der gesamte Abrechnungszeitraum der Rechnung enthalten. \nHinweis: Der LF gibt den Zeitraum an, welcher nicht im referenzierten Lieferschein enthalten ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Entspricht der Rechnungstyp (z. B. Abschlagsrechnung oder Monatsrechnung) der zu prüfenden Rechnung für den übermittelten Zeitraum der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/ Arbeitspreis bzw. Arbeits-/Leistungspreis)?\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Grund-/ Arbeitspreis möglich:\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nTurnusrechnung (JVR)\nZwischenabrechnung (ZVR)\nFolgende Rechnungstypen sind bei der Netznutzungsabrechnungsvariante Leistungs-/ Arbeitspreis möglich:\nMVR Monatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung auf Kopfebene\nRechnungstyp passt nicht zu der vereinbarten Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='73'), result_code=None, note='Nutzungshinweis: Der Rechnungstyp (13. Rechnung) 13R kann für Zeiträume ≥ 01.01.2023 00:00 Uhr nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='73', description='Ist das Ende des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='76'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='76', description='Liegt ein elektronisches Preisblatt Netznutzung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung auf Kopfebene\nDem LF liegt kein Preisblatt Netznutzung vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='79'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='79', description='Ist der Beginn des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='82'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR)\nZwischenrechnung (ZVR)\nAbschlussrechnung (ABR)\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='82'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung auf Kopfebene\nEs handelt sich um einen nicht zulässigen Rechnungstyp.\nNutzungshinweis: Der Rechnungstyp 13. Rechnung (13R) kann für Zeiträume, deren Beginndatum ≥ 01.01.2023 00:00 Uhr ist, nicht mehr genutzt werden.')], use_cases=None), EbdTableRow(step_number='82', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler in den Kopfdaten.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Ab hier beginnt die Prüfung auf Positionsebene.')], use_cases=None), EbdTableRow(step_number='100', description='Ist in der Rechnungsposition das Enddatum des Positionszeitraumes ≤ 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='105'), result_code=None, note='Hinweis: \nDas vorliegende EBD E_0407_Netznutzungsrechnung prüfen wird für diese Position nicht weiter durchgeführt und es werden keine Codes dieses EBD genutzt. Die Prüfung dieser Rechnungsposition erfolgt für diesen Prüfschritt ausschließlich nach der Prüflogik vor der Nutzung des elektronischen Netznutzungspreisblatts mit den entsprechenden Codes aus der Codeliste S_0104. \nWerden bei der Anwendung der Codeliste S_0104 Fehler festgestellt, so sind sich diese zu merken. Nach Abschluss der Prüfung der Rechnungsposition gegen die Codeliste S_0104 ist mit dem EBD E_0407_Netznutzungsrechnung prüfen mit Prüfschritt 105 weiter fortzufahren.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='105', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden: \n• Turnusrechnung (JVR) \n• Abschlussrechnung (ABR) \n• Zwischenrechnung (ZVR) \n• Monatsrechnung (MVR) \n• Integrierte 13. Rechnung (13I)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='115'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note='Hinweis: Es handelt sich um eine Abschlagsrechnung (ABS).')], use_cases=None), EbdTableRow(step_number='115', description='Ist in der Rechnungsposition der Beginn des Positionszeitraumes < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nDie Aufteilung der Position in < und ≥ 01.01.2023 00:00 Uhr ist nicht erfolgt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wird eine Artikelnummer verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A22', note='Cluster: Ablehnung auf Positionsebene\nFür den Positionszeitraum und dem Rechnungstyp ist keine Artikelnummer erlaubt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='125'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='125', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code='A23', note='Cluster: Ablehnung auf Positionsebene\nEin Rechenfehler liegt vor.\nHinweis: Der Rechenfehler wird in der Ablehnung mitgeteilt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wird für die Rechnungsposition der für diesen Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='135'), result_code='A24', note='Cluster: Ablehnung auf Positionsebene\nDer auf der Position enthaltene Umsatzsteuersatz ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='135'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='135', description='Ist das Enddatum der Rechnungsposition > das Enddatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code='A25', note='Cluster: Ablehnung auf Positionsebene\nDas Enddatum dieser Position > das Enddatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei dem Rechnungstyp um eine Abschlagsrechnung (ABS)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='145'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='145', description='Handelt es sich bei dem Rechnungstyp um eine der folgenden:\nTurnusrechnung (JVR) \nAbschlussrechnung (ABR) \nZwischenrechnung (ZVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei dem Rechnungstyp um eine Monatsrechnung (MVR)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='400'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='600'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Integrierte 13. Rechnung (13I).')], use_cases=None), EbdTableRow(step_number='200', description='Ist die Abschlagshöhe plausibel zur mitgeteilten Jahresverbrauchsprognose (JVP)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='205'), result_code='A26', note='Cluster: Ablehnung auf Positionsebene\nDie Abschlagshöhe ist nicht plausibel.\nHinweis: Der LF teilt die erwartete Abschlagshöhe mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='205'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='205', description='Ist das Beginndatum des Positionszeitraums < dem Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code='A81', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Ist der Abrechnungszeitraum der Abschlagsrechnung bereits in einer vorhergehenden, akzeptierten und nicht stornierten Rechnung (Turnusrechnung, Zwischenrechnung, Monatsrechnung oder 13I) enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='215'), result_code='A27', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der ein Teil bzw. der Zeitraum des in dieser Rechnung abgerechneten Zeitraums bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='215'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='215', description='Überlappt der Abrechnungszeitraum der Abschlagsrechnung um mehr als 10 Tage mit einer vorhergehenden Abschlagsrechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code='A82', note='Cluster: Ablehnung auf Positionsebene\nZu große Überlappung von Abschlagszeitraum.\nHinweis: Es ist die Abschlagsrechnung anzugeben, mit dem die Überlappung des Abrechnungszeitraum besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Ist die Artikelnummer für eine Abschlagsrechnung gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='225'), result_code='A28', note='Cluster: Ablehnung auf Positionsebene\nDie in dieser Position verwendete Artikelnummer ist nicht gültig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='225'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='225', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Ist das Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='305'), result_code='A83', note='Cluster: Ablehnung auf Positionsebene\nDas Beginndatum des Positionszeitraums < das Beginndatum des Abrechnungszeitraums.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='305'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='305', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A84', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='315'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='315', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code='A85', note='Cluster: Ablehnung auf Positionsebene\nDas Stammdatum der Position ist aus Sicht des LF falsch.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A31', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='325'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='325', description='Sind für die Artikel-ID die in den Stammdaten ausgetauschten Zu- und Abschläge fehlerfrei in der Position berücksichtigt?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='326'), result_code='A32', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='326'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='326', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='327'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='327', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='328'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='328', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='AE2', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins der Menge der abgerechneten Position der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='335'), result_code='A33', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='335'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='335', description='Liegen alle zur Prüfung notwendigen plausiblen Energiemengen vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A34', note='Cluster: Ablehnung auf Positionsebene\nEs fehlt/fehlen die Energiemenge(n) und wurde(n) bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlende Energiemenge reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='340'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='340', description='Liegen alle zur Prüfung notwendigen Werte vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='345'), result_code='A39', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='345'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='345', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='355'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A35', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='355', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='365'), result_code=None, note='Hinweis: Höchstsätze der Konzessionsabgabenverordnung werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A36', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='365', description='Ergibt sich der Preis zur Artikel-ID aus gesetzlich festgelegten Abgaben und Umlagen?\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A37', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='395'), result_code='A38', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='395'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='395', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='399'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='399'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='399', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='400', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='415'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='405'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='405', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A46', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='410'), result_code=None, note='Hinweis: Der NB rechnet die Konzessionsabgabe für Sondervertragskunden ab, obwohl für diese Marktlokation die Konzessionsabgabe für Tarifkunde vereinbart wurde. Diese Vorgehensweise ist erlaubt, da eine Änderung der Artikel-ID über eine Stammdatenänderung nicht möglich ist.')], use_cases=None), EbdTableRow(step_number='410', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AC9', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='415', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A43', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagten Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A42', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='422'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='422', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='425'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='425', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='427'), result_code='A44', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='427'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='427', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='491'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='435'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='445'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='435', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt.')], use_cases=None), EbdTableRow(step_number='440', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A87', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='445'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='445', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='A88', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende ist < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Wird mit der Artikel-ID eine physikalische Arbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='455'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='455', description='Ist die Menge der Resultierenden negativ?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Bei der hier gebildeten Resultierenden handelt es sich um Rücknahmepositionen und damit um das, was in der Prüfung 460 als korrespondierende Resultierende benötigt wird und darf damit nicht im Rechnungsprüfungsprozess als Resultierende genutzt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='458'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='458', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='460'), result_code=None, note='Hinweis: Zu der Resultierenden muss, um den Prüfschritt 460 durchführen zu können, auch die korrespondierende Resultierende gebildet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='470'), result_code=None, note='Hinweis: Umfasst die Resultierende maximal einen Kalendermonat, kann es zur Resultierenden keine korrespondierende Resultierende geben.')], use_cases=None), EbdTableRow(step_number='460', description='Beginnt der Zeitraum der korrespondieren Resultierenden zum selben Zeitpunkt wie der Zeitraum dieser Resultierenden und enthält der Zeitraum der korrespondierenden Resultierenden keinen Zeitraum des Monats, in dem die Resultierende endet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A89', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende passt nicht zur korrespondierenden Resultierenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='465'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='465', description='Wird durch die korrespondierende Resultierende alle Positionen der vorangegangenen Rechnungen (MVR) zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA1', note='Cluster: Ablehnung auf Positionsebene\nEs wurden nicht alle Positionen vorangegangener MVR Rechnungen zurückgenommen.\nHinweis: Es sind die Rechnungsnummern der MVR anzugeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='470'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='470', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='471'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='471', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='472'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='472', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='473'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='475'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='473', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='AE3', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.')], use_cases=None), EbdTableRow(step_number='475', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='480'), result_code='A45', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis „Identifikation der Zeile/Position im Dokument“: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='480'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='480', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor? \nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='485'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='485', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='490'), result_code='AA2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert.\nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='490'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='490', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code='AA3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='491', description='Ist die in der Position angegebene Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='492'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='492', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='495'), result_code='AA8', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='495'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='495', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='500'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='505'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='500', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A47', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='502'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='502', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note='Hinweis: Prüfung einer Position mit Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='505', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='513'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A48', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='513', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='515'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='515', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden?\nHinweis:\nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='525'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A60', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='525', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='A50', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt.\nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='535'), result_code='A51', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='535'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='535', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='555'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='555', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code='AA6', note='Cluster: Ablehnung auf Positionsebene\nDie Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Handelt es sich bei der in Artikel-ID der zu prüfenden Positionen um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='561'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='561', description='Wird in derselben Rechnung eine Konzessionsabgabe Position mit einer Artikel-ID, die nicht der Artikel-ID für Sondervertragskunden-Konzessionsabgabe entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='563'), result_code='AD0', note='Cluster: Ablehnung auf Positionsebene\nIn derselben Rechnung wird die Konzessionsabgabe einmal für Tarifkunden und für Sondervertragskunden berechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='563'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='563', description='Beginnt und endet der Zeitraum der Resultierenden in unterschiedlichen Kalendermonaten?\nHinweis: Ist das Enddatum der Monatserste 00:00 Uhr des Monates, der auf den der Monat folgt, in dem der Zeitpunkt liegt, zu dem der Zeitraum der Resultierenden beginnt, liegt im Sinne der obigen Fragestellung Beginn- und Endpunkt in einem Monat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='565'), result_code=None, note='Hinweis: die Artikel-ID umfasst mehr als einen Abrechnungsmonat'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code=None, note='Hinweis: die Artikel-ID berücksichtigt maximal einen Kalendermonat')], use_cases=None), EbdTableRow(step_number='565', description='Wurden alle Positionen der Konzessionsabgabe für Tarifkunden aus den vorherigen MVR zurückgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='595'), result_code='AA7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe für Tarifkunden wurde bereits in einer vorangegangenen MVR abgerechnet und wurde nicht zurückgenommen.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='595'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='595', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='599'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='599'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='599', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='600', description='Wurde die in der Rechnungsposition genutzte Artikel-ID für den gesamten Positionszeitraum dieser Position in den Stammdaten (entweder indirekt durch Angabe der zugehörigen Gruppenartikel-ID oder durch direkte Nennung der Artikel-ID) ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='605'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='605', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Sondervertragskunden-Konzessionsabgabe oder für die gemeindespezifische Sondervertragskunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='607'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='610'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='607', description='Handelt es sich bei der in der Rechnungsposition genutzten Artikel-ID um die Artikel-ID für die Tarifkunden-Konzessionsabgabe oder für die gemeindespezifische Tarifkunden-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A77', note='Cluster: Ablehnung auf Positionsebene\nDie in der angegebenen Position verwendete Artikel-ID hätte nicht für den gesamten Positionszeitraum aufgeführt werden dürfen.\nHinweis: Der Lieferant gibt innerhalb des Positionszeitraums den Zeitraum an, in dem diese Artikel-ID nicht gültig ist.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='615'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='610', description='Ist über den Positionszeitraum über die Stammdaten eine oder mehrere Konzessionsabgaben Artikel-ID vereinbart, die nicht der Sondervertragskunden-Konzessionsabgabe entspricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD1', note='Cluster: Ablehnung auf Positionsebene\nEs wird die Sondervertragskunden-Konzessionsabgabe abgerechnet, obwohl keine Abrechnung der Konzessionsabgabe über den Stammdatenaustausch vereinbart wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='615', description='Darf aus Sicht des LF die Artikel-ID in dieser Rechnung nicht angegeben werden, da diese aus Sicht des LF für diese Marktlokation und den dieser zugeordneten Messlokationen für den Positionszeitraum nicht zusammenpasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='A53', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='620'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='620', description='Ist die Artikel-ID für diesen Rechnungstypen für diesen Positionszeitraum zulässig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A54', note='Cluster: Ablehnung auf Positionsebene\nDiese Artikel-ID ist für diesen Rechnungstyp in dem besagtem Positionszeitraum nicht zulässig.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='622'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='622', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='625'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='625', description='Ist für die Artikel-ID die Zu- und Abschläge (inkl. Gemeinderabatt) berücksichtigt, die zuvor per Stammdaten ausgetauscht wurden?\nHinweis: Sollten in der geprüften Position keine Zu- oder Abschläge aufgeführt werden und keine per Stammdaten ausgetauscht/angekündigt wurden, so ist diese Frage mit „ja“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='627'), result_code='A55', note='Cluster: Ablehnung auf Positionsebene\nZu- oder Abschlag wurden nicht, wie in den Stammdaten ausgetauscht, berücksichtigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='627'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='627', description='Wird mit der Artikel-ID eine physikalische Leistung abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='676'), result_code=None, note='Hinweis: Mit einer physikalischen Leistung wird keine Resultierende und keine korrespondierende Resultierende gebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='630'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='630', description='Gibt es mehr als eine Position mit dieser Artikel-ID?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='635'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='645'), result_code=None, note='Hinweis: Diese Position ist die Resultierende, mit der die weiteren Prüfungen durchgeführt werden.')], use_cases=None), EbdTableRow(step_number='635', description='Gibt es mindestens eine weitere Position mit dieser Artikel-ID, aber höhere Positionsnummer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Es wurde noch nicht die letzte Position mit dieser Artikel-ID erreicht und somit wird noch nicht die Resultierende ermittelt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='640'), result_code=None, note='Hinweis: Es wurde die letzte Position mit dieser Artikel-ID erreicht. Somit kann und wird nun die Resultierende dieser Artikel-ID ermittelt')], use_cases=None), EbdTableRow(step_number='640', description='Umfasst die ermittelte Resultierende genau einen lückenlosen Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AA9', note='Cluster: Ablehnung auf Positionsebene\nDie Ermittlung der Resultierenden mit dieser Artikel-ID ist gescheitert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='645'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='645', description='Ist der Beginn des Zeitraums der Resultierenden < 01.01.2023 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB1', note='Cluster: Ablehnung auf Positionsebene\nDie Resultierende < 01.01.2023 00:00 Uhr.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='650'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='650', description='Ist die berechnete (fakturierte) Menge eine physikalische Arbeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='651'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='651', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-10-4, 1-10-5, 1-10-6, 1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='652'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='652', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='653'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='660'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='653', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='AE4', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='660', description='Entsprechen die einzelnen Positionen der Mengen des Lieferscheins dem Absolutbetrag der Menge der Resultierenden der Rechnung?\nHinweis: Laut GPKE müssen die angegebenen Abrechnungsenergiemengen der Netznutzungsrechnung in ihrer Höhe und über den Zeitraum mit den vorher auf Ebene der Marktlokation vom NB im Lieferschein übermittelten Abrechnungsenergiemengen übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='665'), result_code='A56', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht zu den Mengen auf dem übermittelten Lieferschein übereinstimmen. \nBefüllungshinweis Identifikation der Zeile/Position im Dokument: Der LF gibt die größte Positionsnummer der Artikel-ID mit, bei der die Resultierende der Rechnung nicht der Menge aus dem Lieferschein entspricht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='665'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='665', description='Liegen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB oder bei einem unterjährigen Lieferantenwechsel die Energiemenge und bis zu zwei Leistungsmaxima vom NB vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den Zeitraum der Resultierenden nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='670'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='670', description='Fehlen für den Zeitraum der Resultierenden die Lastgänge an der Marktlokation vom MSB und wurde diese beim MSB reklamiert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='675'), result_code='AB2', note='Cluster: Ablehnung auf Positionsebene\nEs fehlen Werte vom MSB bzw. es wurden fehlerhafte Werte vom MSB gesendet und diese wurden bereits per ORDERS reklamiert. \nHinweis: Der LF gibt die Geschäftsvorfallnummer der ORDERS an, mit der die fehlenden Werte bzw. fehlerhafte Werte reklamiert wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='675'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='675', description='Fehlt für den Zeitraum der Resultierenden das Leistungsmaximum und die Energiemenge der Marktlokation für den Zeitraum des Jahres vor dem Lieferantenwechsel vom NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code='AB3', note='Cluster: Ablehnung auf Positionsebene\nAufgrund des unterjährigen Lieferantenwechsels fehlt das Leistungsmaximum und die Energiemenge für den Zeitraum des Jahres vor dem Lieferantenwechsel, die der NB hätte senden müssen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='676', description='Ist die in der Position angegebene Leistung < 0?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note='Hinweis: Es handelt sich um eine Rücknahmeposition'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='677'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='677', description='Entspricht das in der Position angegebene Leistungsmaximum dem Leistungsmaximum des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='680'), result_code='AC6', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung mit dem Verweis auf die Position ab, welche nicht mit dem Leistungsmaximum des Lieferscheins übereinstimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='680'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='680', description='Ist zur Artikel-ID ein Preis im Preisblatt bekanntgegeben worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='685'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='690'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='685', description='Wurde der richtige Preis aus dem Preisblatt zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A58', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='687'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='687', description='Ist die berechnete (fakturierte) Menge eine physikalische Leistung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note='Hinweis: Prüfung einer Position mit physikalischer Leistung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='690', description='Wurde der Preis zur Artikel-ID über die Stammdaten ausgetauscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='695'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='698'), result_code=None, note='Hinweis: Preise der betroffenen Artikel-ID werden weder über das Preisblatt noch über die Stammdaten ausgetauscht.')], use_cases=None), EbdTableRow(step_number='695', description='Wurde der richtige Preis aus den zuvor ausgetauschten Stammdaten zur Artikel-ID in der Rechnung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A59', note='Cluster: Ablehnung auf Positionsebene\nDer Preis für den Artikel ist falsch.\nHinweis: Der LF teilt den erwarteten Preis zur Artikel-ID mit.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='698', description='Handelt es sich um eine Artikel-ID, die der Gruppenartikel-ID 1-07-1 oder 1-07-2 zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='700'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='700', description='Handelt es sich bei der Artikel-ID um eine, über die die Höchstsätze einer der nachfolgenden festgelegten Abgaben und Umlagen abgerechnet werden:\nHinweis: \nFolgende Abgaben und Umlagen sind betroffen:\n§ 19 StromNEV Umlage\nUmlage abschaltbare Lasten\nOffshore-Netzumlage\nKonzessionsabgabe\nAbgabe KWKG', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='710'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AC2', note='Cluster: Ablehnung auf Positionsebene\nDer Preis wurde nicht angeben (weder im Preisblatt noch über Stammdaten) und ist auch nicht über „gesetzliche Vorgaben“ bekannt.')], use_cases=None), EbdTableRow(step_number='710', description='Entspricht der Preis der Artikel-ID der gesetzlichen Vorgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A61', note='Cluster: Ablehnung auf Positionsebene\nDer NB hat den falschen Preis für die gesetzliche festgelegte Umlage bzw. Abgabe benutzt. \nHinweis: Der LF gibt den erwarteten Preis für die gesetzliche Umlage bzw. Abgabe an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='715'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='715', description='Ist der Abrechnungszeitraum der Resultierenden bereits in einer vorhergehenden, akzeptierten und nicht stornierten Turnusrechnung oder Zwischenrechnung oder Abschlussrechnung enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='720'), result_code='A62', note='Cluster: Ablehnung auf Positionsebene\nAbrechnungszeitraum der der Resultierenden wird doppelt abgerechnet.\nHinweis: Der LF nennt die Rechnungsnummer der Rechnung, in der diese Position bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='720'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='720', description='Fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt? \nHinweis: Findet der Anschlussnutzerwechsel zum Beginnzeitpunkt oder zum Endezeitpunkt des Zeitraums der Resultierenden statt, so ist diese Frage mit „nein“ zu beantworten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB4', note='Cluster: Ablehnung auf Positionsebene\nEs fand im Zeitraum der Resultierenden ein Anschlussnutzerwechsel statt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='725'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='725', description='Ist die Artikel-ID der zu prüfenden Positionen abhängig von der Benutzungsstundendauer?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='730'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='770'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='730', description='Ist die aus den Leistungs- und Arbeitswerten des Lieferscheins berechnete Benutzungsstundendauer (h/a) für den Zeitraum eines Anschlussnutzers und des Abrechnungszeitraumes ≥ 2.500 Stunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='735'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer ≥ 2.500 h/a in Rechnung stellen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='755'), result_code=None, note='Hinweis: Der NB kann nur Artikel-IDs aus Jahresbenutzungsstundendauer< 2.500 h/a in Rechnung stellen.')], use_cases=None), EbdTableRow(step_number='735', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='740'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='740', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB5', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='755', description='Wurde die Artikel-ID für die Benutzungsstundendauer < 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='760'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='760', description='Wurde die Artikel-ID für die Benutzungsstundendauer ≥ 2.500 Stunden pro Jahr verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AB7', note='Cluster: Ablehnung auf Positionsebene\nFalsche Artikel-ID verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='765'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='765', description='Erfolgt über die mit dieser Artikel-ID Resultierende eine vollständige Rücknahme dessen, was in allen zu dieser 13I gehörenden MVR bereist mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='A63', note='Cluster: Ablehnung auf Positionsebene\nEs werden zu wenige bzw. zu viele Positionen aus den vorangegangenen MVR zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='770', description='Handelt es sich um eine Artikel-ID für die Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='775'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='772'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='772', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen, akzeptierten und nicht stornierten MVR mit dieser Artikel-ID abgerechnet und auch in keiner vorangegangenen, akzeptierten und nicht stornierten MVR zurückgenommen wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AB8', note='Cluster: Ablehnung auf Positionsebene\nDie Leistung wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Leistung bereits abgerechnet wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='775', description='Gibt es weitere Artikel-ID für eine Konzessionsabgabe, die von dieser Artikel-ID abweicht, mit der sich somit eine weitere Resultierende bilden lässt?\nHinweis: In den Prüfschritten 775 bis 791 wird zur Reduzierung der Anzahl der beschriebenen Prüfungen vom Standard abgewichen, immer nur die zur Prüfung stehende Resultierende zu betrachten.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='781'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='780'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='780', description='Wird über diese Resultierende mit dieser Artikel-ID ein Zeitraum abgerechnet, der bereits in einer vorangegangenen MVR mit dieser Artikel-ID abgerechnet wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='791'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD6', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wurde bereits in einer vorangegangenen MVR abgerechnet.\nHinweis: Der LF gibt die Referenz der Rechnungen (MVR) an, in denen die Konzessionsabgabe bereits abgerechnet wurde.')], use_cases=None), EbdTableRow(step_number='781', description='Ist mindestens eine der Resultierenden eine Rücknahmeposition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='782'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='786'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='782', description='Wird mit allen Resultierenden der Rücknahmepositionen alle bereits bezahlten Konzessionsbeträge mit der entsprechenden Artikel-ID vollständig zurückgenommen?\nHinweis: Die Rücknahmeposition (es können auch mehrere sein) kann auch mit einer anderen Resultierenden zur Konzessionsabgabe dieser Rechnung erfolgen als die zur Prüfung stehende Resultierende. Wichtig ist, dass die bereits gezahlten Konzessionsbeträge vollständig zurückgenommen wurden.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='784'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='783'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='783', description='Ist die Resultierende der Rücknameposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD5', note='Cluster: Ablehnung auf Positionsebene\nMit den Rücknahmepositionen werden nicht alle bereits bezahlten Konzessionsbeträge vollständig zurückgenommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='784', description='Wird mit der Resultierenden der Vorwärtsposition für das Kalenderjahr die richtige Konzessionsabgabe abgerechnet?\nHinweis: Die richtige Konzessionsabgabe ergibt sich aus der Prüfung der Leistungswerte und Energiemenge gegen die Kriterien der Sondervertragskunden -Konzessionsabgabe und der Nutzung des gesetzlichen Preisvorgaben bzw. den gemeindespezifischen Konzessionsabgabe des Netzbetreiber.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='785'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='785', description='Ist die Resultierende der Vorwärtsposition, die zur Prüfung stehende Resultierende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code='AD3', note='Cluster: Ablehnung auf Positionsebene\nEs wird die falsche Konzessionsabgabe für das Kalenderjahr abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='786', description='Handelt es sich bei den Resultierenden um die Artikel-ID für Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder um die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='787'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD7', note='Cluster: Ablehnung auf Positionsebene\nDie Konzessionsabgabe wird falsch abgerechnet.')], use_cases=None), EbdTableRow(step_number='787', description='Wird in derselben Rechnung eine Konzessionsabgaben- Position mit einer Artikel-ID, die nicht der Konzessionsabgabe in Schwachlast- oder Nicht-Schwachlastzeiten (oder die gemeindespezifische Konzessionsabgabe für Schwachlast- oder Nicht-Schwachlastzeiten) entspricht, mit positiver Menge abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='788'), result_code='AD8', note='Cluster: Ablehnung auf Positionsebene\nKonzessionsabgabe wird doppelt abgerechnet.')], use_cases=None), EbdTableRow(step_number='788', description='Ist die zu prüfenden Artikel-ID zugehörig zu einer der folgenden Gruppenartikel-ID:\n1-08-2-AGS-K und 1-08-5-AGS-KG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='789'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='789', description='Gibt es zu der prüfenden Artikel-ID mindestens eine weitere Resultierende mit einer Artikel-ID, die zu der Gruppenartikel-ID zugehörig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='790'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='793'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='790', description='Entspricht die Summe der Mengen aus all den Resultierenden, die zu dieser Gruppenartikel-ID gebildet werden, der Mengen des Lieferscheins?\nHinweis: Dazu müssen alle Resultierenden der betroffenen Gruppenartikel-ID gebildet werden. Aus jeder dieser Resultierenden ist die Menge zu entnehmen. Diese Mengen sind zu summieren.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AE5', note='Cluster: Ablehnung auf Positionsebene\nDer LF lehnt die Rechnung ab, da die Summe der Mengen nicht zum Lieferschein passt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='793', description='Ist die Energiemenge der Resultierenden plausibel zur Energiemenge des Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='794'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD4', note='Cluster: Ablehnung auf Positionsebene\nDie Energiemenge der Resultierenden passt nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='794', description='Ist die saldierte Energiemenge der Konzessionsabgabe passend zum Lieferschein?\nHinweis: Die saldierte abgerechnete Energiemenge ergibt sich durch Addition aller Energiemengen (unter Berücksichtigung derer Vorzeichen) aller Resultierenden zur Konzessionsabgabe dieser Rechnung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='795'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='795'), result_code='AD9', note='Cluster: Ablehnung auf Positionsebene\nDie saldierte Energiemenge der Resultierenden passen nicht zum Lieferschein')], use_cases=None), EbdTableRow(step_number='795', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='799'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene\nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='799'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='799', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='800'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='800', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='805'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='805', description='Fehlen noch Artikel-ID für Rechnungspositionen ≥ 01.01.2023 00:00 Uhr, die vorher mit den Stammdaten ausgetauscht und somit in der Rechnung erwartet wurden?\nHinweis: Hat sich die tatsächlich abgerechnete Konzessionsabgabe gegenüber der in den Stammdaten ausgetauschten Konzessionsabgabe geändert, ist die Artikel-ID, welche zuvor in den Stammdaten ausgetauscht wurde, nicht als fehlende Artikel-ID zu übermitteln.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A78', note='Cluster: Ablehnung auf Summenebene\nErwartete Artikel-ID in der Rechnung nicht vorhanden.\nHinweis: Die erwarteten Artikel-ID sind zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='815'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='815', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='816'), result_code='A66', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe der Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='816'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='816', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='817'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='820'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='817', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='818'), result_code='AC3', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='818'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='818', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern der vorausbezahlten Beträge mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='AC4', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern der Rechnung entspricht nicht der Summe der Steuern der vorausbezahlten Rechnungen. \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='820', description='Entspricht für diesen Steuersatz die Angabe des vorausgezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='825'), result_code='A67', note='Cluster: Ablehnung auf Summenebene\nDie Summe der vorausbezahlten Beträge mit diesem Steuersatz entspricht nicht dem in dieser Rechnung angegebenen vorausbezahlten Betrag mit diesem Steuersatz \nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='825'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='825', description='Entspricht die vorausbezahlte Steuer der Summe der Steuern, die in den tatsächlich gezahlten Beträgen in den referenzierten Rechnungen mit diesem Steuersatz enthalten sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='830'), result_code='A68', note='Cluster: Ablehnung auf Summenebene\nSumme der Steuern entspricht nicht der Summe der vorausbezahlten Steuern aus den referenzierten Rechnungen.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='830'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='830', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='835'), result_code='A69', note='Cluster: Ablehnung auf Summenebene\nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='835'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='835', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='815'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='900'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='900', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='905'), result_code='A70', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrags) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='905'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='905', description='Entspricht der fällige Betrag dieser Rechnung dem Rechnungsbetrag abzgl. der Summe aller vorausbezahlten Beträge, sofern diese vorhanden sind und abzgl. des Gemeinderabatt/Kommunalrabatt, sofern dieser vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='910'), result_code='A71', note='Cluster: Ablehnung auf Summenebene\nFälliger Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='910'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='910', description='Entspricht der Gemeinderabatt/Kommunalrabatt der Summe der Gemeinderabatt-/Kommunalrabattbeträge aus der Positionsebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='920'), result_code='A72', note='Cluster: Ablehnung auf Summenebene\nSumme des Gemeinderabatts ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='920'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='920', description='Handelt es sich bei dem Rechnungstyp um einen der folgenden:\nAbschlagsrechnung (ABS)\nMonatsrechnung (MVR)\nIntegrierte 13. Rechnung (13I)\n13. Rechnung (13R)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='921'), result_code=None, note='Hinweis: Es handelt sich um den Rechnungstyp Turnusrechnung (JVR), Abschlussrechnung (ABR) oder Zwischenabrechnung (ZVR).')], use_cases=None), EbdTableRow(step_number='921', description='Ist das Beginndatum des Abrechnungszeitraums ≥ 01.01.2023 00:00 Uhr gesetzlicher deutscher Zeit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='922'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='925'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='922', description='Ist der vorausbezahlte Betrag identisch mit der Summe aller zuvor bezahlten Abschlagsrechnungen, deren Abrechnungszeitraum im Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) liegen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='AC5', note='Cluster: Ablehnung auf Summenebene\nFür den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) sind nicht alle zuvor bezahlten Abschlagsrechnungen enthalten \nHinweise: Der LF gibt die Rechnungsnummern aller Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='925', description='Sind für den Abrechnungszeitraum der Rechnung (JVR, ZVR, ABR) alle Referenzen der zugehörigen und zuvor bezahlten Abschlagsrechnungen enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code='A74', note='Cluster: Ablehnung auf Summenebene\nReferenzen auf zuvor bezahlte Abschlagsrechnungen fehlen. \nHinweise: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die er in dieser Rechnung erwartet hat und die nicht in dieser Rechnung berücksichtigt wurden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='927'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='927', description='Entspricht die Angabe des vorausbezahlten Betrages der Summe der tatsächlich gezahlten Beträge aus den referenzierten Rechnungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='930'), result_code='A73', note='Cluster: Ablehnung auf Summenebene\nAusgewiesener vorausgezahlter Betrag ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='930'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='930', description='Sind alle in der Rechnung (JVR, ZVR, ABR) berücksichtigten Abschlagsrechnungen durch den Empfänger mit einem Zahlungsavis bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='935'), result_code='A76', note='Cluster: Ablehnung auf Summenebene\nMindestens eine Abschlagsrechnung, die in dieser Rechnung berücksichtig wurde, wurde vom LF abgelehnt oder nicht beantwortet. \nAngeforderte, aber nicht beglichene Abschlagsrechnungen sind vom NB zu stornieren.\nHinweis: Der LF gibt die Rechnungsnummern der Abschlagsrechnungen an, die nicht in der vorliegenden Rechnung hätten berücksichtigt werden dürfen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='935'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='935', description='Ist mindestens eine der referenzierten Abschlagsrechnungen bereits in einer anderen Rechnung verrechnet worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='940'), result_code='A75', note='Cluster: Ablehnung auf Summenebene\nMindestens eine referenzierte Abschlagsrechnung ist bereits verrechnet worden. \nHinweis: Der LF gibt in der Ablehnung die Abschlagsrechnung(en), welche bereits verrechnet wurden, sowie die Rechnung(en) (im RFF+AFL), in der der Abschlag/die Abschläge (im FTX+Z14) bereits berücksichtigt wurden, an.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='940'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='940', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='990'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiger Fehler in den Summenteil.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNetznutzungsmöglichkeit: Ende offen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='990'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='990', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='100', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='805', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Artikel-ID keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='815', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 815 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem NB als Ergebnis übermittelt.\nFolgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen; dies gilt für alle Rechnungstypen, ausgenommen der Sonderrechnung.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0408]
  EbdTableMetaData(ebd_code='E_0408', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0005_Antwort auf Änderung vom NB\nS_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB\nS_0013_Antwort auf Änderung der Marktlokationsstruktur')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0409]
  EbdTableMetaData(ebd_code='E_0409', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0006_Antwort auf Änderung vom NB\nS_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB\nS_0014_Antwort auf Änderung der Lokationsbündelstruktur')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0410]
  EbdTableMetaData(ebd_code='E_0410', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0015_Antwort auf Änderung vom LF\nS_0017_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0411]
  EbdTableMetaData(ebd_code='E_0411', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0016_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0412]
  EbdTableMetaData(ebd_code='E_0412', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0413]
  EbdTableMetaData(ebd_code='E_0413', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0029_Antwort auf Anfrage\nS_0030_Ablehnung Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0414]
  EbdTableMetaData(ebd_code='E_0414', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0415]
  EbdTableMetaData(ebd_code='E_0415', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0018_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0416]
  EbdTableMetaData(ebd_code='E_0416', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0418]
  EbdTableMetaData(ebd_code='E_0418', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0021_Antwort auf Anfrage\nS_0023_Antwort auf Anfrage\nS_0024_Ablehnung der Anfrage\nS_0025_Antwort auf Anfrage\nS_0101_Antwort auf Anfrage der Marktlokationsstruktur\nS_0027_Ablehnung der Anfrage der Marktlokationsstruktur')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0419]
  EbdTableMetaData(ebd_code='E_0419', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0006_Antwort auf Änderung vom NB\nS_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0420]
  EbdTableMetaData(ebd_code='E_0420', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0005_Antwort auf Änderung vom NB\nS_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0421]
  EbdTableMetaData(ebd_code='E_0421', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0022_Antwort auf Anfrage\nS_0026_Antwort auf Anfrage\nS_0028_Antwort auf Anfrage der Lokationsbündelstruktur')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0422]
  EbdTableMetaData(ebd_code='E_0422', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0005_Antwort auf Änderung vom NB\nS_0007_Antwort auf Änderung vom NB\nS_0009_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0423]
  EbdTableMetaData(ebd_code='E_0423', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0006_Antwort auf Änderung vom NB\nS_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0424]
  EbdTableMetaData(ebd_code='E_0424', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0031_Antwort auf Anfrage\nS_0032_Antwort auf Anfrage\nS_0033_Ablehnung der Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0425]
  EbdTableMetaData(ebd_code='E_0425', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0016_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0426]
  EbdTableMetaData(ebd_code='E_0426', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0031_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0427]
  EbdTableMetaData(ebd_code='E_0427', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0034_Antwort auf Anfrage\nS_0035_Ablehnung Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0428]
  EbdTableMetaData(ebd_code='E_0428', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0016_Antwort auf Änderung vom LF')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0429]
  EbdTableMetaData(ebd_code='E_0429', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0038_Antwort auf Anfrage\nS_0094_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0430]
  EbdTableMetaData(ebd_code='E_0430', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0036_Antwort auf Anfrage\nS_0037_Ablehnung der Anfrage\nS_0098_Ablehnung der Anfrage\nS_0099_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0431]
  EbdTableMetaData(ebd_code='E_0431', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0039_Antwort auf Änderung\nS_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0432]
  EbdTableMetaData(ebd_code='E_0432', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0040_Antwort auf Änderung\nS_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0434]
  EbdTableMetaData(ebd_code='E_0434', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0039_Antwort auf Änderung\nS_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0435]
  EbdTableMetaData(ebd_code='E_0435', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0040_Antwort auf Änderung\nS_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0436]
  EbdTableMetaData(ebd_code='E_0436', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0038_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0438]
  EbdTableMetaData(ebd_code='E_0438', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da die Ablehnung über eine APERAK erfolgt.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0441]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0441', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0441 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der LF im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der LF für den angefragten Zeitraum z. B. aufgrund einer Vollmacht berechtigt die angefragten Stammdaten zu erhalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0442]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0442', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0442 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der LF im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Falscher Prozess\nHinweis: WiM Geschäftsprozess „Reklamation von Werten beim MSB“ ist zu verwenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der LF für den angefragten Zeitraum berechtigt die angefragten Werte in der angefragten Granularität zu erhalten?\nAuflistung, siehe WiM Strom, Kapitel „Zu übermittelnde Werte“ in der jeweils gültigen Fassung.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Mussten die angefragten Werte in Art und Umfang in der Vergangenheit erfasst werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es wurden Werte angefragt, die es auf der ge-nannten Marktlokation, Messlokation oder Tranche nicht geben kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurden die angefragten Werte auf der genannten Marktlokation, Messlokation oder Tranche erfasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die angefragten Werte sind nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Werte versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0443]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0443', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0443 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der MSB im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der MSB für den angefragten Zeitraum z.\xa0B. aufgrund einer Vollmacht berechtigt die angefragten Stammdaten zu erhalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdaten versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0444]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0444', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0444 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist der NB im angefragten Zeitraum der genannten Marktlokation, Messlokation bzw. Tranche zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Falscher Prozess\nHinweis: WiM Geschäftsprozess „Reklamation von Werten beim MSB“ ist zu verwenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der NB für den angefragten Zeitraum berechtigt die angefragten Werte zu erhalten?\nAuflistung, siehe WiM Strom, Kapitel „Zu übermittelnde Werte“ in der jeweils gültigen Fassung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Keine Berechtigung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Mussten die angefragten Werte in Art und Umfang in der Vergangenheit erfasst werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es wurden Werte angefragt, die es auf der genannten Marktlokation, Messlokation oder Tranche nicht geben kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurden die angefragten Werte auf der genannten Marktlokation, Messlokation oder Tranche erfasst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die angefragten Werte sind nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Werte versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0445]
  EbdTableMetaData(ebd_code='E_0445', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0043_ORDRSP_Ablehnung der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0446]
  EbdTableMetaData(ebd_code='E_0446', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0038_Antwort auf Anfrage\nS_0102_Antwort auf Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0447]
  EbdTableMetaData(ebd_code='E_0447', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0041_Antwort auf Anfrage\nS_0100_Ablehnung der Anfrage')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0448]
  EbdTableMetaData(ebd_code='E_0448', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0039_Antwort auf Änderung\nS_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0449]
  EbdTableMetaData(ebd_code='E_0449', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0040_Antwort auf Änderung\nS_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0450]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0450', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0450 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des NB festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A97', note='Die Stammdaten des NB genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des NB anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wechselt für die Marktlokation die Aggregationsverantwortung vom ÜNB zum NB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB zur Datenaggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Die Marktlokation bzw. Tranche ist zum genannten Zeitpunkt nicht dem ÜNB zur Aggregation zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt eine Stilllegung der Marktlokation vor bzw. wurde die Marktlokation über das Netz des NB in ein anderes Übertragungsnetz eingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note='Hinweis: Es liegt eine Änderung des Bilanzierungsverfahrens von Viertelstundenwerte auf Profile vor und die Aggregationsverantwortung liegt beim NB')], use_cases=None), EbdTableRow(step_number='5', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Die Marktlokation bzw. Tranche ist zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt das im Vorgang unter "Verwendung der Daten bis" genannte Datum zum Zeitpunkt des Empfangs des Vorgangs beim ÜNB vor dem Beginn des Vormonats, in dem der Vorgang beim ÜNB eingeht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Das Datum „Verwendung der Daten bis“ des Vor-gangs liegt vor dem Beginn des Vormonats, in dem der Vorgang beim ÜNB eingeht. \nHinweis: Eine Korrektur des Datums "Verwendung der Daten bis" auf den nächstmöglichen Zeitpunkt ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem NB zur Datenaggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Die Marktlokation bzw. Tranche ist zum genannten Zeitpunkt nicht dem NB zur Aggregation zugeordnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Liegt die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem ÜNB mit dem Bilanzierungsverfahren Bilanzierung auf Basis von Viertelstundenwerten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Marktlokation bzw. Tranche liegt zum genannten Zeitpunkt dem ÜNB nicht mit dem Bilanzierungsverfahren Bilanzierung auf Basis von Viertelstundenwerten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt das im Vorgang unter "Verwendung der Daten bis" genannte Datum zum Zeitpunkt des Empfangs des Vorgangs beim ÜNB vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Das Datum „Verwendung der Daten bis“ des Vorgangs liegt vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht. \nHinweis: Eine Korrektur des Datums "Verwendung der Daten bis" auf den nächstmöglichen Zeitpunkt ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist das im Vorgang unter "Verwendung der Daten bis" genannte Datum ein anderes Datum, als der Erste eines Monats?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Das Datum "Verwendung der Daten bis" ist nicht der Erste eines Monats. \nHinweis: Eine Korrektur des Datums "Verwendung der Daten bis" auf den Ersten eines Monats ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist die Marktlokation bzw. Tranche zu dem im Vorgang unter „Verwendung der Daten bis“ genannten Zeitpunkt dem im Vorgang angegebenen Netzbetreiber zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Angegebener Netzbetreiber ist zum angegebenen Zeitpunkt der Marktlokation bzw. Tranche nicht zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der im Vorgang genannte LF identisch mit dem Absender der Nachricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='LF im Vorgang weicht vom Absender ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Stammdaten wurden widerspruchsfrei übernommen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0452]
  EbdTableMetaData(ebd_code='E_0452', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0109_Nichtzahlungsavis prüfen')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0453]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0453', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0453 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des NB festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A97', note='Die Stammdaten des NB genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des NB anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.\nEine Durchführung der nachfolgend in diesem EBD genannten Prüfungen erfolgt nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist als Aggregationsverantwortlicher der ÜNB im Vorgang angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die im Vorgang enthaltene Marktlokations-ID zum genannten Zeitpunkt dem ÜNB bereits zur Aggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code='A19', note='Die Marktlokation bzw. Tranche ist für den genannten Zeitpunkt nicht dem ÜNB zur Aggregation gemeldet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des LF festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code='A98', note='Die Stammdaten des LF genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des LF anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Wurde die angegebene Verarbeitungsnummer im Vorgang bereits für einen verarbeiteten Vorgang zu dieser Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code='A20', note='Verarbeitungsnummer bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code='A01', note='Regelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Ist der angegebene Netzbetreiber der Marktlokation in der Regelzone bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code='A02', note='Netzbetreiber nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist das Bilanzierungsgebiet zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code='A03', note='Bilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der angegebene Netzbetreiber dem Bilanzierungsgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code='A14', note='Angegebener NB entspricht nicht dem zugeordneten NB des Bilanzierungsgebiets'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Wird die Marktlokation auf Grundlage von Werten bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist der Messstellenbetreiber zum angegebenen Zeitpunkt in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A15', note='Messstellenbetreiber nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der im Vorgang genannte LF identisch mit dem Absender der Nachricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code='A04', note='LF im Vorgang weicht vom Absender ab'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Ist der Bilanzkreis zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code='A05', note='Bilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Passt die Prognosegrundlage zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code='A16', note='Prognosegrundlage passt nicht zum ZRT'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code='A06', note='OBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Passt die Lieferrichtung zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='17'), result_code='A07', note='Lieferrichtung nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Passt der angegebene Aggregationsverantwortliche in dem Vorgang zur Aggregationsverantwortung der Marktlokation im System des ÜNB, sofern die Marktlokation beim ÜNB schon bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code='A17', note='Aggregationsverantwortlicher im Vorgang passt nicht zur Aggregationsverantwortung der Marktlokation im System des ÜNB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Ist die Aggregationsverantwortung im Vorgang dem NB zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code='A18', note='Falscher Aggregationsverantwortlicher'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist die Aggregationsverantwortung im Vorgang dem ÜNB zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht der Zeitreihentyp (ZRT) den gültigen ZRT zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code='A08', note='ZRT nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Entspricht das Bilanzierungsverfahren dem gültigen Bilanzierungsverfahren zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='23'), result_code='A09', note='Bilanzierungsverfahren nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt für das Bilanzierungsgebiet Bestandteil der Profildefinitionsliste des Netzbetreibers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code='A10', note='Normiertes Profil liegt nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt ein Profil aus der Gruppe SLP mit synthetischen Verfahren?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code='A11', note='Normiertes Profil nicht SLP mit synthetischem Verfahren'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Ist die Prognosegrundlage der Marktlokation eine, für die der ÜNB die Aggregation durchführen darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code='A12', note='Unpassende Prognosegrundlage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Hat keine vorangegangene Prüfung zu einer Antwort geführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Stammdaten wurden widerspruchsfrei übernommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Stammdaten wurden übernommen \nHinweis A**: Es werden alle gemerkten Antwortcodes der vorhergehenden Prüfschritte übermittelt.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='4', instruction_text='Alle festgestellten Antworten sind anzugeben, soweit im Format möglich (maximal 8 Antwortcodes)*.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0454]
  EbdTableMetaData(ebd_code='E_0454', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0455]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0455', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0455 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des NB festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A97', note='Die Stammdaten des NB genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des NB anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.\nEine Durchführung der nachfolgend in diesem EBD genannten Prüfungen erfolgt nicht.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist die Marktlokation zu dem im Vorgang unter „Verwendung der Daten ab“ genannten Zeitpunkt bereits dem ÜNB zur Datenaggregation zugeordnet und die Meldung nicht als Korrektur kenntlich gemacht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A01', note='Zuordnung der Datenaggregation liegt bereits vor. Änderungen sind mittels Stammdatensynchronisation durchzuführen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist die Meldung als Korrektur kenntlich gemacht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist die im Vorgang enthaltene Marktlokations-ID zum genannten Zeitpunkt dem ÜNB bereits zur Aggregation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code='A19', note='Die Marktlokation bzw. Tranche ist für den genannten Zeitpunkt nicht dem ÜNB zur Aggregation gemeldet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt das im Vorgang unter "Verwendung der Daten ab" genannte Datum zum Zeitpunkt des Empfangs des Vorgangs beim ÜNB vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A20', note='Das Datum „Verwendung der Daten ab“ des Vorgangs liegt vor dem Beginn des Monats, in dem der Vorgang beim ÜNB eingeht. \nHinweis: Eine Korrektur des Datums "Verwendung der Daten ab" auf den nächstmöglichen Zeitpunkt ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist das im Vorgang unter "Verwendung der Daten ab" genannte Datum ein anderes Datum, als der erste eines Monats?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Die Übertragung der Datenaggregation durch den ÜNB kann nur zum Ersten eines Monats erfolgen. Eine Korrektur des Datums "Verwendung der Daten ab" auf den nächstmöglichen Zeitpunkt ist erforderlich.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Sind Fehler im Rahmen der AHB-Prüfungen in den Stammdaten des LF festgestellt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code='A98', note='Die Stammdaten des LF genügen nicht den AHB-Vorgaben.\nHinweis: Diese Prüfung ist auf alle Stammdaten des LF anzuwenden. Es sind die Fehlerorte aller dabei festgestellten Fehler in der Antwort zu benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wurde die angegebene Verarbeitungsnummer im Vorgang bereits für einen verarbeiteten Vorgang zu dieser Marktlokation verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code='A22', note='Verarbeitungsnummer bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist die richtige Regelzone angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code='A02', note='Regelzone falsch'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist der angegebene Netzbetreiber der Marktlokation in der Regelzone bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code='A03', note='Netzbetreiber nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Ist das Bilanzierungsgebiet zum angegebenen Zeitpunkt in der Regelzone gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code='A04', note='Bilanzierungsgebiet nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist der angegebene Netzbetreiber dem Bilanzierungsgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code='A16', note='Angegebener Netzbetreiber entspricht nicht dem zugeordneten Netzbetreiber des Bilanzierungs-gebiets.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Wird die Marktlokation auf Grundlage von Werten bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Ist der Messstellenbetreiber zum angegebenen Zeitpunkt in der BDEW-Codenummerndatenbank registriert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code='A18', note='Messstellenbetreiber nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Ist der im Vorgang genannte LF identisch mit dem Absender der Nachricht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code='A05', note='LF im Vorgang weicht vom Absender ab.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Ist der Bilanzkreis zum angegebenen Zeitpunkt gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='17'), result_code='A06', note='Bilanzkreis nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Entspricht der Zeitreihentyp (ZRT) dem gültigen ZRT zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code='A07', note='ZRT nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Passt die Prognosegrundlage zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code='A17', note='Prognosegrundlage passt nicht zum ZRT.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='Passt die OBIS-Kennzahl zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code='A08', note='OBIS nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Passt die Lieferrichtung zum ZRT?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code='A09', note='Lieferrichtung nicht passend'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht das Bilanzierungsverfahren dem gültigen Bilanzierungsverfahren zur Datenaggregation beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='23'), result_code='A10', note='Bilanzierungsverfahren nicht gültig'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird die Marktlokation auf Grundlage von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt für das Bilanzierungsgebiet Bestandteil der Profildefinitionsliste des Netzbetreibers?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code='A12', note='Normiertes Profil liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Ist das angegebene normierte Profil zum angegebenen Zeitpunkt ein Profil aus der Gruppe SLP mit synthetischen Verfahren?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code='A13', note='Normiertes Profil – nicht SLP mit synthetischem Verfahren'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Ist die Prognosegrundlage der Marktlokation eine, für die der ÜNB die Aggregation durchführen darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='27'), result_code='A14', note='Unpassende Prognosegrundlage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Hat keine vorangegangene Prüfung zu einer Antwort geführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Stammdaten wurden widerspruchsfrei übernommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A**', note='Stammdaten wurden übernommen.\nHinweis A**: Es werden alle gemerkten Antwortcodes der vorhergehenden Prüfschritte übermittelt')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='7', instruction_text='Alle festgestellten Antworten sind anzugeben, soweit im Format möglich (maximal 8 Antwortcodes)*.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0456]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0456', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0456 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich bei der Marktlokation um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nFür diese Marktlokation ist kein Lieferschein zu versenden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt das Endedatum des Zeitraums des Lieferscheins in der Zukunft?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEndedatum liegt in der Zukunft.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Entspricht der Typ dieses Lieferscheins (Grund-/Arbeitspreis bzw. Arbeits-/Leistungspreis) für den übermittelten Zeit-raum mit der an der Marktlokation hinterlegten Netznutzungsabrechnungsvariante (Grund-/Arbeitspreis bzw. Arbeits-/Leistungspreis)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nDer Typ des Lieferscheins ist nicht identisch zur Netznutzungsabrechnungsvariante.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Handelt es sich um einen Lieferschein vom Typ „Grund-/ Arbeitspreis“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt in dem Lieferschein genannten Zeitraum mindestens ein Tag eines noch nicht stornierten Lieferscheins?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nÜberschneidender Zeitraum in noch nicht stornierten Lieferscheinen „Arbeits-/Grundpreis“'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „keine Messung“ (pauschale Marktlokation)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Entspricht die im Lieferschein übermittelte Energiemenge der Energiemenge, welche sich aus der zuvor für den Zeitraum ausgetauschten Jahresverbrauchsprognose ergibt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nEnergiemenge für pauschale Marktlokation stimmt nicht überein.')], use_cases=None), EbdTableRow(step_number='8', description='Liegen nach Reklamation beim MSB für den korrespondierenden Zeitraum des Lieferscheins die Energiemengen an der Marktlokation vom MSB vor?\nHinweis: Sollten die Energiemengen an der Marktlokation vom MSB für den korrespondierenden Zeitraum nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nEnergiemengen vom MSB an der Marktlokation fehlen und sind beim MSB reklamiert\nHinweis: \nDie Prüfung des Lieferscheins erfolgt für Leistungszeiträume vor dem 01.12.2019 auf Basis der Werte, die vom NB bzw. vom gMSB übermittelt wurden.\nSiehe Mitteilung Nr. 6 zur MaKo 2020 (Az.: BK6-18-032) der Bundesnetzagentur vom 28.01.2020.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Liegt für den im Lieferschein genannten Zeitraum für eine der genannten OBIS-Kennzahlen eine zusätzliche Energiemenge vor, die noch nicht storniert wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nFür einen Zeitabschnitt liegen für mindestens eine OBIS-Kennzahl mehrere Energiemengen vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die zuvor vom MSB übermittelte Summe der Energiemengen je OBIS-Kennzahl der Summe der Energiemengen der aus dem Lieferschein korrespondierenden OBIS-Kennzahl für den vom Lieferschein abgedeckten Zeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um eine Marktlokation, deren Netznutzung aufgrund vertraglicher Vereinbarungen abweichend zu den in GPKE Kapitel II. 6.2 beschriebenen Regelungen abgerechnet wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Entspricht die im Lieferschein übermittelte Energiemenge der Energiemenge, welche sich auf Basis der vertraglichen Vereinbarungen ergibt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nEnergiemenge widerspricht vertraglich vereinbarter Logik.')], use_cases=None), EbdTableRow(step_number='13', description='Entspricht die zuvor vom MSB übermittelte Summe der Energiemengen der Summe der Energiemengen aus dem Lieferschein für den vom Lieferschein abgedeckten Zeit-raum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nEnergiemengen stimmen nicht überein.')], use_cases=None), EbdTableRow(step_number='14', description='Handelt es sich um eine Marktlokation mit der messtech-nischen Einordnung „keine Messung“ (pauschale Markt-lokation)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Entspricht die Energiemenge aus dem Lieferschein den bilateral vertraglichen Vereinbarungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nEnergiemenge für pauschale Marktlokation stimmt nicht überein.')], use_cases=None), EbdTableRow(step_number='16', description='Liegen nach Reklamation für den korrespondierenden Zeit-raum des Lieferscheins die Lastgänge an der Marktlokation vom MSB und ggf. das Leistungsmaximum (bei iMS vom MSB, bei kME mit RLM aus Lastgang vom LF entnommen und bei einem unterjährigen Lieferantenwechsel vom NB) vor?\nHinweis: Sollten die Lastgänge an der Marktlokation vom MSB für den korrespondierenden Zeitraum des Lieferscheins nicht vorliegen, müssen diese erst vom LF beim MSB reklamiert worden sein, bevor diese Frage mit nein beantwortet werden darf.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nLastgänge vom MSB an der Marktlokation fehlen und sind beim MSB reklamiert oder vom NB fehlt die Nachricht „Arbeit und Leistungsmaximum Kalenderjahr vor Lieferbeginn".'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Handelt es sich um eine Marktlokation, deren Netznutzung aufgrund vertraglicher Vereinbarungen abweichend zu den in GPKE Kapitel II. 6.2 beschriebenen Regelungen abgerechnet wird?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Entspricht die Energiemenge bzw. das Leistungsmaximum aus dem Lieferschein den bilateral vertraglichen Vereinbarungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEnergiemenge bzw. Leistungsmaximum aus dem Lieferschein entspricht nicht der vertraglich vereinbarten Energiemenge.')], use_cases=None), EbdTableRow(step_number='19', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht das im Lieferschein übermittelte Leistungsmaximum dem Leistungsmaximum, das zuvor vom MSB über-mittelt wurde oder dem Leistungsmaximum, welches bei einem unterjährigen Lieferantenwechsel vom NB an den LF übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nLeistungsmaximum aus dem Lieferschein ist nicht identisch zum vorliegenden Leistungsmaximum.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Entspricht das im Lieferschein übermittelte Leistungsmaximum dem vorliegenden Leistungsmaximum beim LF, welches aus dem Lastgang vom MSB entnommen oder das Leistungsmaximum, welches bei einem unterjährigen Lieferantenwechsel vom NB an den LF übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nLeistungsmaximum unplausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Entspricht jede auf dem Lieferschein vorkommende Energiemenge je Position (OBIS-Kennzahl und Zeitraum) einer Summe der vom MSB zuvor übermittelten ¼ h-Werte unter Berücksichtigung von möglichen kaufmännischen Rundungen, wobei ggf. die Energiemengen aus den bisher gemessenen Arbeits- und Leistungswerten des NB berücksichtigt wurden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nEnergiemenge aus dem Lieferschein entspricht nicht der Summe aus dem Lastgang.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0458]
  EbdTableMetaData(ebd_code='E_0458', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0108_Weitere Bearbeitung prüfen')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0459]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0459', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0459 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0460]
  EbdTableMetaData(ebd_code='E_0460', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0461]
  EbdTableMetaData(ebd_code='E_0461', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0044_ORDRSP_Ablehnung der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0462]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0462', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0462 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist in der Anmeldung die Angabe der Identifikationslogik mit dem Wert „Marktlokations-ID“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde die im Geschäftsvorfall angegebene ID der Marktlokation im IT-System des Empfängers gefunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht identifizierbar.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note='Hinweis: Bei dieser Prüfung hat der NB auch die Marktlokationen zu berücksichtigen, die in den letzten drei Jahren vor dem Eingang der Anfrage im Netzgebiet des NB waren.')], use_cases=None), EbdTableRow(step_number='3', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil?\n(Dies sind Marktlokationen, bei welchen ein Bilanzkreis und ein Lieferant zugeordnet ist. Z.B. stillgelegte Marktlokationen oder Marktlokationen einer Kundenanlage, welche vom Kundenanlagenbetreiber beliefert werden und somit keine Zuordnung zu einem Lieferanten haben, nehmen nicht an der Marktkommunikation teil.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMarktlokation, die über Marktlokations-ID identifiziert wurde, nimmt nicht an der Marktkommunikation teil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt genau eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Nimmt die Marktlokation zum Anmeldedatum an der Marktkommunikation teil? \n(Dies sind Marktlokationen, bei welchen ein Bilanzkreis und ein Lieferant zugeordnet ist. Z.B. stillgelegte Marktlokationen oder Marktlokationen einer Kundenanlage, welche vom Kundenanlagenbetreiber beliefert werden und somit keine Zuordnung zu einem Lieferanten haben, nehmen nicht an der Marktkommunikation teil.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nIdentifizierte Marktlokation nimmt nicht an der Marktkommunikation teil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Wurde mit allen zur Verfügung gestellten Informationen aus der Anmeldung unter Wahrung der gebotenen Sorgfalt mehr als eine Marktlokation ermittelt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Handelt es sich um einen „Einzug in Neuanlage“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nKeine Identifizierung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die Anmeldung (der Neuanlage) vor mehr als 60 WT eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nNeuangelegte Marktlokation konnte nicht identifiziert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Nimmt von den identifizierten Marktlokationen exakt eine Marktlokation an der Marktkommunikation teil? \n(Die andere(n) Marktlokation(en) sind z.B. stillgelegte Marktlokation(en), Objekt(e) um einen Teil einer Kundenanlage.)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nMehrfachidentifizierung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Ist die Marktlokation zum Eingangsdatum der Meldung dem Netzgebiet zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMarktlokation befindet sich zum Eingangsdatum der Meldung nicht mehr im Netzgebiet des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um einen Ein-/Auszug (Umzug)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Handelt es sich um einen „Einzug in Neuanlage“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Liegt der Transaktionsgrund zur Beendigung einer Ersatz-versorgung vor?\nDies ist bei dem folgenden Transaktionsgrund der Fall:\nLieferbeginn und Abmeldung aus der Ersatzversorgung', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='18'), result_code=None, note='Hinweis: es liegt der Transaktionsgrund „Wechsel“ vor.')], use_cases=None), EbdTableRow(step_number='14', description='Sind bisheriger und neuer Anschlussnutzer identisch?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEs handelt sich nicht um einen Einzug, da zum genannten Datum kein Anschlussnutzerwechsel stattfand.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='15'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Handelt es sich um eine Marktlokation, deren Messlokationen vollständig mit iMS ausgestattet sind oder/und deren Prognosegrundlage auf Basis von Werten erfolgt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='17'), result_code=None, note=None)], use_cases=['Einzug']), EbdTableRow(step_number='16', description='Liegt das Lieferbeginndatum der Anmeldung mindestens einen Tag nach dem Eingangsdatum der Anmeldung?\nHinweis: Diese Prüfung enthält keine Aussage darüber, ob eine Verschiebung des Lieferbeginns notwendig ist.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nEingangsfrist bei iMS / kME mit RLM nicht ein-gehalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Einzug', 'iMS/kME mit RLM']), EbdTableRow(step_number='17', description='Liegt das Eingangsdatum der Anmeldung mehr als sechs Wochen nach dem Lieferbeginndatum der Anmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristüberschreitung bei kME ohne RLM/mME/ Pauschalanlage'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Einzug', 'kME ohne RLM/mME/ Pauschalanlage']), EbdTableRow(step_number='18', description='Ist in der Anmeldung die Angabe der Identifikationslogik mit dem Wert „Marktlokations-ID“ angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='19'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=['Lieferantenwechsel']), EbdTableRow(step_number='19', description='Liegt das Lieferbeginndatum der Anmeldung mindestens 7 WT nach dem Eingangsdatum der Anmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nFrist bei einem Lieferantenwechsel nicht ein-gehalten im Rahmen der schnellen Identifikation.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Lieferantenwechsel', 'schnelle Identifikation']), EbdTableRow(step_number='20', description='Liegt das Lieferbeginndatum der Anmeldung mindestens 10 WT nach dem Eingangsdatum der Anmeldung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nFrist bei einem Lieferantenwechsel nicht eingehalten im Rahmen der langsamen Identifikation.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None)], use_cases=['Lieferantenwechsel', 'langsame Identifikation']), EbdTableRow(step_number='21', description='Liegt für diese Marktlokation bereits eine gerade in Arbeit befindliche und noch nicht beantwortete Anmeldung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nAndere Anmeldung in Bearbeitung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Liegt die notwendige Zuordnungsermächtigung (Bilanzkreis/Bilanzierungsverfahren) vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nZuordnungsermächtigung fehlt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Liegt der Transaktionsgrund „Lieferbeginn und Abmeldung aus der Ersatzversorgung“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='EBD E_0402_Prüfen, ob eine Abmeldeanfrage erforderlich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Ist der zum Anmeldedatum zugeordnete LF der GV?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nGrundversorger ist der Marktlokation nicht zu-geordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='EBD E_0402_Prüfen, ob eine Abmeldeanfrage erforderlich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0464]
  EbdTableMetaData(ebd_code='E_0464', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0008_Antwort auf Änderung vom NB\nS_0010_Antwort auf Änderung vom NB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0465]
  EbdTableMetaData(ebd_code='E_0465', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0466]
  EbdTableMetaData(ebd_code='E_0466', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0467]
  EbdTableMetaData(ebd_code='E_0467', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0468]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0468', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0468 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde der Sperr- / Entsperrauftrag bereits durch den NB abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAuftrag wurde bereits abgelehnt und kann nicht mehr storniert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Handelt es sich um eine Stornierung eines Entsperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note='Hinweis: Es handelt sich um eine Stornierung eines Sperrauftrags.')], use_cases=None), EbdTableRow(step_number='3', description='Ist die Stornierung vor der Durchführung der Entsperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nEntsperrauftrag ist storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nStornierung des Entsperrauftrags nicht mehr möglich.')], use_cases=None), EbdTableRow(step_number='4', description='Ist der Nachrichteneingang der Stornierung spätestens am Tag vor dem geplanten Ausführungstermin bzw. fixen Sperrtermin aus dem Sperrauftrag eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nSperrauftrag ist bis zum Vortag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist die Stornierung vor der Durchführung der Sperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nSperrauftrag ist am Tag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nStornierung des Sperrauftrags nicht mehr möglich.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0470]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0470', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0470 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist bereits gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt für die Marktlokation im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin bereits ein Sperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nSperrauftrag für Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist im gesamten Ausführungszeitraum des Sperrauftrags (= frühestmöglicher Sperrtermin bis frühestmöglicher Sperrtermin + 6 WT) der die Sperrung beauftragende LF der zu sperrenden Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nZukünftiger bestätigter Lieferbeginn liegt gegenüber anderem Lieferanten bereits vor.\nDie Ausführungsfrist der 6 WT ab dem frühestmöglichen Sperrtermin berührt das bestätigte Lieferbeginndatum gegenüber anderem Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin an allen Messlokationen, welche der Marktlokation zugeordnet sind, der identische MSB zugeordnet, wie an der zu sperrenden Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nAn mindestens einer Messlokation ist ein anderer MSB zugeordnet als an der Marktlokation.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt die zu sperrende Marktlokation in der Niederspannung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation ist nicht in der Niederspannung.\nHinweis: Stromspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Sind weitere Marktlokationen von der Sperrung betroffen, für die dieser Sperrauftrag keine Wirkung entfalten darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMindestens eine weitere Marktlokation ist von der Sperrung betroffen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Liegt im gesamten Ausführungszeitraum ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nIm Ausführungszeitraum liegt bereits ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Ist der Sperrauftrag termingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Liegt der übermittelte Sperrtermin mindestens 12 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristverletzung bei einem termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Liegt der übermittelte frühestmögliche Sperrtermin mindestens 6 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nFristverletzung bei einem nicht termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Kann der Sperrauftrag pauschal über das elektronische Preisblatt abgebildet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nSperrung wird über das elektronische Preisblatt abgebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nDie individuellen Sperrkosten werden in der Nachricht ausgetauscht.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0472]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0472', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0472 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='War eine Sperrung aus rechtlichen Gründen nicht möglich (z.\xa0B. wenn eine Einstweilige Verfügung vorlag)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein rechtlicher Grund vor Ort erkannt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde der Anschlussnutzer angetroffen?\nHinweis: Es gab keine Anzeichen dafür, dass der Anschlussnutzer anwesend war.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Der Anschlussnutzer wurde nicht angetroffen. Es gab keine Anzeichen dafür, dass dieser anwesend war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='War eine Sperrung aus dem Grund „aktive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „aktive Zutrittsverweigerung“ ist zu verstehen, dass der Anschlussnutzer angetroffen wurde und dieser den Zugang z.B. durch Drohungen, physische Angriffe, versperren des Zugangs zur Trennstelle unterbunden hat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine aktive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='War eine Sperrung aus dem Grund „passive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „passiver Zutrittsverweigerung“ ist zu verstehen, dass eine Anwesenheit des Anschlussnutzers festgestellt wurde, dieser jedoch seine Anwesenheit verleugnet. (z.B. Anschlussnutzer wurden in der Wohnung gesichtet, öffnet aber die Tür nicht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine passive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='War eine Sperrung wegen eines Verhinderungsgrundes nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein Verhinderungsgrund vorlag.\nHinweis: Im Freitext muss der Verhinderungsgrund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='War eine Sperrung aus einem tatsächlichen Grund nicht möglich?\nUnter tatsächliche Gründe fallen z. B.\nMarktlokation vor Ort nicht identifizierbar\nZugang zur Marktlokation nicht möglich\nKundenwechsel an der Marktlokation festgestellt', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein tatsächlicher Grund vorlag.\nHinweis: Im Freitext muss der tatsächliche Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='War eine Sperrung aus einem technischen Grund nicht möglich (z. B. eine weitere Marktlokation wäre von der Sperrung betroffen gewesen)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein technischer Grund vorlag.\nHinweis: Im Freitext muss der technische Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: erfolgreich\nMarktlokation wurde gesperrt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0477]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0477', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0477 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist der Marktlokation zum Zeitpunkt der bestellten Änderung die Sondervertragskunden-KA zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Sondervertragskunden-KA gemäß § 2 Abs. 3 der Konzessionsabgabenverordnung, daher keine Änderung möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist die Marktlokation von der Konzessionsabgabe befreit?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Änderung nicht möglich, da Marktlokation von Konzessionsabgabe befreit.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der bestellte Zustand an der Marktlokation bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Der gewünschte Zustand ist bereits an der Marktlokation hinterlegt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Bestellt der LF für eine Marktlokation den Wechsel auf eine Schwachlast-Konzessionsabgabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Stammdatenänderung NB (verantwortlich) ausgehend\nHinweis: Der LF beauftragt den NB die Schwachlast-Konzessionsabgabe an der Marktlokation nicht mehr ab dem angegebenen Zeitpunkt abzurechnen. Es soll die reguläre Konzessionsabgabe abgerechnet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Möchte der NB die Bestellung der rückwirkenden Änderung der Konzessionsabgabe aufgrund rechtlicher Fristen ablehnen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Eine rückwirkende Änderung wird abgelehnt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Lässt die Gerätekonfiguration der Messlokationen der angefragten Marktlokation zum Umsetzungszeitpunkt die separate Erfassung der Energie in den Schwachlastzeiten zu, um die niedrige Konzessionsabgabe für diese Menge abrechnen zu können?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='An der Marktlokation kann die Energie in den Schwachlastzeiten nicht zum angefragten Zeitpunkt separat erfasst werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Stammdatenänderung NB (verantwortlich) ausgehend')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0487]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0487', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0487 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Marktlokation ist entsperrt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Bilaterale Klärung.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0488]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0488', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0488 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Hat der MSB die generelle Zustimmung zur Durchführung einer Entsperrung/Sperrung dem NB erteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nGenerelle Zustimmung des MSB für die Sperrung/Entsperrung liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegen dem MSB technische Gründe für eine Ablehnung der Sperrung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs liegt ein technischer Ablehnungsgrund vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist eine Mitwirkung des MSB bei Entsperrung/Sperrung vor Ort gewünscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung unter Mitwirkung des MSB zugestimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung durch NB zugestimmt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0497]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0497', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0497 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Wurde die Sperrung durch den UC "Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF" ausgelöst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation wurde nicht über den UC (Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF) gesperrt. \nHinweis: Die Entsperrung muss auf konventionellem Weg erfolgen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wäre eine Wiederinbetriebnahme aufgrund eines technischen Verhinderungsrundes (z.B. entspricht nicht den geltenden Rechtsvorschriften, behördlichen Verfügungen, den anerkannten Regeln der Technik, DIN VDE Normen, Technischen Anschlussbedingungen (TAB) oder den sonstigen besonderen Vorschriften des NB) nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nWiederinbetriebnahme wäre technisch nicht möglich\nHinweis:\nDie Marktlokation bzw. die dazugehörigen elektrischen Anlagen kann gemäß NAV und TAB nicht wieder in Betrieb genommen werden. Sie entspricht nicht der geltenden Rechtsvorschriften und behördlichen Verfügungen sowie den anerkannten Regeln der Technik, insbesondere DIN VDE Normen, den Technischen Anschlussbedingungen (TAB) und den sonstigen besonderen Vorschriften des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist zum Zeitpunkt des Nachrichteneingangs die Marktlokation bereits entsperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt bereits ein Entsperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEntsperrauftrag für die Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0499]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0499', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0499 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: erfolgreich\nMarktlokation ist entsperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation ist weiterhin gesperrt.\nHinweis: Die Gründe des Scheiterns sind zu übermitteln.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0501]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0501', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0501 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Teilt der NB (ggf. nach erfolgtem Clearing mit dem MSB) die Ansicht des MSB, dass keine Sperrung erfolgen darf/kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer Antwortgrund des MSB aus „E_0488_Anfrage prüfen“ muss dem LF mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Sperrauftrag durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0502]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0502', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0502 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde bereits zum identischen Abmeldedatum für die in diesem Geschäftsvorfall genannte Marktlokation die Lieferende-Meldung positiv bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nLieferende zum Abmeldedatum wurde bereits bestätigt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt der Transaktionsgrund Stilllegung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note='Hinweis: Es liegt einer der folgenden Transaktionsgründe vor:\nAbmeldung wg. fehl. Zuordnungsermächtigung aufgrund Deaktivierung vom BKV beim NB\nAbmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT')], use_cases=None), EbdTableRow(step_number='30', description='Ist die Prognosegrundlage der Marktlokation auf Basis von Werten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Profilen')], use_cases=None), EbdTableRow(step_number='40', description='Liegt das Lieferende-Datum mindestens einen 1 WT nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEine Stilllegung einer Marktlokation mit Prognosegrundlage auf Basis von Werten kann nicht in die Vergangenheit gemeldet werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nBei Marktlokation mit Prognosegrundlage auf Basis von Werten muss Bilanzierungsende und Lieferende identisch sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wird ein Datum „Bilanzierungsende“ in der Abmeldung mitgeteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Hat eine Bilanzierung stattgefunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nEs wurde kein Bilanzierungsende mitgeteilt, obwohl eine Bilanzierung stattgefunden hat.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Hat eine Bilanzierung stattgefunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nEs wurde ein Bilanzierungsende mitgeteilt, obwohl keine Bilanzierung stattgefunden hat'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde bereits ein Lieferende zu einem späteren Termin durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Ist das mitgeteilte Bilanzierungsende später als das zuvor mitgeteilte Bilanzierungsende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nBilanzierungsende ist später als das zuvor mitgeteilte Bilanzierungsende.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Ist das mitgeteilte Bilanzierungsende identisch zu dem zuvor mitgeteilten Bilanzierungsende?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die Anfrage nach dem 3. WT vor dem Monatsletzten eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist das Bilanzierungsende ≤ dem Ende des Folgemonats (erster Tag des übernächsten Monats 00:00 Uhr)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDas Bilanzierungsende liegt zu weit in der Zukunft. Das bisherige Bilanzierungsende muss angepasst werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Ist das Bilanzierungsende ≤ dem Ende des aktuellen Monats (erster Tag des Folgemonats 00:00 Uhr)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nBilanzierungsfrist bei Marktlokationen mit Prognosegrundlage auf Basis von Profilen nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Ist das Lieferendedatum ≤ dem Monatsersten des Folgemonats 00:00 Uhr, in welchem der Geschäftsvorfall eingegangen ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='160'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die Anfrage nach dem 3. WT vor dem Monatsletzten eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Ist als Bilanzierungsende das Ende des Folgemonats (erster Tag des übernächsten Monats 00:00 Uhr) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nDas Bilanzierungsende ist zum angegebenen Termin nicht mehr möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist als Bilanzierungsende das Ende des aktuellen Monats (erster Tag des Folgemonats 00:00 Uhr) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDas Bilanzierungsende ist nicht der erste Tag des Folgemonats 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='Ist als Bilanzierungsende das Ende des Monats angeben, in welchem das Lieferende liegt? (erster Tag des Folgemonats 00:00 Uhr des Monats in welchem das Lieferende liegt).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nDas Bilanzierungsende bei Lieferenden, welche in einem zukünftigen Monat liegen, muss zum Ablauf des gleichen Monats sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Liegen dem LF Informationen darüber vor, dass die Marktlokation nicht stillgelegt wird/wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDem LF liegen Informationen vor, dass die Marktlokation nicht stillgelegt wird/wurde.\nHinweis: Die Informationen sind in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None), EbdTableRow(step_number='210', description='Ist das Datum „Bilanzierungsende“ identisch mit dem Datum „Lieferende“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nLieferende und Bilanzierungsende müssen bei Lieferende von NB an LF aufgrund entfallender Zuordnungsermächtigung synchron sein.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Liegt das übermittelte Datum „Lieferende“ nach dem Nachrichteneingang?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nLieferende bei entfallender Zuordnungsermächtigung muss in der Zukunft liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Ist das angegebene Datum „Lieferende“ der nächste 1. eines Kalendermonats 00:00 Uhr?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDas Lieferende bei Abmeldung wegen Deaktivierung der Zuordnungsermächtigung muss auf dem 1. eines Kalendermonats liegen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='240', description='Liegt der Transaktionsgrund Abmeldung wegen fehl. Zuordnungsermächtigung aufgrund Änderung ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='250'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='260'), result_code=None, note='Hinweis: Es liegt der Transaktionsgrund „Abmeldung wg. fehl. Zuordnungsermächtigung“ aufgrund Deaktivierung vom BKV beim NB vor')], use_cases=None), EbdTableRow(step_number='250', description='Wurde der Zeitreihentyp an der betreffenden Marktlokation in einen Zeitreihentyp geändert, für welchen keine Zuordnungsermächtigung besteht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nEs liegt keine Änderung des Zeitreihentyps vor, für welchen keine Zuordnungsermächtigung besteht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='260'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='260', description='Hat der BKV die Deaktivierung der Zuordnungsermächtigung für den ZRT, welcher der genannten Marktlokation zugeordnet ist, vorgenommen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDeaktivierung der Zuordnungsermächtigung für den der Marktlokation zugeordneten ZRT hat nicht stattgefunden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Zustimmung\nLieferende wird zugestimmt')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0503]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0503', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0503 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nRechnung entspricht nicht §14 UstG.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist das Rechnungsdatum kleiner gleich dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Liegt ein Rechenfehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Handelt es sich um eine Forderung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='7'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note='Hinweis: Es handelt sich um eine Rückerstattung.')], use_cases=None), EbdTableRow(step_number='7', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010\xa0WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Ist die Frist der Fälligkeit überschritten?\nHinweis: Fälligkeit überschritten bedeutet: Zahlungsziel\xa0>\xa010\xa0WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='9'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von Blindarbeit oder Unterbrechung / Wiederherstellung der Anschlussnutzung.')], use_cases=None), EbdTableRow(step_number='10', description='Werden die Positionen mit dem korrekten Steuersatz abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nMindestens eine der Positionen ist mit dem falschen Steuersatz abgerechnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='11', description='Handelt es sich um eine Rechnung von „Unterbrechung/Wiederherstellung der Anschlussnutzung“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='34'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von „Blindarbeit“.')], use_cases=None), EbdTableRow(step_number='12', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='13', description='Hat der Lieferant einen Sperrauftrag mit der in der Rechnung vorhandenen Auftragsnummer des Sperrauftrags bestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDer abzurechnende Sperrauftrag ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='14', description='Wurde der Sperrauftrag bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde diese Rechnung zum Sperrauftrag wieder storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Sperrauftrag wurde bereits abgerechnet (doppelte Rechnung).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='16', description='Ist der identifizierte Sperrauftrag storniert und die Stornierung bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note='Hinweis: Der Sperrauftrag wurde nicht storniert oder die Stornierung erfolgte zu spät und wurde daher abgelehnt.')], use_cases=None), EbdTableRow(step_number='17', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-004] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung bis zum Vortag der Sperrung) oder Artikel-ID \n[2-01-7-005] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung am Tag der Sperrung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der Leistung für einen stornierten Auftrag zur Unterbrechung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='18', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis „Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung“ des Preisblatts bzw. Artikel-ID ist im Preisblatt nicht genannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='19', description='War die Sperrung aus dem Sperrauftrag erfolgreich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note='Hinweis: Sperrung war nicht erfolgreich.')], use_cases=None), EbdTableRow(step_number='20', description='Wurde von dem Lieferanten bereits die Wiederherstellung der Anschlussnutzung für die aus diesem Auftrag umgesetzte Unterbrechung der Anschlussnutzung beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='21'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='21', description='Wurde die Entsperrung vom Lieferanten mit der Option „Entsperrung auch außerhalb der regulären Arbeitszeit“ beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='22'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Werden in der Rechnung die beiden Artikel-IDs \n[2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='23', description='Wird in der Rechnung die Artikel-ID [2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und zusätzlich genau eine der beiden Artikel-ID \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) oder \n[2-01-7-006] (Wiederherstellung der Anschlussnutzung außerhalb der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='24'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='24', description='Entsprechen die Preise in der Rechnung den Preisen aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMindestens ein Preis in der Rechnung passt nicht zum Preis für eine Unterbrechung und Wiederherstellung der Anschlussnutzung auf dem Preisblatt bzw. mindestens eine Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='25', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-003] (Erfolglose Unterbrechung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der Leistung für eine erfolglose Unterbrechung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='26'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='26', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für eine erfolglose Unterbrechung auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die Verzugskosten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='28', description='Liegt dem Lieferanten die Rechnung vor, auf die sich die Verzugskostenrechnung bezieht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nDie Rechnung, auf die sich die Verzugskostenrechnung bezieht, ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='29'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='29', description='Wird in der Rechnung die Artikel-ID \n[2-02-0-001] (Verzugskosten pauschal) oder Artikel-ID \n[2-02-0-002] (Verzugskosten variabel) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der Leistung für Verzugskosten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Sind die Verzugskosten gerechtfertigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDie Verzugskosten sind nicht gerechtfertigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='31'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='31', description='Werden die Verzugskosten pauschal mit der \nArtikel-ID [2-02-0-001] (Verzugskosten pauschal) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='33'), result_code=None, note='Hinweis:\nDie Verzugskosten werden variabel mit der \nArtikel-ID [2-02-0-002] abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='32'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='32', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Verzugskosten auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='33', description='Entsprechen die geltend gemachten Verzugskosten den gesetzlichen Regelungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nPreis ist in der Höhe nicht angemessen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='34', description='Ist die Abrechnung der Blindarbeit zwischen Lieferanten und Netzbetreiber für diese Marktlokation für den abgerechneten Zeitraum vereinbart?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A24', note='Cluster: Ablehnung\nDie Abrechnung der Blindarbeit ist nicht mit dem Lieferanten vereinbart'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='35'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='35', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Blindarbeit“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die freiwillige Abrechnung sonstiger Leistungen vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='36'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='36', description='Ist der Empfänger der Rechnung für den genannten Abrechnungszeitraum der genannten Marktlokation mindestens einen Tag zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A26', note='Cluster: Ablehnung\nDer LF lehnt die Zahlung der Blindarbeitsrechnung ab. Der LF ist der Marktlokation nicht einen Tag des Abrechnungszeitraumes zugeordnet.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='37'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='37', description='Ist der Empfänger der Rechnung für den gesamten genannten Abrechnungszeitraum der genannten Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A32', note='Cluster: Ablehnung\nDer LF lehnt die Zahlung der Blindarbeitsrechnung ab. Eine Ablehnung der Zahlung wird durch den LF begründet.\nHinweis: Der LF gibt den erwarteten Abrechnungszeitraum an.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='38'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='38', description='Liegt das Rechnungsdatum vor dem Ende des Abrechnungszeitraumes?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A33', note='Cluster: Ablehnung \nDas Rechnungsdatum liegt vor dem Ende des Abrechnungszeitraumes.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='39'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='39', description='Ist in dem Rechnungszeitraum ein bereits abgerechnetes Zeitintervall enthalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A27', note='Cluster: Ablehnung\nDie Rechnung enthält einen bereits abgerechneten Zeitraum'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegen dem Lieferanten die relevanten Messwerte vom MSB vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A28', note='Cluster: Ablehnung\nDie relevanten Messwerte zur Rechnungsprüfung liegen nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='41'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='41', description='Wurde die vertraglich vereinbarte Menge Blindarbeit abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A29', note='Cluster: Ablehnung\nMenge der Blindarbeit ist nicht korrekt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='42'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='42', description='Wird in der Rechnung eine der folgenden Artikel-IDs abgerechnet?\n[3-01-0-001] (Blindarbeit)\n[3-02-0-001] (Blindarbeit 1)\n[3-02-0-002] (Blindarbeit 2)', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A30', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht keiner Artikel-ID für Blindarbeit'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='43'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='43', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A31', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Blindarbeit auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='44'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='44', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Zahlungsavis versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0504]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0504', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0504 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Unterbrechung der Anschlussnutzung (Sperren)“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='14'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='26'), result_code=None, note='Hinweis: Es handelt sich um ein Nicht-Zahlungsavis der Kategorie „Blindarbeit“')], use_cases=None), EbdTableRow(step_number='3', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Ein gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des an ihm versandten, für die Rechnung gültigen Preisblatts.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='5', description='Hat der Lieferant wegen unbekanntem Sperrauftrag abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Liegt ein bestätigter Sperrauftrag mit der angegebenen Referenz auf den Sperrauftrag des Lieferanten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Gültiger Sperrauftrag ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='7', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='8'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='11'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Hat der LF den Sperrauftrag storniert und wurde diese Stornierung vom NB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='9'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='9', description='Wurde die korrekte Artikel-ID entsprechend eines stornierten Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Korrekte Artikel-ID für die Abrechnung eines stornierten Sperrauftrags wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus der Stornierung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='10', description='Wurde die korrekte Artikel-ID entsprechend des Ergebnisses des Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Korrekte Artikel-ID wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus dem Ergebnis des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='11', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein, zum Preisblatt abweichender Preis angegeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='12'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='13'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='12', description='Wurde in der Rechnung der im Preisblatt angegebene Preis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Korrekter Preis zum gültigen Preisblatt wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='13', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='14', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='15'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='16'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='15', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='16', description='Hat der Lieferant wegen unbekannter Rechnung, auf die sich die Verzugskostenrechnung bezieht, abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='17'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='19'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='17', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, dem Lieferanten zugestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='18'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='18', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Gültige Rechnung ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung der Rechnung, auf die sich die Verzugskostenrechnung bezieht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='19', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='21'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde genau eine der beiden Artikel-ID für Verzugskosten in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Es wurde für die Verzugskosten eine der beiden Artikel-ID verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='21', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein zum Preisblatt abweichender Preis angeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='22'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='25'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='22', description='Wurde in der Rechnung die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='23'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='24'), result_code=None, note='Hinweis: Es wurde die Artikel-ID 2-02-0-002 (Verzugskosten variabel) angegeben')], use_cases=None), EbdTableRow(step_number='23', description='Ist der angegeben Preis in der Rechnung identisch mit dem Preis für die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Korrekter Preis wurde in der Rechnung abgerechnet\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='24', description='Ist der Preis, der in der Rechnung für die Artikel-ID 2-02-0-002 (Verzugskosten variabel) in Rechnung gestellt wurde für die der Verzugsrechnung zugrundeliegende, nicht bezahlte Rechnung angemessen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='25', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='26', description='Hat der Lieferant wegen fehlendem Preisblatt „Blindarbeit“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='27'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='28'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='27', description='Wurde dem Lieferanten ein, für die Rechnung gültiges, Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Gültiges Preisblatt für Blindarbeit wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='28', description='Hat der Lieferant die Rechnung wegen einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='29'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='29', description='Wurde die korrekte Artikel-ID für Blindarbeit in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A13', note='Korrekte Artikel-ID wurde in der Rechnung angegeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='30', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0505]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0505', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0505 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der Rechnungssteller den Einwand des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Rechnungsempfänger ist nach erneuter Prüfung immer noch der Ansicht, dass das Nichtzahlungsavis gerechtfertigt ist. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegen weitere Fehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Rechnung wird aufgrund noch nicht gemeldeter Fehler weiterhin abgelehnt.\nHinweis: Die Fehler sind in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Rechnung zustimmen und im Zahlungsavis berücksichtigen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0506]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0506', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0506 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='5'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='5', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='6'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='6', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='7'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='7', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='8'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='8', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0510]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0510', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0510 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ging innerhalb der Antwortfrist eine Ablehnung des Lieferanten ein?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAblehnung der Abmeldung durch den Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nBestätigung der Anmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0511]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0511', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0511 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0512]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0512', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0512 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nBestätigung der Abmeldung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0513]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0513', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0513 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Ist ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024, 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='E_0514_Beendigung der Zuordnung prüfen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0514]
  EbdTableMetaData(ebd_code='E_0514', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0515]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0515', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0515 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein gültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet?'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0516]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0516', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0516 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0517]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0517', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0517 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet?'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0518]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0518', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0518 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0519]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0519', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0519 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet?'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.'), MultiStepInstruction(first_step_number_affected='510', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit dem Prüfschritt 510 für jede Summenzeile durchgeführt. Tritt in einer Summenzeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Summenteil gefundenen Fehler werden mit den entsprechenden Ablehnungscodes dem MSB als Ergebnis übermittelt. Folgende Prüfungen sind je Kombination aus Steuersatz und Steuerkategorie durchzuführen.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0520]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0520', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0520 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Rechnungsempfänger gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Die Rechnung wird als korrekt angesehen.\nHinweis: Es ist zu begründen, warum die Rechnung korrekt ist. \nNutzungsmöglichkeit Ende: offen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0521]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0521', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0521 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Konnte der MSB alle Einwände des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A25', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung der Rechnung weiterhin ab, da der MSB nicht alle Einwände des Rechnungsempfängers entkräften konnte. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='10'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='10', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung auf Kopfebene\nRechnung entspricht nicht §14 UstG'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist das Rechnungsdatum ≤ dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung auf Kopfebene\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum < dem Ausführungsdatum/Leistungszeitraum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung auf Kopfebene\nDas Rechnungsdatum liegt vor dem Ausführungsdatum/Leistungszeitraum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Basiert die Rechnung auf einer Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Rechnung auf keiner Bestellung basiert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt vom Rechnungssteller, die in dieser Rechnung verwendete Rechnungsnummer, bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung auf Kopfebene\nRechnungsnummer wurde bereits verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der fällige Betrag ≥ Null?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung auf Kopfebene\nBei der Abrechnung des MSB kann es nicht zu einer Rückerstattung kommen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung auf Kopfebene\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt für jeden Zeitpunkt des abgerechneten Ausführungsdatums/Leistungszeitraums ein\ngültiges Preisblatt „Preisblatt Konfigurationen“ vor?\n\nHinweis: Es können mehrere aufeinanderfolgende\nPreisblätter für einen Abrechnungszeitraum vorliegen.\nDas Preisblatt A des MSB heißt in der PRICAT Preisblatt Konfigurationen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung auf Kopfebene\nDer Rechnungsempfänger lehnt die Zahlung ab. Es liegt kein gültiges Preisblatt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler im Kopfteil der Rechnung aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A90', note='Cluster: Ablehnung auf Kopfebene\nSonstiger Fehler auf Kopfebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Wurde in der Rechnungsposition die Artikel-ID aus der Bestellung verwendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code='A09', note='Cluster: Ablehnung auf Positionsebene\n\nEs wurde in der Rechnungsposition nicht die Artikel-ID aus der Bestellung verwendet?'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Wurde die abzurechnende Leistung vom MSB durchgeführt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='320'), result_code='A10', note='Cluster: Ablehnung auf Positionsebene\nDer Rechnungsempfänger lehnt die Zahlung ab, da die Leistung nicht erfolgreich vom MSB durchgeführt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnungsposition dem Preis aus dem Preisblatt das zum Zeitpunkt des Ausführungsdatums/zum Abrechnungszeitraum der Leistung gültig ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code='A11', note='Cluster: Ablehnung auf Positionsebene\nDer Preis in der Rechnungsposition entspricht nicht dem Preis aus dem Preisblatt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Wird für die Rechnungsposition der für diesen Zeitpunkt/Zeitraum korrekte gültige Umsatzsteuersatz angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='340'), result_code='A12', note='Cluster: Ablehnung auf Positionsebene\nDer gültige Umsatzsteuersatz für die Rechnungsposition für diesen Zeitpunkt/Zeitraum wurde nicht korrekt angegeben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='350'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='350', description='Liegt der Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition innerhalb des angegebenen Leistungszeitraums der Kopfebene?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='360'), result_code='A13', note='Cluster: Ablehnung auf Positionsebene\nDer Leistungszeitraum bzw. das Ausführungsdatum der Rechnungsposition ist nicht identisch mit dem Leistungszeitraum aus dem Kopfteil.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='360'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='360', description='Existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='370'), result_code='A14', note='Cluster: Ablehnung auf Positionsebene\nEs existiert in dieser Rechnung eine weitere Rechnungsposition mit identischer Artikel-ID und identischem oder überschneidendem Leistungszeitraum bzw. identischem Ausführungsdatum.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='370'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='370', description='Wurde die Artikel-ID bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='420'), result_code='A15', note='Cluster: Ablehnung auf Positionsebene\nDie Artikel-ID wurde bereits in einer vorherigen nicht stornierten Rechnung für den identischen Leistungszeitraum bzw. identischem Ausführungsdatum bereits abgerechnet.\nHinweis: Rechnungsnummer ist anzugeben'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='420'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='420', description='Liegt ein Rechenfehler in der Rechnungsposition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='430'), result_code='A20', note='Cluster: Ablehnung auf Positionsebene\nRechenfehler liegt vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='430'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='430', description='Ist in der Rechnungsposition ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code='A99', note='Cluster: Ablehnung auf Positionsebene \nSonstiger Fehler auf Positionsebene.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. Nutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Sind noch weitere Rechnungspositionen zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='450'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='450', description='Ist in mindestens einer Rechnungspositionen ein Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: Alle erkannten Antwortcodes aus der Positionsebene sind für jeden fehlerhaft identifizierten Positionsteil unter Angabe der Positionsnummer zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='500'), result_code=None, note='Die Prüfung des EBD wird im Summenteil fortgesetzt.')], use_cases=None), EbdTableRow(step_number='500', description='Fehlen noch Positionen, die über das bestätigte Angebot vereinbart sind und somit in der Rechnung erwartet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code='A21', note='Cluster: Ablehnung auf Summenebene\nErwartete Position nicht vorhanden\nHinweis: Die nicht enthaltenen Positionen aus dem Angebot sind unter Angabe der Positionsnummer aus dem bestätigten Angebot zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='510'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='510', description='Entspricht für den genannten Steuersatz die Besteuerungsgrundlage der Summen der Einzelpositionen dieser Rechnung mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='520'), result_code='A22', note='Cluster: Ablehnung auf Summenebene\nGenannter Steuersatz passt nicht zu der Summe\nder Einzelpositionen des Steuersatzes.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='520'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='520', description='Entspricht für diesen Steuersatz die Angabe des Steuerbetrages der Summe aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='530'), result_code='A23', note='Cluster: Ablehnung auf Summenebene \nSumme aller Rechnungspositionen (Netto) dieser Rechnung, denen dieser Steuersatz zugeordnet ist, multipliziert mit diesem Steuersatz entspricht nicht der Angabe des Steuerbetrages für diesen Steuersatz.\nHinweis: Es ist der Steuersatz (aus DE5278) und die Steuerkategorie (aus DE5305) des SG52 TAX zu nennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='530'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='530', description='Sind noch weitere Steuersätze zu prüfen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='510'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='540'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='540', description='Entspricht der Rechnungsbetrag der Summe aller Rechnungspositionen (Besteuerungsgrundlage) zzgl. dem jeweiligen Steuerbetrag?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='550'), result_code='A24', note='Cluster: Ablehnung auf Summenebene\nRechnungsbetrag (Besteuerungsgrundlage inklusive Steuerbetrag) der Summe ist nicht korrekt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='550'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='550', description='Ist ein zuvor nicht spezifizierter Fehler im Summenteil aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='560'), result_code='A96', note='Cluster: Ablehnung auf Summenebene\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='560'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='560', description='Ist mindestens ein Fehler in der Summenebene aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Cluster: Ablehnung auf Summenebene\nHinweis: Alle erkannten Antwortcodes aus der Summenebene sind zu übermitteln.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Cluster: Zustimmung \nZahlung der Rechnung avisieren und im Zahlungslauf berücksichtigen.')], use_cases=None)], multi_step_instructions=[MultiStepInstruction(first_step_number_affected='300', instruction_text='Die nachfolgenden Prüfungen werden, beginnend mit der ersten Positionszeile, für jede Positionszeile durchgeführt. Tritt in einer Positionszeile der erste Fehler auf, so sind die weiteren Prüfungen, so dies noch möglich ist, auch durchzuführen. Alle im Positionsteil gefundenen Fehler sind, unter Nennung der jeweiligen Positionszeile, zu nennen.'), MultiStepInstruction(first_step_number_affected='500', instruction_text='Die nachfolgende Prüfung erfolgt auf Summenebene des EBD, obwohl es sich um eine summarische Prüfung der Positionsebene handelt, da bei fehlenden Positionsnummer aus dem bestätigten Angebot keine Positionsnummer genannt werden kann, muss zur Übermittlung des Fehlers die REMADV Struktur zur Übermittlung von Fehlern auf Summenebene genutzt werden.')])
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0522]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0522', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0522 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\n\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0523]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0523', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0523 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um eine kostenpflichtige Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nKostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt sich um eine Bestellung einer Konfiguration einer Änderung des Bilanzierungsverfahrens (Prognosegrundlage)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung einer Konfiguration einer Zählzeitdefinition', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note='Hinweis: Es handelt sich um eine Bestellung einer anderen Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“ oder um eine Marktlokation, bei der alle Messlokationen mit einem Zähler des Typs Lastgangzähler ausgestattet sind?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nMarktlokation befindet sich nicht in der messtechnischen Einordnung „iMS“ oder es handelt sich nicht um eine Marktlokation, bei der alle Messlokationen mit einem Zähler des Typs Lastgangzähler ausgestattet sind.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entspricht der geplante Termin zur Änderung der Prognosegrundlage den Prozessfristvorgaben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nErzeugende Marktlokationen mit iMS oder kME/ RLM werden immer auf der Prognosegrundlage auf Basis von Werten bilanziert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt eine Zuordnungsermächtigung für den sich aus der gewünschten Prognosegrundlage ergebenden ZRT vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nZuordnungsermächtigung liegt nicht vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die gewünschte Prognosegrundlage auf Basis von Profilen angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis: Prognosegrundlage auf Basis von Werten liegt vor.')], use_cases=None), EbdTableRow(step_number='90', description='Befindet sich die Marktlokation in einem Lokationsbündel, in welchem ebenfalls eine erzeugende Marktlokation vorhanden ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Entspricht die erzeugte Energiemenge der Marktlokation der gemessenen Energiemenge in der Flussrichtung Erzeugung an der Messlokation der Netzübergabe?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKeine Volleinspeisung, keine Prognosegrundlage auf Basis von Profilen möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich um eine Marktlokation mit der messtechnischen Einordnung „iMS“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Besteht für die Marktlokation ein Wahlrecht zur Änderung der Prognosegrundlage durch den LF?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nKein Wahlrecht der Prognosegrundlage für die Marktlokation'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Ist die gewünschte Prognosegrundlage zum gewünschten Termin bereits umgesetzt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nÄnderung zum gewünschten Termin bereits umgesetzt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nBestellung an den MSB am Objekt Marktlokation weitergeleitet')], use_cases=None), EbdTableRow(step_number='140', description='Handelt es sich bei der Marktlokation um eine verbrauchende Marktlokation?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nBestellungen sind nur für verbrauchende Marktlokationen möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Handelt es sich bei der Bestellung um eine Rückkehr auf eine Eintariflogik?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die gewünschte Zählzeit zum Anwendungszeitpunkt Bestandteil der Übersicht der Zählzeitdefinition, welche zuvor vom NB übermittelt wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung \nZählzeitdefinition zum Anwendungszeitpunkt nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Ist die in der Bestellung genannte Zählzeit in der Übersicht der Zählzeitdefinition des NB als eine bestellbare Zählzeit gekennzeichnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung \nZählzeit ist nicht bestallbar'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Liegt zum Anwendungszeitpunkt die ausgerollte Zählzeit zur Zählzeitdefinition vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung \nAusgerollte Zählzeit zur Zählzeitdefinition liegt zum Anwendungszeitpunkt nicht vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='Ist der bestellte Zustand bereits vorhanden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nBestellter Zustand bereits vorhanden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist die gewünschte Konfiguration grundsätzlich möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung \nKonfiguration technisch nicht möglich\nHinweis: z.\xa0B. Zählzeit bestellt und Eintarifzähler verbaut')], use_cases=None), EbdTableRow(step_number='210', description='Wurde die Vorlauffristen zu der geplanten Änderung der Gerätekonfiguration eingehalten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung \nFristüberschreitung')], use_cases=None), EbdTableRow(step_number='220', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung \nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Zustimmung\nBestellung wird an den MSB der Marktlokation weitergeleitet')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0524]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0524', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0524 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Die bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Konfiguration, welche im Preisblatt A des MSB aufgeführt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Nicht kostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Anfragenden an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Es besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Sind die in der Anfrage enthaltenen Artikel auch im Preisblatt des MSB zum angefragten Zeitpunkt gültig', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Es ist mindestens ein Artikel in der Anfrage, welcher vom MSB nicht angeboten wird'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der MSB bei allen betroffenen Lokationen aktiver MSB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Der MSB ist nicht an allen Lokationen der zugeordnete MSB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note='Angebot erstellen')], use_cases=None), EbdTableRow(step_number='70', description='Ist die bestellte Konfiguration an der betroffenen Lokation möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Konfiguration ist an der betroffenen Lokation nicht möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Wurden die Vorlauffristen eingehalten?\n\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Die Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0525]
  EbdTableMetaData(ebd_code='E_0525', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es wird kein EBD benötigt')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0526]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0526', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0526 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Bestellung einer kostenfreien Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note='Hinweis: \nEs handelt sich um eine kostenpflichtige Konfiguration')], use_cases=None), EbdTableRow(step_number='25', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Besteller an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Angebot noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nAngebot ist nicht mehr gültig\n(z.B. Angebot ist zu alt, Preise haben sich in der Zwischenzeit geändert)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um die Konfiguration einer Zählzeitdefinition, Schaltzeitdefinition oder Leistungskurvendefinition, welche dem MSB zum bestellten Zeitpunkt nicht bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nBestellte Konfiguration ist dem MSB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0527]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0527', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0527 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die Bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0528]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0528', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0528 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0529]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0529', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0529 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0530]
  EbdTableMetaData(ebd_code='E_0530', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Kein EBD erforderlich')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0531]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0531', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0531 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Konfiguration, welche im Preisblatt A des MSB aufgeführt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nNicht kostenpflichtige Konfiguration'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine kostenpflichtige Konfiguration vom Anfragenden an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in dieser Bestellung die Bestellnummer der Bestellung enthalten, mit der die bestehende kostenpflichtige Konfiguration bestellt wurde?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Bestellung ist die Bestellnummer zur bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Sind die in der Anfrage enthaltenen Artikel auch im Preisblatt des MSB zum angefragten Zeitpunkt gültig', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEs ist mindestens ein Artikel in der Anfrage, welcher vom MSB nicht angeboten wird'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist der MSB bei allen betroffenen Lokationen aktiver MSB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDer MSB ist nicht an allen Lokationen der zugeordnete MSB'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note='Angebot erstellen')], use_cases=None), EbdTableRow(step_number='70', description='Ist die bestellte Konfiguration an der betroffenen Lokation möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nKonfiguration ist an der betroffenen Lokation nicht möglich'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='75'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='75', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Angebot versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0532]
  EbdTableMetaData(ebd_code='E_0532', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es wird kein EBD benötigt')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0533]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0533', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0533 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Liegt die bestellte Konfiguration zum bestellten Zeitpunkt an der / bzw. allen Lokationen bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie bestellte Konfiguration liegt bereits vor'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Bestellung einer kostenfreien Konfiguration?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='25'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note='Hinweis: \nEs handelt sich um eine kostenpflichtige Konfiguration')], use_cases=None), EbdTableRow(step_number='25', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegt bereits eine Konfiguration vom Besteller an der betroffenen Lokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist in der Anfrage zum Angebot die Referenz der Bestellung der bestehenden Konfiguration enthalten?\nHinweis:\nWenn bereits an der betreffenden Lokation eine Konfiguration von dem Anfragenden besteht, muss diese Konfiguration beendet werden. Aus diesem Grund gibt der Anfragende die Referenz der bislang geltenden Konfiguration an, da zu einem Zeitpunkt immer nur eine Konfiguration vorhanden sein kann.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs besteht an der Lokation bereits eine Konfiguration. In der Anfrage ist die Referenz der bestehenden Konfiguration nicht enthalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist das Angebot noch gültig?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nAngebot ist nicht mehr gültig\n(z.B. Angebot ist zu alt, Preise haben sich in der Zwischenzeit geändert)'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Erlaubt die vorhandene Gerätetechnik die Konfiguration zum bestellten Zeitpunkt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDie vorhandene Gerätetechnik erlaubt die Konfiguration zum bestellten Zeitpunkt nicht.\nHinweis:\nWenn die Gerätetechnik eine detailliertere Auflösung als die bestellten Werte bereitstellt, kann diese nicht abgelehnt werden. \nBeispiel: Messung bietet Lastgang 1/4h Auflösung. Geforderte Werte sind kumulierte Werte.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Handelt es sich um die Konfiguration einer Zählzeitdefinition, Schaltzeitdefinition oder Leistungskurvendefinition, welche dem MSB zum bestellten Zeitpunkt nicht bekannt ist?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nBestellte Konfiguration ist dem MSB nicht bekannt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Zustimmung\nDie Einrichtung der Konfiguration ist grundsätzlich möglich')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0534]
  EbdTableMetaData(ebd_code='E_0534', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='MSB (weitere) nicht weiß, ob der NB oder der LF bestellt hat, wird hier das EBD E_0527 verwendet.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0535]
  EbdTableMetaData(ebd_code='E_0535', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0528 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0536]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0536', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0536 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte die Konfiguration an allen Lokationen umgesetzt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDie Konfiguration konnte nicht an allen Lokationen umgesetzt werden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Zustimmung\nKonfiguration konnte an allen Lokationen umgesetzt werden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0537]
  EbdTableMetaData(ebd_code='E_0537', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Kein EBD erforderlich')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0538]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0538', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0538 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0539]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0539', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0539 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0540]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0540', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0540 Dummy Name', remark=None), rows=[EbdTableRow(step_number='15', description='Wurden die Vorlauffristen eingehalten?\nHinweis: Es ist die maximale und die minimale Vorlauffrist zu prüfen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nDie Vorlauffrist wurde nicht eingehalten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine kostenpflichtige Bestellung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Handelt es sich um eine Bestellung, die beendet werden kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEs handelt sich um eine Bestellung, die nicht beendet werden kann.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nBestätigung der Beendigung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0541]
  EbdTableMetaData(ebd_code='E_0541', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0542]
  EbdTableMetaData(ebd_code='E_0542', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0543]
  EbdTableMetaData(ebd_code='E_0543', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0539 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0544]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0544', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0544 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\n\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrigierte Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0545]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0545', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0545 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\n\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrigierte Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0546]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0546', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0546 Dummy Name', remark=None), rows=[EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Absender eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0547]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0547', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0547 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende eine fehlende Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die Übersicht der Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Übersicht der Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='30', description='Reklamiert der Anfragende eine fehlende Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die Übersicht der Schaltzeitdefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Übersicht der Schaltzeitdefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine fehlende Übersicht der Leistungskurvendefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde die Übersicht der Leistungskurvendefinitionen an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Übersicht der Leistungskurvendefinitionen wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende eine unplausible Übersicht der Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die versendete Übersicht der Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Übersicht der Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Zählzeitdefinition versenden')], use_cases=None), EbdTableRow(step_number='90', description='Reklamiert der Anfragende eine unplausible Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note='Hinweis:\nDer Anfragende reklamiert eine unplausible Übersicht der Leistungskurvendefinitionen')], use_cases=None), EbdTableRow(step_number='100', description='Ist die versendete Übersicht der Schaltzeitdefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Übersicht der Schaltzeitdefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Schaltzeitdefinitionen versenden')], use_cases=None), EbdTableRow(step_number='110', description='Ist die versendete Übersicht der Leistungskurvendefinitionen plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Übersicht der Leistungskurvendefinitionen ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übersicht der Leistungskurvendefinitionen versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0548]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0548', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0548 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeit einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeit wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeit bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeit mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der LF das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den LF versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der LF eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der LF das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den LF versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der LF eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0549]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0549', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0549 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeit einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeit wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeit bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeit mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der MSB eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nEs ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Leistungskurvendefinition mit einer höheren Version versendet\nEs ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0550]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0550', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0550 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Reklamiert der Absender das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Reklamiert der Anfragende eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Zählzeit mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0551]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0551', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_0551 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Reklamiert der Anfragende das Fehlen der ausgerollten Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht der Code der Zählzeit einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Zählzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Code der Zählzeit wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Wurde die ausgerollte Zählzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Ausgerollte Zählzeitdefinition wurde versendet \nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Reklamiert der Anfragende eine unplausible ausgerollte Zählzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wurde mit dem Code der Zählzeit bereits eine ausgerollte Zählzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Es wurde bereits eine ausgerollte Zählzeitdefinition für den Code der Zählzeit mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist die versendete ausgerollte Zählzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Ausgerollte Zählzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Reklamiert der Anfragende das Fehlen der ausgerollten Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Entspricht der Code der Schaltzeitdefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Schaltzeitdefinitionen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Code der Schaltzeitdefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die ausgerollte Schaltzeitdefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Ausgerollte Schaltzeitdefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Reklamiert der Anfragende eine unplausible ausgerollte Schaltzeitdefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Wurde mit dem Code der Schaltzeitdefinition bereits eine ausgerollte Schaltzeitdefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A07', note='Es wurde bereits eine ausgerollte Schaltzeitdefinition für den Code der Schaltzeitdefinition mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist die versendete ausgerollte Schaltzeitdefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Ausgerollte Schaltzeitdefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Reklamiert der Anfragende das Fehlen der ausgerollten Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Entspricht der Code der Leistungskurvendefinition einem Code aus der für den reklamierten Zeitraum gültigen Übersicht der Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Code der Leistungskurvendefinition wird nicht verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde die ausgerollte Leistungskurvendefinition an den Anfragenden versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Ausgerollte Leistungskurvendefinition wurde versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Reklamiert der Anfragende eine unplausible ausgerollte Leistungskurvendefinition?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde mit dem Code der Leistungskurvendefinition bereits eine ausgerollte Leistungskurvendefinition mit einer höheren Version versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A11', note='Es wurde bereits eine ausgerollte Leistungskurvendefinition für den Code der Zählzeit mit einer höheren Version versendet\nHinweis: Es ist als Referenz der Geschäftsvorfall zu benennen, mit welchem die Übersicht der Definition übermittelt wurde'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Ist die versendete ausgerollte Leistungskurvendefinition plausibel?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Ausgerollte Leistungskurvendefinition ist plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='200'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Korrektur der Definition und die erneute Übermittlung durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0552]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0552', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0552 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration.')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden.\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note='.')], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden. \nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0553]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0553', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0553 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden.\nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0554]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0554', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_0554 Dummy Name', remark=None), rows=[EbdTableRow(step_number='20', description='Ist der Wirkungszeitraum bereits eingetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nWirkungszeitraum noch nicht eingetreten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist die Reklamation der Konfiguration berechtigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nReklamation unbegründet. Bestellte Konfiguration ist eingerichtet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note='Es gibt eine Abweichung zwischen bestellter und eingerichteter Konfiguration')], use_cases=None), EbdTableRow(step_number='40', description='Kann die Konfiguration korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nKonfiguration kann trotz Bestellung nicht vorgenommen werden \nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Kann die Konfiguration sofort korrigiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nKonfiguration wurde sofort angepasst'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Zustimmung\nKonfiguration konnte nicht sofort korrigiert werden.\nHinweis: Geplanter Behebungszeitpunkt muss angegeben werden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0555]
  EbdTableMetaData(ebd_code='E_0555', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0019_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0556]
  EbdTableMetaData(ebd_code='E_0556', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='S_0020_Antwort auf Änderung vom MSB')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0558]
  EbdTableMetaData(ebd_code='E_0558', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0556 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0560]
  EbdTableMetaData(ebd_code='E_0560', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0555 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0561]
  EbdTableMetaData(ebd_code='E_0561', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Es ist das EBD E_0556 zu nutzen.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0800]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0800', chapter='Dummy Chapter', section='Dummy Section', role='ÜNB', ebd_name='E_0800 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegen zwischen dem Eingangsdatum der Nachricht und dem Monatsletzten des Monats, in dem der angefragte Bilanzierungszeitraum endet, mindestens 30 Werktage?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Fristunterschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Liegt die Aggregationsverantwortung im angefragten Zeitraum komplett beim ÜNB?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Aggregationsverantwortung liegt nicht oder nur zeitweise beim ÜNB.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Wird die Marktlokation im angefragten Zeitraum komplett auf Basis von Profilen bilanziert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Marktlokation wird nicht auf Basis von Profilen bilanziert.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Bilanzierte Menge versenden')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0801]
  EbdTableMetaData(ebd_code='E_0801', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='GS_002_MehrMinderMengen-Rechnung prüfen\nGS_004_Ablehnung der Stornorechnung (aus Prozessschritt 5 MMMA NB an LF)\nGS_005_Ablehnung der Stornorechnung (aus Prozessschritt 7 MMMA NB an LF)')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0802]
  EbdTableMetaData(ebd_code='E_0802', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='G_0080_aggregierte Menge und Abrechnungszeitraum prüfen\nG_0088_Ablehnung der Stornorechnung (MMMA NB an MGV)')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0803]
  EbdTableMetaData(ebd_code='E_0803', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='G_0001_ORDRSP Abl. der Anforderung')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0900]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0900', chapter='Dummy Chapter', section='Dummy Section', role='BTR', ebd_name='E_0900 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entsprechen die Energiemengen der Ausfallarbeitszeitreihe den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Zustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Übermittlung Gegenvorschlag')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0901]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0901', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0901 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die Ausfallarbeitszeitreihe bereits eine Zustimmung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAusfallarbeitszeitreihe wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Gegenvorschlag zur Ausfallarbeitszeitreihe innerhalb der vorgegebenen Frist eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt bereits ein Gegenvorschlag zur Ausfallarbeitszeitreihe vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nGegenvorschlag liegt bereits vor\nHinweis: Ein weiterer Gegenvorschlag kann nicht eingereicht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Können die Energiemengen des Gegenvorschlages zur Ausfallarbeitszeitreihe akzeptiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0902]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0902', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_0902 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Entsprechen die Energiemengen der Ausfallarbeitszeitreihe bzw. der Fahrplananteilzeitreihe den erwarteten Energiemengen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nZustimmung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Kann ein Gegenvorschlag erstellt werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel\nÜbermittlung Gegenvorschlag\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel inkl. Korrekturanforderung\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben / benennen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0903]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_0903', chapter='Dummy Chapter', section='Dummy Section', role='BTR', ebd_name='E_0903 Dummy Name', remark=None), rows=[EbdTableRow(step_number='1', description='Liegt für die Ausfallarbeitszeitreihe bereits eine Zustimmung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nAusfallarbeitszeitreihe wurde bereits bestätigt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='2'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='2', description='Ist der Gegenvorschlag zur Ausfallarbeitszeitreihe innerhalb der vorgegebenen Frist eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nFristüberschreitung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='3'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='3', description='Liegt bereits ein Gegenvorschlag zur Ausfallarbeitszeitreihe vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nGegenvorschlag liegt bereits vor\nHinweis: Ein weiterer Gegenvorschlag kann nicht eingereicht werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='4'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='4', description='Können die Energiemengen des Gegenvorschlages zur Ausfallarbeitszeitreihe akzeptiert werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEnergiemengen falsch / nicht plausibel'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_0904]
  EbdTableMetaData(ebd_code='E_0904', chapter='Dummy Chapter', section='Dummy Section', role='Dummy', ebd_name='Dummy Ebd Name', remark='Derzeit ist für diese Entscheidung kein Entscheidungsbaum notwendig, da keine Antwort gegeben wird.')
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1000]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1000', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1000 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist bereits gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt für die Marktlokation im Zeitraum von 6 WT ab dem frühestmöglichen Sperrtermin bereits ein Sperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nSperrauftrag für Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist im gesamten Ausführungszeitraum des Sperrauftrags \n(= frühestmöglicher Sperrtermin bis frühestmöglicher Sperrtermin + 6 WT) der die Sperrung beauftragende LF der zu sperrenden Marktlokation zugeordnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nZukünftiger bestätigter Lieferbeginn liegt gegenüber anderem Lieferanten bereits vor.\nDie Ausführungsfrist der 6 WT ab dem frühestmöglichen Sperrtermin berührt das bestätigte Lieferbeginndatum gegenüber anderem Lieferanten.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt an der zu sperrenden Marktlokation eine 1:1-Beziehung zwischen Marktlokation und Messlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nKeine 1:1-Beziehung zwischen Marktlokation und Messlokation.\nHinweis: Gasspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Wird die zu sperrende Marktlokation auf Basis von Grund- und Arbeitspreis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nMarktlokation wird nicht auf Basis von Grund- und Arbeitspreis abgerechnet.\nHinweis: Gasspezifische Frage'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Sind weitere Marktlokationen von der Sperrung betroffen, für die dieser Sperrauftrag keine Wirkung entfalten darf?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nMindestens eine weitere Marktlokation ist von der Sperrung betroffen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Liegt im gesamten Ausführungszeitraum ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nIm Ausführungszeitraum liegt bereits ein bestätigter Lieferbeginn gegenüber dem beauftragenden LF vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Ist der Sperrauftrag termingebunden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='100'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='100', description='Liegt der übermittelte Sperrtermin mindestens 12 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nFristverletzung bei einem termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Liegt der übermittelte frühestmögliche Sperrtermin mindestens 6 WT nach dem Eingangsdatum der Nachricht des Sperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nFristverletzung bei einem nicht termingebundenen Sperrauftrag.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der \nAntwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Kann der Sperrauftrag pauschal über das elektronische Preisblatt abgebildet werden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Cluster: Zustimmung\nSperrung wird über das elektronische Preisblatt abgebildet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Zustimmung\nDie individuellen Sperrkosten werden in der Nachricht ausgetauscht.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1001]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1001', chapter='Dummy Chapter', section='Dummy Section', role='MSB', ebd_name='E_1001 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Hat der MSB die generelle Zustimmung zur Durchführung einer Entsperrung/Sperrung dem NB erteilt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nGenerelle Zustimmung des MSB für die Sperrung/Entsperrung liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegt ein Verhinderungsgrund einer Sperrung an der Marktlokation vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nVerhinderungsgrund liegt vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Liegen dem MSB technische Gründe für eine Ablehnung der Sperrung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nEs liegt ein technischer Ablehnungsgrund vor.\nHinweis: Das identifizierte Problem ist in der\n Antwort zu beschreiben/benennen.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist eine Mitwirkung des MSB bei Entsperrung/Sperrung vor Ort gewünscht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung unter Mitwirkung des MSB zugestimmt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Zustimmung\nMSB hat Durchführung der Sperrung und Entsperrung durch NB zugestimmt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1002]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1002', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1002 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Teilt der NB (ggf. nach erfolgtem Clearing mit dem MSB) die Ansicht des MSB, dass keine Sperrung erfolgen darf/kann?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nDer Antwortgrund des MSB aus „E_1001_Anfrage prüfen“ muss dem LF mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Sperrauftrag durchführen.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1003]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1003', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1003 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='War eine Sperrung aus rechtlichen Gründen nicht möglich (z.\xa0B., wenn eine Einstweilige Verfügung vorlag)?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein rechtlicher Grund vor Ort erkannt wurde.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde der Anschlussnutzer angetroffen?\nHinweis: Es gab keine Anzeichen dafür, dass der Anschlussnutzer anwesend war.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Der Anschlussnutzer wurde nicht angetroffen. Es gab keine Anzeichen dafür, dass dieser anwesend war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='War eine Sperrung aus dem Grund „aktive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „aktive Zutrittsverweigerung“ ist zu verstehen, dass der Anschlussnutzer angetroffen wurde und dieser den Zugang z.\xa0B. durch Drohungen, physische Angriffe, versperren des Zugangs zur Trennstelle unterbunden hat.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine aktive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='War eine Sperrung aus dem Grund „passive Zutrittsverweigerung“ nicht möglich?\nHinweis: Unter „passiver Zutrittsverweigerung“ ist zu verstehen, dass eine Anwesenheit des Anschlussnutzers festgestellt wurde, dieser jedoch seine Anwesenheit verleugnet. (z.B. Anschlussnutzer wurden in der Wohnung gesichtet, öffnet aber die Tür nicht).', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da eine passive Zutrittsverweigerung vorlag.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='War eine Sperrung wegen eines Verhinderungsgrundes nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein Verhinderungsgrund vorlag.\nHinweis: Im Freitext muss der Verhinderungsgrund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='War eine Sperrung aus einem tatsächlichen Grund nicht möglich?\nUnter tatsächliche Gründe fallen z. B.\nMarktlokation vor Ort nicht identifizierbar\nZugang zur Marktlokation nicht möglich\nKundenwechsel an der Marktlokation festgestellt', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein tatsächlicher Grund vorlag.\nHinweis: Im Freitext muss der tatsächliche Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='War eine Sperrung aus einem technischen Grund nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: gescheitert\nMarktlokation wurde nicht gesperrt, da ein technischer Grund vorlag.\nHinweis: Im Freitext muss der technische Grund mitgeteilt werden.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: erfolgreich\nMarktlokation wurde gesperrt.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1004]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1004', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1004 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde die Sperrung durch den UC "Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF" ausgelöst?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nMarktlokation wurde nicht über den UC (Unterbrechung der Anschlussnutzung (Sperren) auf Anweisung des LF) gesperrt. \nHinweis: Die Entsperrung muss auf konventionellem Weg erfolgen.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wäre eine Wiederinbetriebnahme aufgrund eines technischen Verhinderungsgrundes (z.B. entspricht nicht den geltenden Rechtsvorschriften, behördlichen Verfügungen, den anerkannten Regeln der Technik, DVGW Technischen Anschlussbedingungen (TAB) oder den sonstigen besonderen Vorschriften des NB) nicht möglich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster Ablehnung\nWiederinbetriebnahme wäre technisch nicht möglich\nHinweis:\nDie Marktlokation bzw. die dazugehörigen elektrischen Anlagen kann gemäß NAV und TAB nicht wieder in Betrieb genommen werden. Sie entspricht nicht der geltenden Rechtsvorschriften und behördlichen Verfügungen sowie den anerkannten Regeln der Technik, DVGW, den Technischen Anschlussbedingungen (TAB) und den sonstigen besonderen Vorschriften des NB.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist zum Zeitpunkt des Nachrichteneingangs die Marktlokation bereits gesperrt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nMarktlokation ist nicht gesperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt bereits ein Entsperrauftrag vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nEntsperrauftrag für die Marktlokation liegt bereits vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nZustimmung')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1005]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1005', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1005 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: erfolgreich\nMarktlokation ist entsperrt.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: gescheitert\nMarktlokation ist weiterhin gesperrt.\nHinweis: Die Gründe des Scheiterns sind zu übermitteln.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1006]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1006', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1006 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Wurde der Sperr- / Entsperrauftrag bereits durch den NB abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nAuftrag wurde bereits abgelehnt und kann nicht mehr storniert werden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Handelt es sich um eine Stornierung eines Entsperrauftrags?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='40'), result_code=None, note='Hinweis: Es handelt sich um eine Stornierung eines Sperrauftrags.')], use_cases=None), EbdTableRow(step_number='30', description='Ist die Stornierung vor der Durchführung der Entsperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Cluster: Zustimmung\nEntsperrauftrag ist storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nStornierung des Entsperrauftrags nicht mehr möglich.')], use_cases=None), EbdTableRow(step_number='40', description='Ist der Nachrichteneingang der Stornierung spätestens am Tag vor dem vom NB geplanten Ausführungstermin bzw. fixen Sperrtermin aus dem Sperrauftrag eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Zustimmung\nSperrauftrag ist bis zum Vortag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Ist die Stornierung vor der Durchführung der Sperrung eingegangen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Zustimmung\nSperrauftrag ist am Tag der Sperrung storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nStornierung des Sperrauftrags nicht mehr möglich.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1007]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1007', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1007 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Entspricht die Rechnung den Anforderungen gem. §14 Abs. 4 UStG?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Cluster: Ablehnung\nRechnung entspricht nicht §14 UstG.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist das Rechnungsdatum kleiner gleich dem Eingangsdatum?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A02', note='Cluster: Ablehnung\nRechnungsdatum liegt in der Zukunft'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Liegt vom Rechnungssteller die in dieser Rechnung verwendete Rechnungsnummer bereits vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Cluster: Ablehnung\nRechnungsnummer wurde bereits verwendet.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Liegt ein Rechenfehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Cluster: Ablehnung\nRechenfehler liegt vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Handelt es sich um eine Forderung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='70'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note='Hinweis: Es handelt sich um eine Rückerstattung.')], use_cases=None), EbdTableRow(step_number='70', description='Ist die Frist der Fälligkeit unterschritten?\nHinweis: Fälligkeit unterschritten bedeutet: Zahlungsziel\xa0≤\xa010 WT zum Rechnungseingangsdatum', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A05', note='Cluster: Ablehnung\nDas Zahlungsziel ist unterschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Ist die Frist der Fälligkeit überschritten?\nZahlungsziel\xa0>\xa010 WT zum Rechnungsdatum\nNach NNV/LRV § 8 Abrechnung, Zahlung und Verzug ist bei Rückerstattungen das Ausstellungsdatum der Rückerstattung entscheidend.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Cluster: Ablehnung\nDas Zahlungsziel ist überschritten.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='90'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Handelt es sich um eine Rechnung von „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='270'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note='Hinweis: Es handelt sich um eine Rechnung von Unterbrechung / Wiederherstellung der Anschlussnutzung.')], use_cases=None), EbdTableRow(step_number='100', description='Werden die Positionen mit dem korrekten Steuersatz abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Cluster: Ablehnung\nMindestens eine der Positionen ist mit dem falschen Steuersatz abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='110', description='Handelt es sich um eine Rechnung von „Unterbrechung/Wiederherstellung der Anschlussnutzung“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A24', note='Cluster: Ablehnung\nAbrechnung „Blindarbeit“ für Sparte Gas nicht relevant.')], use_cases=None), EbdTableRow(step_number='120', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A08', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='130', description='Hat der Lieferant einen Sperrauftrag mit der in der Rechnung vorhandenen Auftragsnummer des Sperrauftrags bestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A09', note='Cluster: Ablehnung\nDer abzurechnende Sperrauftrag ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='140', description='Wurde der Sperrauftrag bereits abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde diese Rechnung zum Sperrauftrag wieder storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A10', note='Cluster: Ablehnung\nDer Sperrauftrag wurde bereits abgerechnet (doppelte Rechnung).'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='160', description='Ist der identifizierte Sperrauftrag storniert und die Stornierung bestätigt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note='Hinweis: Der Sperrauftrag wurde nicht storniert oder die Stornierung erfolgte zu spät und wurde daher abgelehnt.')], use_cases=None), EbdTableRow(step_number='170', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-004] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung bis zum Vortag der Sperrung) oder Artikel-ID \n[2-01-7-005] (Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung am Tag der Sperrung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der Leistung für einen stornierten Auftrag zur Unterbrechung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='180', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A12', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis „Stornierung eines Auftrags zur Unterbrechung der Anschlussnutzung“ des Preisblatts bzw. Artikel-ID ist im Preisblatt nicht genannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='190', description='War die Sperrung aus dem Sperrauftrag erfolgreich?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note='Hinweis: Sperrung war nicht erfolgreich.')], use_cases=None), EbdTableRow(step_number='200', description='Wurde von dem Lieferanten bereits die Wiederherstellung der Anschlussnutzung für die aus diesem Auftrag umgesetzte Unterbrechung der Anschlussnutzung beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='210'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='210', description='Wurde die Entsperrung vom Lieferanten mit der Option „Entsperrung auch außerhalb der regulären Arbeitszeit“ beauftragt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='220'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Werden in der Rechnung die beiden Artikel-IDs \n[2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A13', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='230', description='Wird in der Rechnung die Artikel-ID [2-01-7-001] (Unterbrechung der Anschlussnutzung in der regulären Arbeitszeit) und zusätzlich genau eine der beiden Artikel-ID \n[2-01-7-002] (Wiederherstellung der Anschlussnutzung in der regulären Arbeitszeit) oder \n[2-01-7-006] (Wiederherstellung der Anschlussnutzung außerhalb der regulären Arbeitszeit) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A14', note='Cluster: Ablehnung\nDie abgerechnete(en) Artikel-ID entspricht nicht der Leistung für eine Unterbrechung und Wiederherstellung der Anschlussnutzung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='240'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='240', description='Entsprechen die Preise in der Rechnung den Preisen aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A15', note='Cluster: Ablehnung\nMindestens ein Preis in der Rechnung passt nicht zum Preis für eine Unterbrechung und Wiederherstellung der Anschlussnutzung auf dem Preisblatt bzw. mindestens eine Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='250', description='Wird in der Rechnung die Artikel-ID \n[2-01-7-003] (Erfolglose Unterbrechung) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der Leistung für eine erfolglose Unterbrechung'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='260'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='260', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A17', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für eine erfolglose Unterbrechung auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='330'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='270', description='Liegt für den Abrechnungszeitpunkt ein gültiges Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A18', note='Cluster: Ablehnung\nDem Lieferanten liegt kein gültiges Preisblatt für die Verzugskosten vor'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='280'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='280', description='Liegt dem Lieferanten die Rechnung vor, auf die sich die Verzugskostenrechnung bezieht?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A19', note='Cluster: Ablehnung\nDie Rechnung, auf die sich die Verzugskostenrechnung bezieht, ist nicht bekannt.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='290'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='290', description='Wird in der Rechnung die Artikel-ID \n[2-02-0-001] (Verzugskosten pauschal) oder Artikel-ID \n[2-02-0-002] (Verzugskosten variabel) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A20', note='Cluster: Ablehnung\nDer abgerechnete Artikel entspricht nicht der Leistung für Verzugskosten'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='300'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='300', description='Sind die Verzugskosten gerechtfertigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A21', note='Cluster: Ablehnung\nDie Verzugskosten sind nicht gerechtfertigt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='310'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='310', description='Werden die Verzugskosten pauschal mit der \nArtikel-ID [2-02-0-001] (Verzugskosten pauschal) abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='330'), result_code=None, note='Hinweis:\nDie Verzugskosten werden variabel mit der \nArtikel-ID [2-02-0-002] abgerechnet'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='320'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='320', description='Entspricht der Preis in der Rechnung dem Preis aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A22', note='Cluster: Ablehnung\nPreis in der Rechnung passt nicht zum Preis für Verzugskosten auf dem Preisblatt bzw. Artikel-ID ist im Preisblatt nicht genannt'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='330', description='Entsprechen die geltend gemachten Verzugskosten den gesetzlichen Regelungen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A23', note='Cluster: Ablehnung\nPreis ist in der Höhe nicht angemessen'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='440'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='440', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Zahlungsavis versenden'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Cluster: Ablehnung\nSonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen.\nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1008]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1008', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1008 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Unterbrechung der Anschlussnutzung (Sperren)“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='30'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Bezieht sich das Nicht-Zahlungsavis auf eine Rechnung der Kategorie „Verzugskosten“?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='140'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A16', note='Abrechnung „Blindarbeit“ für Sparte Gas nicht relevant.')], use_cases=None), EbdTableRow(step_number='30', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Ein gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des an ihm versandten, für die Rechnung gültigen Preisblatts.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='50', description='Hat der Lieferant wegen unbekanntem Sperrauftrag abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Liegt ein bestätigter Sperrauftrag mit der angegebenen Referenz auf den Sperrauftrag des Lieferanten vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Gültiger Sperrauftrag ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='70', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='80'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='110'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Hat der LF den Sperrauftrag storniert und wurde diese Stornierung vom NB bestätigt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='90'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='100'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='90', description='Wurde die korrekte Artikel-ID entsprechend eines stornierten Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A15', note='Korrekte Artikel-ID für die Abrechnung eines stornierten Sperrauftrags wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus der Stornierung.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='100', description='Wurde die korrekte Artikel-ID entsprechend des Ergebnisses des Sperrauftrags in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A03', note='Korrekte Artikel-ID wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung aus dem Ergebnis des Sperrauftrags.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='110', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein, zum Preisblatt abweichender Preis angegeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='120'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='130'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='120', description='Wurde in der Rechnung der im Preisblatt angegebene Preis abgerechnet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A04', note='Korrekter Preis zum gültigen Preisblatt wurde in der Rechnung angegeben\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='130', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='140', description='Hat der Lieferant wegen fehlendem Preisblatt „Preisblatt Sperren / Entsperren und Verzugskosten“ abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='150'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='160'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='150', description='Wurde dem Lieferanten ein für die Rechnung gültiges Preisblatt fristgerecht versendet?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A06', note='Gültiges Preisblatt wurde versendet.\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='160', description='Hat der Lieferant wegen unbekannter Rechnung, auf die sich die Verzugskostenrechnung bezieht, abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='170'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='190'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='170', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, dem Lieferanten zugestellt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='180'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='180', description='Wurde die Rechnung, auf die sich die Verzugskostenrechnung bezieht, storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A07', note='Gültige Rechnung ist vorhanden\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung der Rechnung, auf die sich die Verzugskostenrechnung bezieht.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='190', description='Hat der Lieferant die Rechnung wegen Angabe einer falschen Artikel-ID abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='200'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='210'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='200', description='Wurde genau eine der beiden Artikel-ID für Verzugskosten in der Rechnung angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A08', note='Es wurde für die Verzugskosten eine der beiden Artikel-ID verwendet'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='210', description='Hat der Lieferant die Rechnung abgelehnt, da auf der Rechnung ein zum Preisblatt abweichender Preis angeben wurde?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='220'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='250'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='220', description='Wurde in der Rechnung die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) angegeben?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='230'), result_code=None, note=None), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='240'), result_code=None, note='Hinweis: Es wurde die Artikel-ID 2-02-0-002 (Verzugskosten variabel) angegeben')], use_cases=None), EbdTableRow(step_number='230', description='Ist der angegeben Preis in der Rechnung identisch mit dem Preis für die Artikel-ID 2-02-0-001 (Verzugskosten pauschal) aus dem Preisblatt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A09', note='Korrekter Preis wurde in der Rechnung abgerechnet\nHinweis: Angabe von Datenaustauschreferenz incl. Nr. der Empfangsbestätigung des Preisblatts'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='240', description='Ist der Preis, der in der Rechnung für die Artikel-ID 2-02-0-002 (Verzugskosten variabel) in Rechnung gestellt wurde für die der Verzugsrechnung zugrundeliegende, nicht bezahlte Rechnung angemessen?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A10', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None), EbdTableRow(step_number='250', description='Ergibt die Prüfung der abgelehnten Rechnung, dass die Ablehnung durch den Lieferanten gerechtfertigt war?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A11', note='Die Rechnung wird als korrekt angesehen\nHinweis: Es ist zu begründen, warum die Rechnung korrekt war.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code=None, note='Versand der Nachricht „Storno der ursprünglichen Rechnung“')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1009]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1009', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1009 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Konnte der Rechnungssteller den Einwand des Rechnungsempfängers entkräften?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Rechnungsempfänger ist nach erneuter Prüfung immer noch der Ansicht, dass das Nichtzahlungsavis gerechtfertigt ist. \nHinweis: Der Einwand ist in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Liegen weitere Fehler in der Rechnung vor?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Rechnung wird aufgrund noch nicht gemeldeter Fehler weiterhin abgelehnt.\nHinweis: Die Fehler sind in der Antwort zu beschreiben.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Rechnung zustimmen und im Zahlungsavis berücksichtigen')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1010]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1010', chapter='Dummy Chapter', section='Dummy Section', role='LF', ebd_name='E_1010 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die zu stornierende Rechnung beim Empfänger bekannt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A01', note='Die zu stornierende Rechnung ist nicht vorhanden.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='20'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='20', description='Wurde die zu stornierende Rechnung bereits storniert?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A02', note='Die zu stornierende Rechnung wurde bereits storniert.'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='30'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='30', description='Ist der Rechnungstyp der Stornorechnung identisch mit dem Rechnungstyp der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A03', note='Der Rechnungstyp der Stornorechnung ist nicht identisch mit dem Rechnungstyp der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='40'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='40', description='Ist der Abrechnungszeitraum bzw. das Ausführungsdatum der Stornorechnung identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A04', note='Der Abrechnungszeitraum bzw. des Ausführungsdatum der Stornorechnung ist nicht identisch mit dem Abrechnungszeitraum bzw. dem Ausführungsdatum der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='50'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='50', description='Entsprechen die Beträge der Stornorechnung den Beträgen der ursprünglichen Rechnung?\n\nHinweis: Alle MOA-Segmente im Summenteil müssen unter Nutzung der Absolutbetragfunktion übereinstimmen.', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code='A05', note='Mindestens ein Betrag der Stornorechnung ist nicht identisch mit dem Betrag der ursprünglichen Rechnung.'), EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='60'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='60', description='Ist ein zuvor nicht spezifizierter Fehler aufgetreten?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A99', note='Ablehnung Sonstiges\nHinweis: Das identifizierte Problem ist in der Antwort zu beschreiben/benennen. \nNutzungsmöglichkeit Ende: 01.10.2024 00:00 Uhr'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='70'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='70', description='Wurde der ursprünglichen Rechnung zugestimmt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Stornorechnung zustimmen und im Zahlungslauf berücksichtigen'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='80'), result_code=None, note=None)], use_cases=None), EbdTableRow(step_number='80', description='Wurde die ursprüngliche Rechnung abgelehnt?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung mit einem Nichtzahlungsavis abgelehnt, dann ist auf die Stornorechnung keine Antwort zu senden'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number='Ende'), result_code=None, note='Hinweis: \nWurde die ursprüngliche Rechnung noch nicht beantwortet, weder mit einem Zahlungsavis noch mit einem Nichtzahlungsavis, dann ist weder auf die Rechnung noch auf die Stornorechnung eine Antwort zu senden.')], use_cases=None)], multi_step_instructions=None)
# ---
# name: TestEbdamame.test_extraction[19.06.2023 v3.4 / FV2310][E_1020]
  EbdTable(metadata=EbdTableMetaData(ebd_code='E_1020', chapter='Dummy Chapter', section='Dummy Section', role='NB', ebd_name='E_1020 Dummy Name', remark=None), rows=[EbdTableRow(step_number='10', description='Ist die Entsperrung erfolgreich durchgeführt worden?', sub_rows=[EbdTableSubRow(check_result=EbdCheckResult(result=True, subsequent_step_number=None), result_code='A01', note='Marktlokation ist entsperrt'), EbdTableSubRow(check_result=EbdCheckResult(result=False, subsequent_step_number=None), result_code=None, note='Bilaterale Klärung.')], use_cases=None)], multi_step_instructions=None)
# ---
